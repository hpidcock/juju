// Copyright 2019 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

package main

import (
	"bytes"
	"io/ioutil"
	"text/template"
	"time"

	"github.com/juju/juju/cert"
)

const count int = 8

type keyPair struct {
	X509       string
	PrivateKey string
}

type paramSet struct {
	GeneratedAt string
	CA          []keyPair
	Server      []keyPair
	OtherCA     []keyPair
}

func main() {
	params := paramSet{
		GeneratedAt: time.Now().Format(time.RFC822),
	}
	for i := 0; i < count; i++ {
		caCert, caKey, err := cert.NewCA(
			"juju testing",
			"1234-ABCD-IS-NOT-A-REAL-UUID",
			time.Now().AddDate(10, 0, 0))
		if err != nil {
			panic(err)
		}
		params.CA = append(params.CA, keyPair{caCert, caKey})
		var hostnames []string
		srvCert, srvKey, err := cert.NewServer(caCert, caKey, time.Now().AddDate(10, 0, 0), hostnames)
		if err != nil {
			panic(err)
		}
		params.Server = append(params.Server, keyPair{srvCert, srvKey})
	}

	for i := 0; i < count; i++ {
		caCert, caKey, err := cert.NewCA(
			"juju testing",
			"1234-ABCD-IS-NOT-A-REAL-UUID",
			time.Now().AddDate(10, 0, 0))
		if err != nil {
			panic(err)
		}
		params.OtherCA = append(params.OtherCA, keyPair{caCert, caKey})
	}

	buf := &bytes.Buffer{}
	err := outputTemplate.Execute(buf, params)
	if err != nil {
		panic(err)
	}

	err = ioutil.WriteFile("certs_generated.go", buf.Bytes(), 0664)
	if err != nil {
		panic(err)
	}
}

var outputTemplate = template.Must(template.New("").Parse(`// Copyright 2019 Canonical Ltd.
// Licensed under the AGPLv3, see LICENCE file for details.

// Code generated by github.com/juju/juju/testing/certgen. DO NOT EDIT.
package testing

// Generated on {{.GeneratedAt}}

var generatedCA = []struct {
	certPEM string
	keyPEM  string
}{
{{range .CA}}	{ {{.X509 | printf "%q"}}, {{.PrivateKey | printf "%q"}} },
{{end}}
}

// generatedServer contains server certs that matches a CA at the same index in generatedCA
var generatedServer = []struct {
	certPEM string
	keyPEM  string
}{
{{range .Server}}	{ {{.X509 | printf "%q"}}, {{.PrivateKey | printf "%q"}} },
{{end}}
}

var otherCA = []struct {
	certPEM string
	keyPEM  string
}{
{{range .OtherCA}}	{ {{.X509 | printf "%q"}}, {{.PrivateKey | printf "%q"}} },
{{end}}
}
`))
