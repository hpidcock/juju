// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/csi-api/pkg/client/clientset/versioned/typed/csi/v1alpha1 (interfaces: CsiV1alpha1Interface,CSIDriverInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "k8s.io/csi-api/pkg/apis/csi/v1alpha1"
	v1alpha10 "k8s.io/csi-api/pkg/client/clientset/versioned/typed/csi/v1alpha1"
	reflect "reflect"
)

// MockCsiV1alpha1Interface is a mock of CsiV1alpha1Interface interface
type MockCsiV1alpha1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockCsiV1alpha1InterfaceMockRecorder
}

// MockCsiV1alpha1InterfaceMockRecorder is the mock recorder for MockCsiV1alpha1Interface
type MockCsiV1alpha1InterfaceMockRecorder struct {
	mock *MockCsiV1alpha1Interface
}

// NewMockCsiV1alpha1Interface creates a new mock instance
func NewMockCsiV1alpha1Interface(ctrl *gomock.Controller) *MockCsiV1alpha1Interface {
	mock := &MockCsiV1alpha1Interface{ctrl: ctrl}
	mock.recorder = &MockCsiV1alpha1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCsiV1alpha1Interface) EXPECT() *MockCsiV1alpha1InterfaceMockRecorder {
	return m.recorder
}

// CSIDrivers mocks base method
func (m *MockCsiV1alpha1Interface) CSIDrivers() v1alpha10.CSIDriverInterface {
	ret := m.ctrl.Call(m, "CSIDrivers")
	ret0, _ := ret[0].(v1alpha10.CSIDriverInterface)
	return ret0
}

// CSIDrivers indicates an expected call of CSIDrivers
func (mr *MockCsiV1alpha1InterfaceMockRecorder) CSIDrivers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSIDrivers", reflect.TypeOf((*MockCsiV1alpha1Interface)(nil).CSIDrivers))
}

// CSINodeInfos mocks base method
func (m *MockCsiV1alpha1Interface) CSINodeInfos() v1alpha10.CSINodeInfoInterface {
	ret := m.ctrl.Call(m, "CSINodeInfos")
	ret0, _ := ret[0].(v1alpha10.CSINodeInfoInterface)
	return ret0
}

// CSINodeInfos indicates an expected call of CSINodeInfos
func (mr *MockCsiV1alpha1InterfaceMockRecorder) CSINodeInfos() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CSINodeInfos", reflect.TypeOf((*MockCsiV1alpha1Interface)(nil).CSINodeInfos))
}

// RESTClient mocks base method
func (m *MockCsiV1alpha1Interface) RESTClient() rest.Interface {
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient
func (mr *MockCsiV1alpha1InterfaceMockRecorder) RESTClient() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockCsiV1alpha1Interface)(nil).RESTClient))
}

// MockCSIDriverInterface is a mock of CSIDriverInterface interface
type MockCSIDriverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCSIDriverInterfaceMockRecorder
}

// MockCSIDriverInterfaceMockRecorder is the mock recorder for MockCSIDriverInterface
type MockCSIDriverInterfaceMockRecorder struct {
	mock *MockCSIDriverInterface
}

// NewMockCSIDriverInterface creates a new mock instance
func NewMockCSIDriverInterface(ctrl *gomock.Controller) *MockCSIDriverInterface {
	mock := &MockCSIDriverInterface{ctrl: ctrl}
	mock.recorder = &MockCSIDriverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCSIDriverInterface) EXPECT() *MockCSIDriverInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCSIDriverInterface) Create(arg0 *v1alpha1.CSIDriver) (*v1alpha1.CSIDriver, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v1alpha1.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCSIDriverInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCSIDriverInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCSIDriverInterface) Delete(arg0 string, arg1 *v1.DeleteOptions) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCSIDriverInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCSIDriverInterface)(nil).Delete), arg0, arg1)
}

// DeleteCollection mocks base method
func (m *MockCSIDriverInterface) DeleteCollection(arg0 *v1.DeleteOptions, arg1 v1.ListOptions) error {
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockCSIDriverInterfaceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockCSIDriverInterface)(nil).DeleteCollection), arg0, arg1)
}

// Get mocks base method
func (m *MockCSIDriverInterface) Get(arg0 string, arg1 v1.GetOptions) (*v1alpha1.CSIDriver, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCSIDriverInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCSIDriverInterface)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockCSIDriverInterface) List(arg0 v1.ListOptions) (*v1alpha1.CSIDriverList, error) {
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v1alpha1.CSIDriverList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockCSIDriverInterfaceMockRecorder) List(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCSIDriverInterface)(nil).List), arg0)
}

// Patch mocks base method
func (m *MockCSIDriverInterface) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v1alpha1.CSIDriver, error) {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockCSIDriverInterfaceMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockCSIDriverInterface)(nil).Patch), varargs...)
}

// Update mocks base method
func (m *MockCSIDriverInterface) Update(arg0 *v1alpha1.CSIDriver) (*v1alpha1.CSIDriver, error) {
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1alpha1.CSIDriver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockCSIDriverInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCSIDriverInterface)(nil).Update), arg0)
}

// Watch mocks base method
func (m *MockCSIDriverInterface) Watch(arg0 v1.ListOptions) (watch.Interface, error) {
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockCSIDriverInterfaceMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockCSIDriverInterface)(nil).Watch), arg0)
}
