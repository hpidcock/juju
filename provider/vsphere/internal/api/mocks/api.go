// Code generated by MockGen. DO NOT EDIT.
// Source: generated_api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	soap "github.com/vmware/govmomi/vim25/soap"
	types "github.com/vmware/govmomi/vim25/types"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AbdicateDomOwnership mocks base method
func (m *MockContext) AbdicateDomOwnership(ctx context.Context, r soap.RoundTripper, req *types.AbdicateDomOwnership) (*types.AbdicateDomOwnershipResponse, error) {
	ret := m.ctrl.Call(m, "AbdicateDomOwnership", ctx, r, req)
	ret0, _ := ret[0].(*types.AbdicateDomOwnershipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbdicateDomOwnership indicates an expected call of AbdicateDomOwnership
func (mr *MockContextMockRecorder) AbdicateDomOwnership(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbdicateDomOwnership", reflect.TypeOf((*MockContext)(nil).AbdicateDomOwnership), ctx, r, req)
}

// AcknowledgeAlarm mocks base method
func (m *MockContext) AcknowledgeAlarm(ctx context.Context, r soap.RoundTripper, req *types.AcknowledgeAlarm) (*types.AcknowledgeAlarmResponse, error) {
	ret := m.ctrl.Call(m, "AcknowledgeAlarm", ctx, r, req)
	ret0, _ := ret[0].(*types.AcknowledgeAlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcknowledgeAlarm indicates an expected call of AcknowledgeAlarm
func (mr *MockContextMockRecorder) AcknowledgeAlarm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeAlarm", reflect.TypeOf((*MockContext)(nil).AcknowledgeAlarm), ctx, r, req)
}

// AcquireCimServicesTicket mocks base method
func (m *MockContext) AcquireCimServicesTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireCimServicesTicket) (*types.AcquireCimServicesTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireCimServicesTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireCimServicesTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireCimServicesTicket indicates an expected call of AcquireCimServicesTicket
func (mr *MockContextMockRecorder) AcquireCimServicesTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireCimServicesTicket", reflect.TypeOf((*MockContext)(nil).AcquireCimServicesTicket), ctx, r, req)
}

// AcquireCloneTicket mocks base method
func (m *MockContext) AcquireCloneTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireCloneTicket) (*types.AcquireCloneTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireCloneTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireCloneTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireCloneTicket indicates an expected call of AcquireCloneTicket
func (mr *MockContextMockRecorder) AcquireCloneTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireCloneTicket", reflect.TypeOf((*MockContext)(nil).AcquireCloneTicket), ctx, r, req)
}

// AcquireCredentialsInGuest mocks base method
func (m *MockContext) AcquireCredentialsInGuest(ctx context.Context, r soap.RoundTripper, req *types.AcquireCredentialsInGuest) (*types.AcquireCredentialsInGuestResponse, error) {
	ret := m.ctrl.Call(m, "AcquireCredentialsInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireCredentialsInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireCredentialsInGuest indicates an expected call of AcquireCredentialsInGuest
func (mr *MockContextMockRecorder) AcquireCredentialsInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireCredentialsInGuest", reflect.TypeOf((*MockContext)(nil).AcquireCredentialsInGuest), ctx, r, req)
}

// AcquireGenericServiceTicket mocks base method
func (m *MockContext) AcquireGenericServiceTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireGenericServiceTicket) (*types.AcquireGenericServiceTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireGenericServiceTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireGenericServiceTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireGenericServiceTicket indicates an expected call of AcquireGenericServiceTicket
func (mr *MockContextMockRecorder) AcquireGenericServiceTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireGenericServiceTicket", reflect.TypeOf((*MockContext)(nil).AcquireGenericServiceTicket), ctx, r, req)
}

// AcquireLocalTicket mocks base method
func (m *MockContext) AcquireLocalTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireLocalTicket) (*types.AcquireLocalTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireLocalTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireLocalTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLocalTicket indicates an expected call of AcquireLocalTicket
func (mr *MockContextMockRecorder) AcquireLocalTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLocalTicket", reflect.TypeOf((*MockContext)(nil).AcquireLocalTicket), ctx, r, req)
}

// AcquireMksTicket mocks base method
func (m *MockContext) AcquireMksTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireMksTicket) (*types.AcquireMksTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireMksTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireMksTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireMksTicket indicates an expected call of AcquireMksTicket
func (mr *MockContextMockRecorder) AcquireMksTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireMksTicket", reflect.TypeOf((*MockContext)(nil).AcquireMksTicket), ctx, r, req)
}

// AcquireTicket mocks base method
func (m *MockContext) AcquireTicket(ctx context.Context, r soap.RoundTripper, req *types.AcquireTicket) (*types.AcquireTicketResponse, error) {
	ret := m.ctrl.Call(m, "AcquireTicket", ctx, r, req)
	ret0, _ := ret[0].(*types.AcquireTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireTicket indicates an expected call of AcquireTicket
func (mr *MockContextMockRecorder) AcquireTicket(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTicket", reflect.TypeOf((*MockContext)(nil).AcquireTicket), ctx, r, req)
}

// AddAuthorizationRole mocks base method
func (m *MockContext) AddAuthorizationRole(ctx context.Context, r soap.RoundTripper, req *types.AddAuthorizationRole) (*types.AddAuthorizationRoleResponse, error) {
	ret := m.ctrl.Call(m, "AddAuthorizationRole", ctx, r, req)
	ret0, _ := ret[0].(*types.AddAuthorizationRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthorizationRole indicates an expected call of AddAuthorizationRole
func (mr *MockContextMockRecorder) AddAuthorizationRole(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthorizationRole", reflect.TypeOf((*MockContext)(nil).AddAuthorizationRole), ctx, r, req)
}

// AddCustomFieldDef mocks base method
func (m *MockContext) AddCustomFieldDef(ctx context.Context, r soap.RoundTripper, req *types.AddCustomFieldDef) (*types.AddCustomFieldDefResponse, error) {
	ret := m.ctrl.Call(m, "AddCustomFieldDef", ctx, r, req)
	ret0, _ := ret[0].(*types.AddCustomFieldDefResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomFieldDef indicates an expected call of AddCustomFieldDef
func (mr *MockContextMockRecorder) AddCustomFieldDef(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomFieldDef", reflect.TypeOf((*MockContext)(nil).AddCustomFieldDef), ctx, r, req)
}

// AddDVPortgroup_Task mocks base method
func (m *MockContext) AddDVPortgroup_Task(ctx context.Context, r soap.RoundTripper, req *types.AddDVPortgroup_Task) (*types.AddDVPortgroup_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AddDVPortgroup_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AddDVPortgroup_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDVPortgroup_Task indicates an expected call of AddDVPortgroup_Task
func (mr *MockContextMockRecorder) AddDVPortgroup_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDVPortgroup_Task", reflect.TypeOf((*MockContext)(nil).AddDVPortgroup_Task), ctx, r, req)
}

// AddDisks_Task mocks base method
func (m *MockContext) AddDisks_Task(ctx context.Context, r soap.RoundTripper, req *types.AddDisks_Task) (*types.AddDisks_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AddDisks_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AddDisks_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisks_Task indicates an expected call of AddDisks_Task
func (mr *MockContextMockRecorder) AddDisks_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisks_Task", reflect.TypeOf((*MockContext)(nil).AddDisks_Task), ctx, r, req)
}

// AddFilter mocks base method
func (m *MockContext) AddFilter(ctx context.Context, r soap.RoundTripper, req *types.AddFilter) (*types.AddFilterResponse, error) {
	ret := m.ctrl.Call(m, "AddFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.AddFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilter indicates an expected call of AddFilter
func (mr *MockContextMockRecorder) AddFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilter", reflect.TypeOf((*MockContext)(nil).AddFilter), ctx, r, req)
}

// AddFilterEntities mocks base method
func (m *MockContext) AddFilterEntities(ctx context.Context, r soap.RoundTripper, req *types.AddFilterEntities) (*types.AddFilterEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "AddFilterEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.AddFilterEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilterEntities indicates an expected call of AddFilterEntities
func (mr *MockContextMockRecorder) AddFilterEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilterEntities", reflect.TypeOf((*MockContext)(nil).AddFilterEntities), ctx, r, req)
}

// AddGuestAlias mocks base method
func (m *MockContext) AddGuestAlias(ctx context.Context, r soap.RoundTripper, req *types.AddGuestAlias) (*types.AddGuestAliasResponse, error) {
	ret := m.ctrl.Call(m, "AddGuestAlias", ctx, r, req)
	ret0, _ := ret[0].(*types.AddGuestAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGuestAlias indicates an expected call of AddGuestAlias
func (mr *MockContextMockRecorder) AddGuestAlias(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGuestAlias", reflect.TypeOf((*MockContext)(nil).AddGuestAlias), ctx, r, req)
}

// AddHost_Task mocks base method
func (m *MockContext) AddHost_Task(ctx context.Context, r soap.RoundTripper, req *types.AddHost_Task) (*types.AddHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AddHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AddHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHost_Task indicates an expected call of AddHost_Task
func (mr *MockContextMockRecorder) AddHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHost_Task", reflect.TypeOf((*MockContext)(nil).AddHost_Task), ctx, r, req)
}

// AddInternetScsiSendTargets mocks base method
func (m *MockContext) AddInternetScsiSendTargets(ctx context.Context, r soap.RoundTripper, req *types.AddInternetScsiSendTargets) (*types.AddInternetScsiSendTargetsResponse, error) {
	ret := m.ctrl.Call(m, "AddInternetScsiSendTargets", ctx, r, req)
	ret0, _ := ret[0].(*types.AddInternetScsiSendTargetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInternetScsiSendTargets indicates an expected call of AddInternetScsiSendTargets
func (mr *MockContextMockRecorder) AddInternetScsiSendTargets(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInternetScsiSendTargets", reflect.TypeOf((*MockContext)(nil).AddInternetScsiSendTargets), ctx, r, req)
}

// AddInternetScsiStaticTargets mocks base method
func (m *MockContext) AddInternetScsiStaticTargets(ctx context.Context, r soap.RoundTripper, req *types.AddInternetScsiStaticTargets) (*types.AddInternetScsiStaticTargetsResponse, error) {
	ret := m.ctrl.Call(m, "AddInternetScsiStaticTargets", ctx, r, req)
	ret0, _ := ret[0].(*types.AddInternetScsiStaticTargetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInternetScsiStaticTargets indicates an expected call of AddInternetScsiStaticTargets
func (mr *MockContextMockRecorder) AddInternetScsiStaticTargets(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInternetScsiStaticTargets", reflect.TypeOf((*MockContext)(nil).AddInternetScsiStaticTargets), ctx, r, req)
}

// AddKey mocks base method
func (m *MockContext) AddKey(ctx context.Context, r soap.RoundTripper, req *types.AddKey) (*types.AddKeyResponse, error) {
	ret := m.ctrl.Call(m, "AddKey", ctx, r, req)
	ret0, _ := ret[0].(*types.AddKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKey indicates an expected call of AddKey
func (mr *MockContextMockRecorder) AddKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKey", reflect.TypeOf((*MockContext)(nil).AddKey), ctx, r, req)
}

// AddKeys mocks base method
func (m *MockContext) AddKeys(ctx context.Context, r soap.RoundTripper, req *types.AddKeys) (*types.AddKeysResponse, error) {
	ret := m.ctrl.Call(m, "AddKeys", ctx, r, req)
	ret0, _ := ret[0].(*types.AddKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKeys indicates an expected call of AddKeys
func (mr *MockContextMockRecorder) AddKeys(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeys", reflect.TypeOf((*MockContext)(nil).AddKeys), ctx, r, req)
}

// AddLicense mocks base method
func (m *MockContext) AddLicense(ctx context.Context, r soap.RoundTripper, req *types.AddLicense) (*types.AddLicenseResponse, error) {
	ret := m.ctrl.Call(m, "AddLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.AddLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLicense indicates an expected call of AddLicense
func (mr *MockContextMockRecorder) AddLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLicense", reflect.TypeOf((*MockContext)(nil).AddLicense), ctx, r, req)
}

// AddMonitoredEntities mocks base method
func (m *MockContext) AddMonitoredEntities(ctx context.Context, r soap.RoundTripper, req *types.AddMonitoredEntities) (*types.AddMonitoredEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "AddMonitoredEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.AddMonitoredEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMonitoredEntities indicates an expected call of AddMonitoredEntities
func (mr *MockContextMockRecorder) AddMonitoredEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMonitoredEntities", reflect.TypeOf((*MockContext)(nil).AddMonitoredEntities), ctx, r, req)
}

// AddNetworkResourcePool mocks base method
func (m *MockContext) AddNetworkResourcePool(ctx context.Context, r soap.RoundTripper, req *types.AddNetworkResourcePool) (*types.AddNetworkResourcePoolResponse, error) {
	ret := m.ctrl.Call(m, "AddNetworkResourcePool", ctx, r, req)
	ret0, _ := ret[0].(*types.AddNetworkResourcePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNetworkResourcePool indicates an expected call of AddNetworkResourcePool
func (mr *MockContextMockRecorder) AddNetworkResourcePool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkResourcePool", reflect.TypeOf((*MockContext)(nil).AddNetworkResourcePool), ctx, r, req)
}

// AddPortGroup mocks base method
func (m *MockContext) AddPortGroup(ctx context.Context, r soap.RoundTripper, req *types.AddPortGroup) (*types.AddPortGroupResponse, error) {
	ret := m.ctrl.Call(m, "AddPortGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.AddPortGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPortGroup indicates an expected call of AddPortGroup
func (mr *MockContextMockRecorder) AddPortGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPortGroup", reflect.TypeOf((*MockContext)(nil).AddPortGroup), ctx, r, req)
}

// AddServiceConsoleVirtualNic mocks base method
func (m *MockContext) AddServiceConsoleVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.AddServiceConsoleVirtualNic) (*types.AddServiceConsoleVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "AddServiceConsoleVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.AddServiceConsoleVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceConsoleVirtualNic indicates an expected call of AddServiceConsoleVirtualNic
func (mr *MockContextMockRecorder) AddServiceConsoleVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceConsoleVirtualNic", reflect.TypeOf((*MockContext)(nil).AddServiceConsoleVirtualNic), ctx, r, req)
}

// AddStandaloneHost_Task mocks base method
func (m *MockContext) AddStandaloneHost_Task(ctx context.Context, r soap.RoundTripper, req *types.AddStandaloneHost_Task) (*types.AddStandaloneHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AddStandaloneHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AddStandaloneHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStandaloneHost_Task indicates an expected call of AddStandaloneHost_Task
func (mr *MockContextMockRecorder) AddStandaloneHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStandaloneHost_Task", reflect.TypeOf((*MockContext)(nil).AddStandaloneHost_Task), ctx, r, req)
}

// AddVirtualNic mocks base method
func (m *MockContext) AddVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.AddVirtualNic) (*types.AddVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "AddVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.AddVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVirtualNic indicates an expected call of AddVirtualNic
func (mr *MockContextMockRecorder) AddVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVirtualNic", reflect.TypeOf((*MockContext)(nil).AddVirtualNic), ctx, r, req)
}

// AddVirtualSwitch mocks base method
func (m *MockContext) AddVirtualSwitch(ctx context.Context, r soap.RoundTripper, req *types.AddVirtualSwitch) (*types.AddVirtualSwitchResponse, error) {
	ret := m.ctrl.Call(m, "AddVirtualSwitch", ctx, r, req)
	ret0, _ := ret[0].(*types.AddVirtualSwitchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVirtualSwitch indicates an expected call of AddVirtualSwitch
func (mr *MockContextMockRecorder) AddVirtualSwitch(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVirtualSwitch", reflect.TypeOf((*MockContext)(nil).AddVirtualSwitch), ctx, r, req)
}

// AllocateIpv4Address mocks base method
func (m *MockContext) AllocateIpv4Address(ctx context.Context, r soap.RoundTripper, req *types.AllocateIpv4Address) (*types.AllocateIpv4AddressResponse, error) {
	ret := m.ctrl.Call(m, "AllocateIpv4Address", ctx, r, req)
	ret0, _ := ret[0].(*types.AllocateIpv4AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIpv4Address indicates an expected call of AllocateIpv4Address
func (mr *MockContextMockRecorder) AllocateIpv4Address(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIpv4Address", reflect.TypeOf((*MockContext)(nil).AllocateIpv4Address), ctx, r, req)
}

// AllocateIpv6Address mocks base method
func (m *MockContext) AllocateIpv6Address(ctx context.Context, r soap.RoundTripper, req *types.AllocateIpv6Address) (*types.AllocateIpv6AddressResponse, error) {
	ret := m.ctrl.Call(m, "AllocateIpv6Address", ctx, r, req)
	ret0, _ := ret[0].(*types.AllocateIpv6AddressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateIpv6Address indicates an expected call of AllocateIpv6Address
func (mr *MockContextMockRecorder) AllocateIpv6Address(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateIpv6Address", reflect.TypeOf((*MockContext)(nil).AllocateIpv6Address), ctx, r, req)
}

// AnswerVM mocks base method
func (m *MockContext) AnswerVM(ctx context.Context, r soap.RoundTripper, req *types.AnswerVM) (*types.AnswerVMResponse, error) {
	ret := m.ctrl.Call(m, "AnswerVM", ctx, r, req)
	ret0, _ := ret[0].(*types.AnswerVMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerVM indicates an expected call of AnswerVM
func (mr *MockContextMockRecorder) AnswerVM(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerVM", reflect.TypeOf((*MockContext)(nil).AnswerVM), ctx, r, req)
}

// ApplyEntitiesConfig_Task mocks base method
func (m *MockContext) ApplyEntitiesConfig_Task(ctx context.Context, r soap.RoundTripper, req *types.ApplyEntitiesConfig_Task) (*types.ApplyEntitiesConfig_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ApplyEntitiesConfig_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ApplyEntitiesConfig_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyEntitiesConfig_Task indicates an expected call of ApplyEntitiesConfig_Task
func (mr *MockContextMockRecorder) ApplyEntitiesConfig_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEntitiesConfig_Task", reflect.TypeOf((*MockContext)(nil).ApplyEntitiesConfig_Task), ctx, r, req)
}

// ApplyHostConfig_Task mocks base method
func (m *MockContext) ApplyHostConfig_Task(ctx context.Context, r soap.RoundTripper, req *types.ApplyHostConfig_Task) (*types.ApplyHostConfig_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ApplyHostConfig_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ApplyHostConfig_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyHostConfig_Task indicates an expected call of ApplyHostConfig_Task
func (mr *MockContextMockRecorder) ApplyHostConfig_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyHostConfig_Task", reflect.TypeOf((*MockContext)(nil).ApplyHostConfig_Task), ctx, r, req)
}

// ApplyRecommendation mocks base method
func (m *MockContext) ApplyRecommendation(ctx context.Context, r soap.RoundTripper, req *types.ApplyRecommendation) (*types.ApplyRecommendationResponse, error) {
	ret := m.ctrl.Call(m, "ApplyRecommendation", ctx, r, req)
	ret0, _ := ret[0].(*types.ApplyRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyRecommendation indicates an expected call of ApplyRecommendation
func (mr *MockContextMockRecorder) ApplyRecommendation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRecommendation", reflect.TypeOf((*MockContext)(nil).ApplyRecommendation), ctx, r, req)
}

// ApplyStorageDrsRecommendationToPod_Task mocks base method
func (m *MockContext) ApplyStorageDrsRecommendationToPod_Task(ctx context.Context, r soap.RoundTripper, req *types.ApplyStorageDrsRecommendationToPod_Task) (*types.ApplyStorageDrsRecommendationToPod_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ApplyStorageDrsRecommendationToPod_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ApplyStorageDrsRecommendationToPod_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStorageDrsRecommendationToPod_Task indicates an expected call of ApplyStorageDrsRecommendationToPod_Task
func (mr *MockContextMockRecorder) ApplyStorageDrsRecommendationToPod_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStorageDrsRecommendationToPod_Task", reflect.TypeOf((*MockContext)(nil).ApplyStorageDrsRecommendationToPod_Task), ctx, r, req)
}

// ApplyStorageDrsRecommendation_Task mocks base method
func (m *MockContext) ApplyStorageDrsRecommendation_Task(ctx context.Context, r soap.RoundTripper, req *types.ApplyStorageDrsRecommendation_Task) (*types.ApplyStorageDrsRecommendation_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ApplyStorageDrsRecommendation_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ApplyStorageDrsRecommendation_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyStorageDrsRecommendation_Task indicates an expected call of ApplyStorageDrsRecommendation_Task
func (mr *MockContextMockRecorder) ApplyStorageDrsRecommendation_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyStorageDrsRecommendation_Task", reflect.TypeOf((*MockContext)(nil).ApplyStorageDrsRecommendation_Task), ctx, r, req)
}

// AreAlarmActionsEnabled mocks base method
func (m *MockContext) AreAlarmActionsEnabled(ctx context.Context, r soap.RoundTripper, req *types.AreAlarmActionsEnabled) (*types.AreAlarmActionsEnabledResponse, error) {
	ret := m.ctrl.Call(m, "AreAlarmActionsEnabled", ctx, r, req)
	ret0, _ := ret[0].(*types.AreAlarmActionsEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AreAlarmActionsEnabled indicates an expected call of AreAlarmActionsEnabled
func (mr *MockContextMockRecorder) AreAlarmActionsEnabled(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreAlarmActionsEnabled", reflect.TypeOf((*MockContext)(nil).AreAlarmActionsEnabled), ctx, r, req)
}

// AssignUserToGroup mocks base method
func (m *MockContext) AssignUserToGroup(ctx context.Context, r soap.RoundTripper, req *types.AssignUserToGroup) (*types.AssignUserToGroupResponse, error) {
	ret := m.ctrl.Call(m, "AssignUserToGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.AssignUserToGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUserToGroup indicates an expected call of AssignUserToGroup
func (mr *MockContextMockRecorder) AssignUserToGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUserToGroup", reflect.TypeOf((*MockContext)(nil).AssignUserToGroup), ctx, r, req)
}

// AssociateProfile mocks base method
func (m *MockContext) AssociateProfile(ctx context.Context, r soap.RoundTripper, req *types.AssociateProfile) (*types.AssociateProfileResponse, error) {
	ret := m.ctrl.Call(m, "AssociateProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.AssociateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProfile indicates an expected call of AssociateProfile
func (mr *MockContextMockRecorder) AssociateProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProfile", reflect.TypeOf((*MockContext)(nil).AssociateProfile), ctx, r, req)
}

// AttachDisk_Task mocks base method
func (m *MockContext) AttachDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.AttachDisk_Task) (*types.AttachDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AttachDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AttachDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachDisk_Task indicates an expected call of AttachDisk_Task
func (mr *MockContextMockRecorder) AttachDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachDisk_Task", reflect.TypeOf((*MockContext)(nil).AttachDisk_Task), ctx, r, req)
}

// AttachScsiLun mocks base method
func (m *MockContext) AttachScsiLun(ctx context.Context, r soap.RoundTripper, req *types.AttachScsiLun) (*types.AttachScsiLunResponse, error) {
	ret := m.ctrl.Call(m, "AttachScsiLun", ctx, r, req)
	ret0, _ := ret[0].(*types.AttachScsiLunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachScsiLun indicates an expected call of AttachScsiLun
func (mr *MockContextMockRecorder) AttachScsiLun(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachScsiLun", reflect.TypeOf((*MockContext)(nil).AttachScsiLun), ctx, r, req)
}

// AttachScsiLunEx_Task mocks base method
func (m *MockContext) AttachScsiLunEx_Task(ctx context.Context, r soap.RoundTripper, req *types.AttachScsiLunEx_Task) (*types.AttachScsiLunEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "AttachScsiLunEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.AttachScsiLunEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachScsiLunEx_Task indicates an expected call of AttachScsiLunEx_Task
func (mr *MockContextMockRecorder) AttachScsiLunEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachScsiLunEx_Task", reflect.TypeOf((*MockContext)(nil).AttachScsiLunEx_Task), ctx, r, req)
}

// AttachTagToVStorageObject mocks base method
func (m *MockContext) AttachTagToVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.AttachTagToVStorageObject) (*types.AttachTagToVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "AttachTagToVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.AttachTagToVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachTagToVStorageObject indicates an expected call of AttachTagToVStorageObject
func (mr *MockContextMockRecorder) AttachTagToVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachTagToVStorageObject", reflect.TypeOf((*MockContext)(nil).AttachTagToVStorageObject), ctx, r, req)
}

// AttachVmfsExtent mocks base method
func (m *MockContext) AttachVmfsExtent(ctx context.Context, r soap.RoundTripper, req *types.AttachVmfsExtent) (*types.AttachVmfsExtentResponse, error) {
	ret := m.ctrl.Call(m, "AttachVmfsExtent", ctx, r, req)
	ret0, _ := ret[0].(*types.AttachVmfsExtentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVmfsExtent indicates an expected call of AttachVmfsExtent
func (mr *MockContextMockRecorder) AttachVmfsExtent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVmfsExtent", reflect.TypeOf((*MockContext)(nil).AttachVmfsExtent), ctx, r, req)
}

// AutoStartPowerOff mocks base method
func (m *MockContext) AutoStartPowerOff(ctx context.Context, r soap.RoundTripper, req *types.AutoStartPowerOff) (*types.AutoStartPowerOffResponse, error) {
	ret := m.ctrl.Call(m, "AutoStartPowerOff", ctx, r, req)
	ret0, _ := ret[0].(*types.AutoStartPowerOffResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoStartPowerOff indicates an expected call of AutoStartPowerOff
func (mr *MockContextMockRecorder) AutoStartPowerOff(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoStartPowerOff", reflect.TypeOf((*MockContext)(nil).AutoStartPowerOff), ctx, r, req)
}

// AutoStartPowerOn mocks base method
func (m *MockContext) AutoStartPowerOn(ctx context.Context, r soap.RoundTripper, req *types.AutoStartPowerOn) (*types.AutoStartPowerOnResponse, error) {
	ret := m.ctrl.Call(m, "AutoStartPowerOn", ctx, r, req)
	ret0, _ := ret[0].(*types.AutoStartPowerOnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoStartPowerOn indicates an expected call of AutoStartPowerOn
func (mr *MockContextMockRecorder) AutoStartPowerOn(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoStartPowerOn", reflect.TypeOf((*MockContext)(nil).AutoStartPowerOn), ctx, r, req)
}

// BackupFirmwareConfiguration mocks base method
func (m *MockContext) BackupFirmwareConfiguration(ctx context.Context, r soap.RoundTripper, req *types.BackupFirmwareConfiguration) (*types.BackupFirmwareConfigurationResponse, error) {
	ret := m.ctrl.Call(m, "BackupFirmwareConfiguration", ctx, r, req)
	ret0, _ := ret[0].(*types.BackupFirmwareConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackupFirmwareConfiguration indicates an expected call of BackupFirmwareConfiguration
func (mr *MockContextMockRecorder) BackupFirmwareConfiguration(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupFirmwareConfiguration", reflect.TypeOf((*MockContext)(nil).BackupFirmwareConfiguration), ctx, r, req)
}

// BindVnic mocks base method
func (m *MockContext) BindVnic(ctx context.Context, r soap.RoundTripper, req *types.BindVnic) (*types.BindVnicResponse, error) {
	ret := m.ctrl.Call(m, "BindVnic", ctx, r, req)
	ret0, _ := ret[0].(*types.BindVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BindVnic indicates an expected call of BindVnic
func (mr *MockContextMockRecorder) BindVnic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindVnic", reflect.TypeOf((*MockContext)(nil).BindVnic), ctx, r, req)
}

// BrowseDiagnosticLog mocks base method
func (m *MockContext) BrowseDiagnosticLog(ctx context.Context, r soap.RoundTripper, req *types.BrowseDiagnosticLog) (*types.BrowseDiagnosticLogResponse, error) {
	ret := m.ctrl.Call(m, "BrowseDiagnosticLog", ctx, r, req)
	ret0, _ := ret[0].(*types.BrowseDiagnosticLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseDiagnosticLog indicates an expected call of BrowseDiagnosticLog
func (mr *MockContextMockRecorder) BrowseDiagnosticLog(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseDiagnosticLog", reflect.TypeOf((*MockContext)(nil).BrowseDiagnosticLog), ctx, r, req)
}

// CanProvisionObjects mocks base method
func (m *MockContext) CanProvisionObjects(ctx context.Context, r soap.RoundTripper, req *types.CanProvisionObjects) (*types.CanProvisionObjectsResponse, error) {
	ret := m.ctrl.Call(m, "CanProvisionObjects", ctx, r, req)
	ret0, _ := ret[0].(*types.CanProvisionObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanProvisionObjects indicates an expected call of CanProvisionObjects
func (mr *MockContextMockRecorder) CanProvisionObjects(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanProvisionObjects", reflect.TypeOf((*MockContext)(nil).CanProvisionObjects), ctx, r, req)
}

// CancelRecommendation mocks base method
func (m *MockContext) CancelRecommendation(ctx context.Context, r soap.RoundTripper, req *types.CancelRecommendation) (*types.CancelRecommendationResponse, error) {
	ret := m.ctrl.Call(m, "CancelRecommendation", ctx, r, req)
	ret0, _ := ret[0].(*types.CancelRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRecommendation indicates an expected call of CancelRecommendation
func (mr *MockContextMockRecorder) CancelRecommendation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRecommendation", reflect.TypeOf((*MockContext)(nil).CancelRecommendation), ctx, r, req)
}

// CancelRetrievePropertiesEx mocks base method
func (m *MockContext) CancelRetrievePropertiesEx(ctx context.Context, r soap.RoundTripper, req *types.CancelRetrievePropertiesEx) (*types.CancelRetrievePropertiesExResponse, error) {
	ret := m.ctrl.Call(m, "CancelRetrievePropertiesEx", ctx, r, req)
	ret0, _ := ret[0].(*types.CancelRetrievePropertiesExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRetrievePropertiesEx indicates an expected call of CancelRetrievePropertiesEx
func (mr *MockContextMockRecorder) CancelRetrievePropertiesEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRetrievePropertiesEx", reflect.TypeOf((*MockContext)(nil).CancelRetrievePropertiesEx), ctx, r, req)
}

// CancelStorageDrsRecommendation mocks base method
func (m *MockContext) CancelStorageDrsRecommendation(ctx context.Context, r soap.RoundTripper, req *types.CancelStorageDrsRecommendation) (*types.CancelStorageDrsRecommendationResponse, error) {
	ret := m.ctrl.Call(m, "CancelStorageDrsRecommendation", ctx, r, req)
	ret0, _ := ret[0].(*types.CancelStorageDrsRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStorageDrsRecommendation indicates an expected call of CancelStorageDrsRecommendation
func (mr *MockContextMockRecorder) CancelStorageDrsRecommendation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStorageDrsRecommendation", reflect.TypeOf((*MockContext)(nil).CancelStorageDrsRecommendation), ctx, r, req)
}

// CancelTask mocks base method
func (m *MockContext) CancelTask(ctx context.Context, r soap.RoundTripper, req *types.CancelTask) (*types.CancelTaskResponse, error) {
	ret := m.ctrl.Call(m, "CancelTask", ctx, r, req)
	ret0, _ := ret[0].(*types.CancelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask
func (mr *MockContextMockRecorder) CancelTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockContext)(nil).CancelTask), ctx, r, req)
}

// CancelWaitForUpdates mocks base method
func (m *MockContext) CancelWaitForUpdates(ctx context.Context, r soap.RoundTripper, req *types.CancelWaitForUpdates) (*types.CancelWaitForUpdatesResponse, error) {
	ret := m.ctrl.Call(m, "CancelWaitForUpdates", ctx, r, req)
	ret0, _ := ret[0].(*types.CancelWaitForUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelWaitForUpdates indicates an expected call of CancelWaitForUpdates
func (mr *MockContextMockRecorder) CancelWaitForUpdates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelWaitForUpdates", reflect.TypeOf((*MockContext)(nil).CancelWaitForUpdates), ctx, r, req)
}

// CertMgrRefreshCACertificatesAndCRLs_Task mocks base method
func (m *MockContext) CertMgrRefreshCACertificatesAndCRLs_Task(ctx context.Context, r soap.RoundTripper, req *types.CertMgrRefreshCACertificatesAndCRLs_Task) (*types.CertMgrRefreshCACertificatesAndCRLs_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CertMgrRefreshCACertificatesAndCRLs_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CertMgrRefreshCACertificatesAndCRLs_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertMgrRefreshCACertificatesAndCRLs_Task indicates an expected call of CertMgrRefreshCACertificatesAndCRLs_Task
func (mr *MockContextMockRecorder) CertMgrRefreshCACertificatesAndCRLs_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertMgrRefreshCACertificatesAndCRLs_Task", reflect.TypeOf((*MockContext)(nil).CertMgrRefreshCACertificatesAndCRLs_Task), ctx, r, req)
}

// CertMgrRefreshCertificates_Task mocks base method
func (m *MockContext) CertMgrRefreshCertificates_Task(ctx context.Context, r soap.RoundTripper, req *types.CertMgrRefreshCertificates_Task) (*types.CertMgrRefreshCertificates_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CertMgrRefreshCertificates_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CertMgrRefreshCertificates_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertMgrRefreshCertificates_Task indicates an expected call of CertMgrRefreshCertificates_Task
func (mr *MockContextMockRecorder) CertMgrRefreshCertificates_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertMgrRefreshCertificates_Task", reflect.TypeOf((*MockContext)(nil).CertMgrRefreshCertificates_Task), ctx, r, req)
}

// CertMgrRevokeCertificates_Task mocks base method
func (m *MockContext) CertMgrRevokeCertificates_Task(ctx context.Context, r soap.RoundTripper, req *types.CertMgrRevokeCertificates_Task) (*types.CertMgrRevokeCertificates_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CertMgrRevokeCertificates_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CertMgrRevokeCertificates_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertMgrRevokeCertificates_Task indicates an expected call of CertMgrRevokeCertificates_Task
func (mr *MockContextMockRecorder) CertMgrRevokeCertificates_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertMgrRevokeCertificates_Task", reflect.TypeOf((*MockContext)(nil).CertMgrRevokeCertificates_Task), ctx, r, req)
}

// ChangeAccessMode mocks base method
func (m *MockContext) ChangeAccessMode(ctx context.Context, r soap.RoundTripper, req *types.ChangeAccessMode) (*types.ChangeAccessModeResponse, error) {
	ret := m.ctrl.Call(m, "ChangeAccessMode", ctx, r, req)
	ret0, _ := ret[0].(*types.ChangeAccessModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeAccessMode indicates an expected call of ChangeAccessMode
func (mr *MockContextMockRecorder) ChangeAccessMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAccessMode", reflect.TypeOf((*MockContext)(nil).ChangeAccessMode), ctx, r, req)
}

// ChangeFileAttributesInGuest mocks base method
func (m *MockContext) ChangeFileAttributesInGuest(ctx context.Context, r soap.RoundTripper, req *types.ChangeFileAttributesInGuest) (*types.ChangeFileAttributesInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ChangeFileAttributesInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ChangeFileAttributesInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeFileAttributesInGuest indicates an expected call of ChangeFileAttributesInGuest
func (mr *MockContextMockRecorder) ChangeFileAttributesInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFileAttributesInGuest", reflect.TypeOf((*MockContext)(nil).ChangeFileAttributesInGuest), ctx, r, req)
}

// ChangeLockdownMode mocks base method
func (m *MockContext) ChangeLockdownMode(ctx context.Context, r soap.RoundTripper, req *types.ChangeLockdownMode) (*types.ChangeLockdownModeResponse, error) {
	ret := m.ctrl.Call(m, "ChangeLockdownMode", ctx, r, req)
	ret0, _ := ret[0].(*types.ChangeLockdownModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeLockdownMode indicates an expected call of ChangeLockdownMode
func (mr *MockContextMockRecorder) ChangeLockdownMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeLockdownMode", reflect.TypeOf((*MockContext)(nil).ChangeLockdownMode), ctx, r, req)
}

// ChangeNFSUserPassword mocks base method
func (m *MockContext) ChangeNFSUserPassword(ctx context.Context, r soap.RoundTripper, req *types.ChangeNFSUserPassword) (*types.ChangeNFSUserPasswordResponse, error) {
	ret := m.ctrl.Call(m, "ChangeNFSUserPassword", ctx, r, req)
	ret0, _ := ret[0].(*types.ChangeNFSUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeNFSUserPassword indicates an expected call of ChangeNFSUserPassword
func (mr *MockContextMockRecorder) ChangeNFSUserPassword(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeNFSUserPassword", reflect.TypeOf((*MockContext)(nil).ChangeNFSUserPassword), ctx, r, req)
}

// ChangeOwner mocks base method
func (m *MockContext) ChangeOwner(ctx context.Context, r soap.RoundTripper, req *types.ChangeOwner) (*types.ChangeOwnerResponse, error) {
	ret := m.ctrl.Call(m, "ChangeOwner", ctx, r, req)
	ret0, _ := ret[0].(*types.ChangeOwnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeOwner indicates an expected call of ChangeOwner
func (mr *MockContextMockRecorder) ChangeOwner(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOwner", reflect.TypeOf((*MockContext)(nil).ChangeOwner), ctx, r, req)
}

// CheckAddHostEvc_Task mocks base method
func (m *MockContext) CheckAddHostEvc_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckAddHostEvc_Task) (*types.CheckAddHostEvc_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckAddHostEvc_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckAddHostEvc_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAddHostEvc_Task indicates an expected call of CheckAddHostEvc_Task
func (mr *MockContextMockRecorder) CheckAddHostEvc_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAddHostEvc_Task", reflect.TypeOf((*MockContext)(nil).CheckAddHostEvc_Task), ctx, r, req)
}

// CheckAnswerFileStatus_Task mocks base method
func (m *MockContext) CheckAnswerFileStatus_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckAnswerFileStatus_Task) (*types.CheckAnswerFileStatus_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckAnswerFileStatus_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckAnswerFileStatus_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAnswerFileStatus_Task indicates an expected call of CheckAnswerFileStatus_Task
func (mr *MockContextMockRecorder) CheckAnswerFileStatus_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAnswerFileStatus_Task", reflect.TypeOf((*MockContext)(nil).CheckAnswerFileStatus_Task), ctx, r, req)
}

// CheckCompatibility_Task mocks base method
func (m *MockContext) CheckCompatibility_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckCompatibility_Task) (*types.CheckCompatibility_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckCompatibility_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckCompatibility_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCompatibility_Task indicates an expected call of CheckCompatibility_Task
func (mr *MockContextMockRecorder) CheckCompatibility_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCompatibility_Task", reflect.TypeOf((*MockContext)(nil).CheckCompatibility_Task), ctx, r, req)
}

// CheckCompliance_Task mocks base method
func (m *MockContext) CheckCompliance_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckCompliance_Task) (*types.CheckCompliance_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckCompliance_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckCompliance_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCompliance_Task indicates an expected call of CheckCompliance_Task
func (mr *MockContextMockRecorder) CheckCompliance_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCompliance_Task", reflect.TypeOf((*MockContext)(nil).CheckCompliance_Task), ctx, r, req)
}

// CheckConfigureEvcMode_Task mocks base method
func (m *MockContext) CheckConfigureEvcMode_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckConfigureEvcMode_Task) (*types.CheckConfigureEvcMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckConfigureEvcMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckConfigureEvcMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConfigureEvcMode_Task indicates an expected call of CheckConfigureEvcMode_Task
func (mr *MockContextMockRecorder) CheckConfigureEvcMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConfigureEvcMode_Task", reflect.TypeOf((*MockContext)(nil).CheckConfigureEvcMode_Task), ctx, r, req)
}

// CheckCustomizationResources mocks base method
func (m *MockContext) CheckCustomizationResources(ctx context.Context, r soap.RoundTripper, req *types.CheckCustomizationResources) (*types.CheckCustomizationResourcesResponse, error) {
	ret := m.ctrl.Call(m, "CheckCustomizationResources", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckCustomizationResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCustomizationResources indicates an expected call of CheckCustomizationResources
func (mr *MockContextMockRecorder) CheckCustomizationResources(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCustomizationResources", reflect.TypeOf((*MockContext)(nil).CheckCustomizationResources), ctx, r, req)
}

// CheckCustomizationSpec mocks base method
func (m *MockContext) CheckCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.CheckCustomizationSpec) (*types.CheckCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "CheckCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCustomizationSpec indicates an expected call of CheckCustomizationSpec
func (mr *MockContextMockRecorder) CheckCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCustomizationSpec", reflect.TypeOf((*MockContext)(nil).CheckCustomizationSpec), ctx, r, req)
}

// CheckForUpdates mocks base method
func (m *MockContext) CheckForUpdates(ctx context.Context, r soap.RoundTripper, req *types.CheckForUpdates) (*types.CheckForUpdatesResponse, error) {
	ret := m.ctrl.Call(m, "CheckForUpdates", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckForUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForUpdates indicates an expected call of CheckForUpdates
func (mr *MockContextMockRecorder) CheckForUpdates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForUpdates", reflect.TypeOf((*MockContext)(nil).CheckForUpdates), ctx, r, req)
}

// CheckHostPatch_Task mocks base method
func (m *MockContext) CheckHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckHostPatch_Task) (*types.CheckHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHostPatch_Task indicates an expected call of CheckHostPatch_Task
func (mr *MockContextMockRecorder) CheckHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHostPatch_Task", reflect.TypeOf((*MockContext)(nil).CheckHostPatch_Task), ctx, r, req)
}

// CheckLicenseFeature mocks base method
func (m *MockContext) CheckLicenseFeature(ctx context.Context, r soap.RoundTripper, req *types.CheckLicenseFeature) (*types.CheckLicenseFeatureResponse, error) {
	ret := m.ctrl.Call(m, "CheckLicenseFeature", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckLicenseFeatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLicenseFeature indicates an expected call of CheckLicenseFeature
func (mr *MockContextMockRecorder) CheckLicenseFeature(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLicenseFeature", reflect.TypeOf((*MockContext)(nil).CheckLicenseFeature), ctx, r, req)
}

// CheckMigrate_Task mocks base method
func (m *MockContext) CheckMigrate_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckMigrate_Task) (*types.CheckMigrate_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckMigrate_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckMigrate_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckMigrate_Task indicates an expected call of CheckMigrate_Task
func (mr *MockContextMockRecorder) CheckMigrate_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckMigrate_Task", reflect.TypeOf((*MockContext)(nil).CheckMigrate_Task), ctx, r, req)
}

// CheckProfileCompliance_Task mocks base method
func (m *MockContext) CheckProfileCompliance_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckProfileCompliance_Task) (*types.CheckProfileCompliance_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckProfileCompliance_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckProfileCompliance_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileCompliance_Task indicates an expected call of CheckProfileCompliance_Task
func (mr *MockContextMockRecorder) CheckProfileCompliance_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileCompliance_Task", reflect.TypeOf((*MockContext)(nil).CheckProfileCompliance_Task), ctx, r, req)
}

// CheckRelocate_Task mocks base method
func (m *MockContext) CheckRelocate_Task(ctx context.Context, r soap.RoundTripper, req *types.CheckRelocate_Task) (*types.CheckRelocate_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CheckRelocate_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CheckRelocate_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRelocate_Task indicates an expected call of CheckRelocate_Task
func (mr *MockContextMockRecorder) CheckRelocate_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRelocate_Task", reflect.TypeOf((*MockContext)(nil).CheckRelocate_Task), ctx, r, req)
}

// ClearComplianceStatus mocks base method
func (m *MockContext) ClearComplianceStatus(ctx context.Context, r soap.RoundTripper, req *types.ClearComplianceStatus) (*types.ClearComplianceStatusResponse, error) {
	ret := m.ctrl.Call(m, "ClearComplianceStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.ClearComplianceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearComplianceStatus indicates an expected call of ClearComplianceStatus
func (mr *MockContextMockRecorder) ClearComplianceStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearComplianceStatus", reflect.TypeOf((*MockContext)(nil).ClearComplianceStatus), ctx, r, req)
}

// ClearNFSUser mocks base method
func (m *MockContext) ClearNFSUser(ctx context.Context, r soap.RoundTripper, req *types.ClearNFSUser) (*types.ClearNFSUserResponse, error) {
	ret := m.ctrl.Call(m, "ClearNFSUser", ctx, r, req)
	ret0, _ := ret[0].(*types.ClearNFSUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearNFSUser indicates an expected call of ClearNFSUser
func (mr *MockContextMockRecorder) ClearNFSUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearNFSUser", reflect.TypeOf((*MockContext)(nil).ClearNFSUser), ctx, r, req)
}

// ClearSystemEventLog mocks base method
func (m *MockContext) ClearSystemEventLog(ctx context.Context, r soap.RoundTripper, req *types.ClearSystemEventLog) (*types.ClearSystemEventLogResponse, error) {
	ret := m.ctrl.Call(m, "ClearSystemEventLog", ctx, r, req)
	ret0, _ := ret[0].(*types.ClearSystemEventLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearSystemEventLog indicates an expected call of ClearSystemEventLog
func (mr *MockContextMockRecorder) ClearSystemEventLog(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSystemEventLog", reflect.TypeOf((*MockContext)(nil).ClearSystemEventLog), ctx, r, req)
}

// CloneSession mocks base method
func (m *MockContext) CloneSession(ctx context.Context, r soap.RoundTripper, req *types.CloneSession) (*types.CloneSessionResponse, error) {
	ret := m.ctrl.Call(m, "CloneSession", ctx, r, req)
	ret0, _ := ret[0].(*types.CloneSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneSession indicates an expected call of CloneSession
func (mr *MockContextMockRecorder) CloneSession(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneSession", reflect.TypeOf((*MockContext)(nil).CloneSession), ctx, r, req)
}

// CloneVApp_Task mocks base method
func (m *MockContext) CloneVApp_Task(ctx context.Context, r soap.RoundTripper, req *types.CloneVApp_Task) (*types.CloneVApp_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CloneVApp_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CloneVApp_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVApp_Task indicates an expected call of CloneVApp_Task
func (mr *MockContextMockRecorder) CloneVApp_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVApp_Task", reflect.TypeOf((*MockContext)(nil).CloneVApp_Task), ctx, r, req)
}

// CloneVM_Task mocks base method
func (m *MockContext) CloneVM_Task(ctx context.Context, r soap.RoundTripper, req *types.CloneVM_Task) (*types.CloneVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CloneVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CloneVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVM_Task indicates an expected call of CloneVM_Task
func (mr *MockContextMockRecorder) CloneVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVM_Task", reflect.TypeOf((*MockContext)(nil).CloneVM_Task), ctx, r, req)
}

// CloneVStorageObject_Task mocks base method
func (m *MockContext) CloneVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.CloneVStorageObject_Task) (*types.CloneVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CloneVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CloneVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneVStorageObject_Task indicates an expected call of CloneVStorageObject_Task
func (mr *MockContextMockRecorder) CloneVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).CloneVStorageObject_Task), ctx, r, req)
}

// CloseInventoryViewFolder mocks base method
func (m *MockContext) CloseInventoryViewFolder(ctx context.Context, r soap.RoundTripper, req *types.CloseInventoryViewFolder) (*types.CloseInventoryViewFolderResponse, error) {
	ret := m.ctrl.Call(m, "CloseInventoryViewFolder", ctx, r, req)
	ret0, _ := ret[0].(*types.CloseInventoryViewFolderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseInventoryViewFolder indicates an expected call of CloseInventoryViewFolder
func (mr *MockContextMockRecorder) CloseInventoryViewFolder(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseInventoryViewFolder", reflect.TypeOf((*MockContext)(nil).CloseInventoryViewFolder), ctx, r, req)
}

// ClusterEnterMaintenanceMode mocks base method
func (m *MockContext) ClusterEnterMaintenanceMode(ctx context.Context, r soap.RoundTripper, req *types.ClusterEnterMaintenanceMode) (*types.ClusterEnterMaintenanceModeResponse, error) {
	ret := m.ctrl.Call(m, "ClusterEnterMaintenanceMode", ctx, r, req)
	ret0, _ := ret[0].(*types.ClusterEnterMaintenanceModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterEnterMaintenanceMode indicates an expected call of ClusterEnterMaintenanceMode
func (mr *MockContextMockRecorder) ClusterEnterMaintenanceMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterEnterMaintenanceMode", reflect.TypeOf((*MockContext)(nil).ClusterEnterMaintenanceMode), ctx, r, req)
}

// ComputeDiskPartitionInfo mocks base method
func (m *MockContext) ComputeDiskPartitionInfo(ctx context.Context, r soap.RoundTripper, req *types.ComputeDiskPartitionInfo) (*types.ComputeDiskPartitionInfoResponse, error) {
	ret := m.ctrl.Call(m, "ComputeDiskPartitionInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.ComputeDiskPartitionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeDiskPartitionInfo indicates an expected call of ComputeDiskPartitionInfo
func (mr *MockContextMockRecorder) ComputeDiskPartitionInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeDiskPartitionInfo", reflect.TypeOf((*MockContext)(nil).ComputeDiskPartitionInfo), ctx, r, req)
}

// ComputeDiskPartitionInfoForResize mocks base method
func (m *MockContext) ComputeDiskPartitionInfoForResize(ctx context.Context, r soap.RoundTripper, req *types.ComputeDiskPartitionInfoForResize) (*types.ComputeDiskPartitionInfoForResizeResponse, error) {
	ret := m.ctrl.Call(m, "ComputeDiskPartitionInfoForResize", ctx, r, req)
	ret0, _ := ret[0].(*types.ComputeDiskPartitionInfoForResizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeDiskPartitionInfoForResize indicates an expected call of ComputeDiskPartitionInfoForResize
func (mr *MockContextMockRecorder) ComputeDiskPartitionInfoForResize(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeDiskPartitionInfoForResize", reflect.TypeOf((*MockContext)(nil).ComputeDiskPartitionInfoForResize), ctx, r, req)
}

// ConfigureCryptoKey mocks base method
func (m *MockContext) ConfigureCryptoKey(ctx context.Context, r soap.RoundTripper, req *types.ConfigureCryptoKey) (*types.ConfigureCryptoKeyResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureCryptoKey", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureCryptoKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureCryptoKey indicates an expected call of ConfigureCryptoKey
func (mr *MockContextMockRecorder) ConfigureCryptoKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureCryptoKey", reflect.TypeOf((*MockContext)(nil).ConfigureCryptoKey), ctx, r, req)
}

// ConfigureDatastoreIORM_Task mocks base method
func (m *MockContext) ConfigureDatastoreIORM_Task(ctx context.Context, r soap.RoundTripper, req *types.ConfigureDatastoreIORM_Task) (*types.ConfigureDatastoreIORM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureDatastoreIORM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureDatastoreIORM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureDatastoreIORM_Task indicates an expected call of ConfigureDatastoreIORM_Task
func (mr *MockContextMockRecorder) ConfigureDatastoreIORM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDatastoreIORM_Task", reflect.TypeOf((*MockContext)(nil).ConfigureDatastoreIORM_Task), ctx, r, req)
}

// ConfigureDatastorePrincipal mocks base method
func (m *MockContext) ConfigureDatastorePrincipal(ctx context.Context, r soap.RoundTripper, req *types.ConfigureDatastorePrincipal) (*types.ConfigureDatastorePrincipalResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureDatastorePrincipal", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureDatastorePrincipalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureDatastorePrincipal indicates an expected call of ConfigureDatastorePrincipal
func (mr *MockContextMockRecorder) ConfigureDatastorePrincipal(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDatastorePrincipal", reflect.TypeOf((*MockContext)(nil).ConfigureDatastorePrincipal), ctx, r, req)
}

// ConfigureEvcMode_Task mocks base method
func (m *MockContext) ConfigureEvcMode_Task(ctx context.Context, r soap.RoundTripper, req *types.ConfigureEvcMode_Task) (*types.ConfigureEvcMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureEvcMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureEvcMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureEvcMode_Task indicates an expected call of ConfigureEvcMode_Task
func (mr *MockContextMockRecorder) ConfigureEvcMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureEvcMode_Task", reflect.TypeOf((*MockContext)(nil).ConfigureEvcMode_Task), ctx, r, req)
}

// ConfigureHostCache_Task mocks base method
func (m *MockContext) ConfigureHostCache_Task(ctx context.Context, r soap.RoundTripper, req *types.ConfigureHostCache_Task) (*types.ConfigureHostCache_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureHostCache_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureHostCache_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureHostCache_Task indicates an expected call of ConfigureHostCache_Task
func (mr *MockContextMockRecorder) ConfigureHostCache_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureHostCache_Task", reflect.TypeOf((*MockContext)(nil).ConfigureHostCache_Task), ctx, r, req)
}

// ConfigureLicenseSource mocks base method
func (m *MockContext) ConfigureLicenseSource(ctx context.Context, r soap.RoundTripper, req *types.ConfigureLicenseSource) (*types.ConfigureLicenseSourceResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureLicenseSource", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureLicenseSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureLicenseSource indicates an expected call of ConfigureLicenseSource
func (mr *MockContextMockRecorder) ConfigureLicenseSource(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLicenseSource", reflect.TypeOf((*MockContext)(nil).ConfigureLicenseSource), ctx, r, req)
}

// ConfigurePowerPolicy mocks base method
func (m *MockContext) ConfigurePowerPolicy(ctx context.Context, r soap.RoundTripper, req *types.ConfigurePowerPolicy) (*types.ConfigurePowerPolicyResponse, error) {
	ret := m.ctrl.Call(m, "ConfigurePowerPolicy", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigurePowerPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigurePowerPolicy indicates an expected call of ConfigurePowerPolicy
func (mr *MockContextMockRecorder) ConfigurePowerPolicy(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigurePowerPolicy", reflect.TypeOf((*MockContext)(nil).ConfigurePowerPolicy), ctx, r, req)
}

// ConfigureStorageDrsForPod_Task mocks base method
func (m *MockContext) ConfigureStorageDrsForPod_Task(ctx context.Context, r soap.RoundTripper, req *types.ConfigureStorageDrsForPod_Task) (*types.ConfigureStorageDrsForPod_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureStorageDrsForPod_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureStorageDrsForPod_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureStorageDrsForPod_Task indicates an expected call of ConfigureStorageDrsForPod_Task
func (mr *MockContextMockRecorder) ConfigureStorageDrsForPod_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureStorageDrsForPod_Task", reflect.TypeOf((*MockContext)(nil).ConfigureStorageDrsForPod_Task), ctx, r, req)
}

// ConfigureVFlashResourceEx_Task mocks base method
func (m *MockContext) ConfigureVFlashResourceEx_Task(ctx context.Context, r soap.RoundTripper, req *types.ConfigureVFlashResourceEx_Task) (*types.ConfigureVFlashResourceEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConfigureVFlashResourceEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConfigureVFlashResourceEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigureVFlashResourceEx_Task indicates an expected call of ConfigureVFlashResourceEx_Task
func (mr *MockContextMockRecorder) ConfigureVFlashResourceEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureVFlashResourceEx_Task", reflect.TypeOf((*MockContext)(nil).ConfigureVFlashResourceEx_Task), ctx, r, req)
}

// ConsolidateVMDisks_Task mocks base method
func (m *MockContext) ConsolidateVMDisks_Task(ctx context.Context, r soap.RoundTripper, req *types.ConsolidateVMDisks_Task) (*types.ConsolidateVMDisks_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ConsolidateVMDisks_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ConsolidateVMDisks_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsolidateVMDisks_Task indicates an expected call of ConsolidateVMDisks_Task
func (mr *MockContextMockRecorder) ConsolidateVMDisks_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsolidateVMDisks_Task", reflect.TypeOf((*MockContext)(nil).ConsolidateVMDisks_Task), ctx, r, req)
}

// ContinueRetrievePropertiesEx mocks base method
func (m *MockContext) ContinueRetrievePropertiesEx(ctx context.Context, r soap.RoundTripper, req *types.ContinueRetrievePropertiesEx) (*types.ContinueRetrievePropertiesExResponse, error) {
	ret := m.ctrl.Call(m, "ContinueRetrievePropertiesEx", ctx, r, req)
	ret0, _ := ret[0].(*types.ContinueRetrievePropertiesExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContinueRetrievePropertiesEx indicates an expected call of ContinueRetrievePropertiesEx
func (mr *MockContextMockRecorder) ContinueRetrievePropertiesEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContinueRetrievePropertiesEx", reflect.TypeOf((*MockContext)(nil).ContinueRetrievePropertiesEx), ctx, r, req)
}

// ConvertNamespacePathToUuidPath mocks base method
func (m *MockContext) ConvertNamespacePathToUuidPath(ctx context.Context, r soap.RoundTripper, req *types.ConvertNamespacePathToUuidPath) (*types.ConvertNamespacePathToUuidPathResponse, error) {
	ret := m.ctrl.Call(m, "ConvertNamespacePathToUuidPath", ctx, r, req)
	ret0, _ := ret[0].(*types.ConvertNamespacePathToUuidPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertNamespacePathToUuidPath indicates an expected call of ConvertNamespacePathToUuidPath
func (mr *MockContextMockRecorder) ConvertNamespacePathToUuidPath(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertNamespacePathToUuidPath", reflect.TypeOf((*MockContext)(nil).ConvertNamespacePathToUuidPath), ctx, r, req)
}

// CopyDatastoreFile_Task mocks base method
func (m *MockContext) CopyDatastoreFile_Task(ctx context.Context, r soap.RoundTripper, req *types.CopyDatastoreFile_Task) (*types.CopyDatastoreFile_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CopyDatastoreFile_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CopyDatastoreFile_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyDatastoreFile_Task indicates an expected call of CopyDatastoreFile_Task
func (mr *MockContextMockRecorder) CopyDatastoreFile_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDatastoreFile_Task", reflect.TypeOf((*MockContext)(nil).CopyDatastoreFile_Task), ctx, r, req)
}

// CopyVirtualDisk_Task mocks base method
func (m *MockContext) CopyVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.CopyVirtualDisk_Task) (*types.CopyVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CopyVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CopyVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyVirtualDisk_Task indicates an expected call of CopyVirtualDisk_Task
func (mr *MockContextMockRecorder) CopyVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).CopyVirtualDisk_Task), ctx, r, req)
}

// CreateAlarm mocks base method
func (m *MockContext) CreateAlarm(ctx context.Context, r soap.RoundTripper, req *types.CreateAlarm) (*types.CreateAlarmResponse, error) {
	ret := m.ctrl.Call(m, "CreateAlarm", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateAlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlarm indicates an expected call of CreateAlarm
func (mr *MockContextMockRecorder) CreateAlarm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlarm", reflect.TypeOf((*MockContext)(nil).CreateAlarm), ctx, r, req)
}

// CreateChildVM_Task mocks base method
func (m *MockContext) CreateChildVM_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateChildVM_Task) (*types.CreateChildVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateChildVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateChildVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildVM_Task indicates an expected call of CreateChildVM_Task
func (mr *MockContextMockRecorder) CreateChildVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildVM_Task", reflect.TypeOf((*MockContext)(nil).CreateChildVM_Task), ctx, r, req)
}

// CreateCluster mocks base method
func (m *MockContext) CreateCluster(ctx context.Context, r soap.RoundTripper, req *types.CreateCluster) (*types.CreateClusterResponse, error) {
	ret := m.ctrl.Call(m, "CreateCluster", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockContextMockRecorder) CreateCluster(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockContext)(nil).CreateCluster), ctx, r, req)
}

// CreateClusterEx mocks base method
func (m *MockContext) CreateClusterEx(ctx context.Context, r soap.RoundTripper, req *types.CreateClusterEx) (*types.CreateClusterExResponse, error) {
	ret := m.ctrl.Call(m, "CreateClusterEx", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateClusterExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterEx indicates an expected call of CreateClusterEx
func (mr *MockContextMockRecorder) CreateClusterEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterEx", reflect.TypeOf((*MockContext)(nil).CreateClusterEx), ctx, r, req)
}

// CreateCollectorForEvents mocks base method
func (m *MockContext) CreateCollectorForEvents(ctx context.Context, r soap.RoundTripper, req *types.CreateCollectorForEvents) (*types.CreateCollectorForEventsResponse, error) {
	ret := m.ctrl.Call(m, "CreateCollectorForEvents", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateCollectorForEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectorForEvents indicates an expected call of CreateCollectorForEvents
func (mr *MockContextMockRecorder) CreateCollectorForEvents(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectorForEvents", reflect.TypeOf((*MockContext)(nil).CreateCollectorForEvents), ctx, r, req)
}

// CreateCollectorForTasks mocks base method
func (m *MockContext) CreateCollectorForTasks(ctx context.Context, r soap.RoundTripper, req *types.CreateCollectorForTasks) (*types.CreateCollectorForTasksResponse, error) {
	ret := m.ctrl.Call(m, "CreateCollectorForTasks", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateCollectorForTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectorForTasks indicates an expected call of CreateCollectorForTasks
func (mr *MockContextMockRecorder) CreateCollectorForTasks(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectorForTasks", reflect.TypeOf((*MockContext)(nil).CreateCollectorForTasks), ctx, r, req)
}

// CreateContainerView mocks base method
func (m *MockContext) CreateContainerView(ctx context.Context, r soap.RoundTripper, req *types.CreateContainerView) (*types.CreateContainerViewResponse, error) {
	ret := m.ctrl.Call(m, "CreateContainerView", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateContainerViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerView indicates an expected call of CreateContainerView
func (mr *MockContextMockRecorder) CreateContainerView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerView", reflect.TypeOf((*MockContext)(nil).CreateContainerView), ctx, r, req)
}

// CreateCustomizationSpec mocks base method
func (m *MockContext) CreateCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.CreateCustomizationSpec) (*types.CreateCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "CreateCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomizationSpec indicates an expected call of CreateCustomizationSpec
func (mr *MockContextMockRecorder) CreateCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomizationSpec", reflect.TypeOf((*MockContext)(nil).CreateCustomizationSpec), ctx, r, req)
}

// CreateDVPortgroup_Task mocks base method
func (m *MockContext) CreateDVPortgroup_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateDVPortgroup_Task) (*types.CreateDVPortgroup_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateDVPortgroup_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDVPortgroup_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDVPortgroup_Task indicates an expected call of CreateDVPortgroup_Task
func (mr *MockContextMockRecorder) CreateDVPortgroup_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDVPortgroup_Task", reflect.TypeOf((*MockContext)(nil).CreateDVPortgroup_Task), ctx, r, req)
}

// CreateDVS_Task mocks base method
func (m *MockContext) CreateDVS_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateDVS_Task) (*types.CreateDVS_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateDVS_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDVS_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDVS_Task indicates an expected call of CreateDVS_Task
func (mr *MockContextMockRecorder) CreateDVS_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDVS_Task", reflect.TypeOf((*MockContext)(nil).CreateDVS_Task), ctx, r, req)
}

// CreateDatacenter mocks base method
func (m *MockContext) CreateDatacenter(ctx context.Context, r soap.RoundTripper, req *types.CreateDatacenter) (*types.CreateDatacenterResponse, error) {
	ret := m.ctrl.Call(m, "CreateDatacenter", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDatacenterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatacenter indicates an expected call of CreateDatacenter
func (mr *MockContextMockRecorder) CreateDatacenter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatacenter", reflect.TypeOf((*MockContext)(nil).CreateDatacenter), ctx, r, req)
}

// CreateDefaultProfile mocks base method
func (m *MockContext) CreateDefaultProfile(ctx context.Context, r soap.RoundTripper, req *types.CreateDefaultProfile) (*types.CreateDefaultProfileResponse, error) {
	ret := m.ctrl.Call(m, "CreateDefaultProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDefaultProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultProfile indicates an expected call of CreateDefaultProfile
func (mr *MockContextMockRecorder) CreateDefaultProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultProfile", reflect.TypeOf((*MockContext)(nil).CreateDefaultProfile), ctx, r, req)
}

// CreateDescriptor mocks base method
func (m *MockContext) CreateDescriptor(ctx context.Context, r soap.RoundTripper, req *types.CreateDescriptor) (*types.CreateDescriptorResponse, error) {
	ret := m.ctrl.Call(m, "CreateDescriptor", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDescriptorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDescriptor indicates an expected call of CreateDescriptor
func (mr *MockContextMockRecorder) CreateDescriptor(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDescriptor", reflect.TypeOf((*MockContext)(nil).CreateDescriptor), ctx, r, req)
}

// CreateDiagnosticPartition mocks base method
func (m *MockContext) CreateDiagnosticPartition(ctx context.Context, r soap.RoundTripper, req *types.CreateDiagnosticPartition) (*types.CreateDiagnosticPartitionResponse, error) {
	ret := m.ctrl.Call(m, "CreateDiagnosticPartition", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDiagnosticPartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiagnosticPartition indicates an expected call of CreateDiagnosticPartition
func (mr *MockContextMockRecorder) CreateDiagnosticPartition(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiagnosticPartition", reflect.TypeOf((*MockContext)(nil).CreateDiagnosticPartition), ctx, r, req)
}

// CreateDirectory mocks base method
func (m *MockContext) CreateDirectory(ctx context.Context, r soap.RoundTripper, req *types.CreateDirectory) (*types.CreateDirectoryResponse, error) {
	ret := m.ctrl.Call(m, "CreateDirectory", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDirectoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDirectory indicates an expected call of CreateDirectory
func (mr *MockContextMockRecorder) CreateDirectory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDirectory", reflect.TypeOf((*MockContext)(nil).CreateDirectory), ctx, r, req)
}

// CreateDisk_Task mocks base method
func (m *MockContext) CreateDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateDisk_Task) (*types.CreateDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisk_Task indicates an expected call of CreateDisk_Task
func (mr *MockContextMockRecorder) CreateDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisk_Task", reflect.TypeOf((*MockContext)(nil).CreateDisk_Task), ctx, r, req)
}

// CreateFilter mocks base method
func (m *MockContext) CreateFilter(ctx context.Context, r soap.RoundTripper, req *types.CreateFilter) (*types.CreateFilterResponse, error) {
	ret := m.ctrl.Call(m, "CreateFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilter indicates an expected call of CreateFilter
func (mr *MockContextMockRecorder) CreateFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilter", reflect.TypeOf((*MockContext)(nil).CreateFilter), ctx, r, req)
}

// CreateFolder mocks base method
func (m *MockContext) CreateFolder(ctx context.Context, r soap.RoundTripper, req *types.CreateFolder) (*types.CreateFolderResponse, error) {
	ret := m.ctrl.Call(m, "CreateFolder", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateFolderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockContextMockRecorder) CreateFolder(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockContext)(nil).CreateFolder), ctx, r, req)
}

// CreateGroup mocks base method
func (m *MockContext) CreateGroup(ctx context.Context, r soap.RoundTripper, req *types.CreateGroup) (*types.CreateGroupResponse, error) {
	ret := m.ctrl.Call(m, "CreateGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockContextMockRecorder) CreateGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockContext)(nil).CreateGroup), ctx, r, req)
}

// CreateImportSpec mocks base method
func (m *MockContext) CreateImportSpec(ctx context.Context, r soap.RoundTripper, req *types.CreateImportSpec) (*types.CreateImportSpecResponse, error) {
	ret := m.ctrl.Call(m, "CreateImportSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateImportSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImportSpec indicates an expected call of CreateImportSpec
func (mr *MockContextMockRecorder) CreateImportSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImportSpec", reflect.TypeOf((*MockContext)(nil).CreateImportSpec), ctx, r, req)
}

// CreateInventoryView mocks base method
func (m *MockContext) CreateInventoryView(ctx context.Context, r soap.RoundTripper, req *types.CreateInventoryView) (*types.CreateInventoryViewResponse, error) {
	ret := m.ctrl.Call(m, "CreateInventoryView", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateInventoryViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInventoryView indicates an expected call of CreateInventoryView
func (mr *MockContextMockRecorder) CreateInventoryView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInventoryView", reflect.TypeOf((*MockContext)(nil).CreateInventoryView), ctx, r, req)
}

// CreateIpPool mocks base method
func (m *MockContext) CreateIpPool(ctx context.Context, r soap.RoundTripper, req *types.CreateIpPool) (*types.CreateIpPoolResponse, error) {
	ret := m.ctrl.Call(m, "CreateIpPool", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateIpPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIpPool indicates an expected call of CreateIpPool
func (mr *MockContextMockRecorder) CreateIpPool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIpPool", reflect.TypeOf((*MockContext)(nil).CreateIpPool), ctx, r, req)
}

// CreateListView mocks base method
func (m *MockContext) CreateListView(ctx context.Context, r soap.RoundTripper, req *types.CreateListView) (*types.CreateListViewResponse, error) {
	ret := m.ctrl.Call(m, "CreateListView", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateListViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListView indicates an expected call of CreateListView
func (mr *MockContextMockRecorder) CreateListView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListView", reflect.TypeOf((*MockContext)(nil).CreateListView), ctx, r, req)
}

// CreateListViewFromView mocks base method
func (m *MockContext) CreateListViewFromView(ctx context.Context, r soap.RoundTripper, req *types.CreateListViewFromView) (*types.CreateListViewFromViewResponse, error) {
	ret := m.ctrl.Call(m, "CreateListViewFromView", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateListViewFromViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListViewFromView indicates an expected call of CreateListViewFromView
func (mr *MockContextMockRecorder) CreateListViewFromView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListViewFromView", reflect.TypeOf((*MockContext)(nil).CreateListViewFromView), ctx, r, req)
}

// CreateLocalDatastore mocks base method
func (m *MockContext) CreateLocalDatastore(ctx context.Context, r soap.RoundTripper, req *types.CreateLocalDatastore) (*types.CreateLocalDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "CreateLocalDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateLocalDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocalDatastore indicates an expected call of CreateLocalDatastore
func (mr *MockContextMockRecorder) CreateLocalDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocalDatastore", reflect.TypeOf((*MockContext)(nil).CreateLocalDatastore), ctx, r, req)
}

// CreateNasDatastore mocks base method
func (m *MockContext) CreateNasDatastore(ctx context.Context, r soap.RoundTripper, req *types.CreateNasDatastore) (*types.CreateNasDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "CreateNasDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateNasDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNasDatastore indicates an expected call of CreateNasDatastore
func (mr *MockContextMockRecorder) CreateNasDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNasDatastore", reflect.TypeOf((*MockContext)(nil).CreateNasDatastore), ctx, r, req)
}

// CreateObjectScheduledTask mocks base method
func (m *MockContext) CreateObjectScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.CreateObjectScheduledTask) (*types.CreateObjectScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateObjectScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateObjectScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObjectScheduledTask indicates an expected call of CreateObjectScheduledTask
func (mr *MockContextMockRecorder) CreateObjectScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObjectScheduledTask", reflect.TypeOf((*MockContext)(nil).CreateObjectScheduledTask), ctx, r, req)
}

// CreatePerfInterval mocks base method
func (m *MockContext) CreatePerfInterval(ctx context.Context, r soap.RoundTripper, req *types.CreatePerfInterval) (*types.CreatePerfIntervalResponse, error) {
	ret := m.ctrl.Call(m, "CreatePerfInterval", ctx, r, req)
	ret0, _ := ret[0].(*types.CreatePerfIntervalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerfInterval indicates an expected call of CreatePerfInterval
func (mr *MockContextMockRecorder) CreatePerfInterval(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerfInterval", reflect.TypeOf((*MockContext)(nil).CreatePerfInterval), ctx, r, req)
}

// CreateProfile mocks base method
func (m *MockContext) CreateProfile(ctx context.Context, r soap.RoundTripper, req *types.CreateProfile) (*types.CreateProfileResponse, error) {
	ret := m.ctrl.Call(m, "CreateProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile
func (mr *MockContextMockRecorder) CreateProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockContext)(nil).CreateProfile), ctx, r, req)
}

// CreatePropertyCollector mocks base method
func (m *MockContext) CreatePropertyCollector(ctx context.Context, r soap.RoundTripper, req *types.CreatePropertyCollector) (*types.CreatePropertyCollectorResponse, error) {
	ret := m.ctrl.Call(m, "CreatePropertyCollector", ctx, r, req)
	ret0, _ := ret[0].(*types.CreatePropertyCollectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertyCollector indicates an expected call of CreatePropertyCollector
func (mr *MockContextMockRecorder) CreatePropertyCollector(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyCollector", reflect.TypeOf((*MockContext)(nil).CreatePropertyCollector), ctx, r, req)
}

// CreateRegistryKeyInGuest mocks base method
func (m *MockContext) CreateRegistryKeyInGuest(ctx context.Context, r soap.RoundTripper, req *types.CreateRegistryKeyInGuest) (*types.CreateRegistryKeyInGuestResponse, error) {
	ret := m.ctrl.Call(m, "CreateRegistryKeyInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateRegistryKeyInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistryKeyInGuest indicates an expected call of CreateRegistryKeyInGuest
func (mr *MockContextMockRecorder) CreateRegistryKeyInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistryKeyInGuest", reflect.TypeOf((*MockContext)(nil).CreateRegistryKeyInGuest), ctx, r, req)
}

// CreateResourcePool mocks base method
func (m *MockContext) CreateResourcePool(ctx context.Context, r soap.RoundTripper, req *types.CreateResourcePool) (*types.CreateResourcePoolResponse, error) {
	ret := m.ctrl.Call(m, "CreateResourcePool", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateResourcePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePool indicates an expected call of CreateResourcePool
func (mr *MockContextMockRecorder) CreateResourcePool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePool", reflect.TypeOf((*MockContext)(nil).CreateResourcePool), ctx, r, req)
}

// CreateScheduledTask mocks base method
func (m *MockContext) CreateScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.CreateScheduledTask) (*types.CreateScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduledTask indicates an expected call of CreateScheduledTask
func (mr *MockContextMockRecorder) CreateScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduledTask", reflect.TypeOf((*MockContext)(nil).CreateScheduledTask), ctx, r, req)
}

// CreateScreenshot_Task mocks base method
func (m *MockContext) CreateScreenshot_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateScreenshot_Task) (*types.CreateScreenshot_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateScreenshot_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateScreenshot_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScreenshot_Task indicates an expected call of CreateScreenshot_Task
func (mr *MockContextMockRecorder) CreateScreenshot_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScreenshot_Task", reflect.TypeOf((*MockContext)(nil).CreateScreenshot_Task), ctx, r, req)
}

// CreateSecondaryVMEx_Task mocks base method
func (m *MockContext) CreateSecondaryVMEx_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateSecondaryVMEx_Task) (*types.CreateSecondaryVMEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateSecondaryVMEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateSecondaryVMEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecondaryVMEx_Task indicates an expected call of CreateSecondaryVMEx_Task
func (mr *MockContextMockRecorder) CreateSecondaryVMEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecondaryVMEx_Task", reflect.TypeOf((*MockContext)(nil).CreateSecondaryVMEx_Task), ctx, r, req)
}

// CreateSecondaryVM_Task mocks base method
func (m *MockContext) CreateSecondaryVM_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateSecondaryVM_Task) (*types.CreateSecondaryVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateSecondaryVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateSecondaryVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecondaryVM_Task indicates an expected call of CreateSecondaryVM_Task
func (mr *MockContextMockRecorder) CreateSecondaryVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecondaryVM_Task", reflect.TypeOf((*MockContext)(nil).CreateSecondaryVM_Task), ctx, r, req)
}

// CreateSnapshotEx_Task mocks base method
func (m *MockContext) CreateSnapshotEx_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateSnapshotEx_Task) (*types.CreateSnapshotEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateSnapshotEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateSnapshotEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotEx_Task indicates an expected call of CreateSnapshotEx_Task
func (mr *MockContextMockRecorder) CreateSnapshotEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotEx_Task", reflect.TypeOf((*MockContext)(nil).CreateSnapshotEx_Task), ctx, r, req)
}

// CreateSnapshot_Task mocks base method
func (m *MockContext) CreateSnapshot_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateSnapshot_Task) (*types.CreateSnapshot_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateSnapshot_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateSnapshot_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot_Task indicates an expected call of CreateSnapshot_Task
func (mr *MockContextMockRecorder) CreateSnapshot_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot_Task", reflect.TypeOf((*MockContext)(nil).CreateSnapshot_Task), ctx, r, req)
}

// CreateStoragePod mocks base method
func (m *MockContext) CreateStoragePod(ctx context.Context, r soap.RoundTripper, req *types.CreateStoragePod) (*types.CreateStoragePodResponse, error) {
	ret := m.ctrl.Call(m, "CreateStoragePod", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateStoragePodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePod indicates an expected call of CreateStoragePod
func (mr *MockContextMockRecorder) CreateStoragePod(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePod", reflect.TypeOf((*MockContext)(nil).CreateStoragePod), ctx, r, req)
}

// CreateTask mocks base method
func (m *MockContext) CreateTask(ctx context.Context, r soap.RoundTripper, req *types.CreateTask) (*types.CreateTaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateTask", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockContextMockRecorder) CreateTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockContext)(nil).CreateTask), ctx, r, req)
}

// CreateTemporaryDirectoryInGuest mocks base method
func (m *MockContext) CreateTemporaryDirectoryInGuest(ctx context.Context, r soap.RoundTripper, req *types.CreateTemporaryDirectoryInGuest) (*types.CreateTemporaryDirectoryInGuestResponse, error) {
	ret := m.ctrl.Call(m, "CreateTemporaryDirectoryInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateTemporaryDirectoryInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryDirectoryInGuest indicates an expected call of CreateTemporaryDirectoryInGuest
func (mr *MockContextMockRecorder) CreateTemporaryDirectoryInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryDirectoryInGuest", reflect.TypeOf((*MockContext)(nil).CreateTemporaryDirectoryInGuest), ctx, r, req)
}

// CreateTemporaryFileInGuest mocks base method
func (m *MockContext) CreateTemporaryFileInGuest(ctx context.Context, r soap.RoundTripper, req *types.CreateTemporaryFileInGuest) (*types.CreateTemporaryFileInGuestResponse, error) {
	ret := m.ctrl.Call(m, "CreateTemporaryFileInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateTemporaryFileInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporaryFileInGuest indicates an expected call of CreateTemporaryFileInGuest
func (mr *MockContextMockRecorder) CreateTemporaryFileInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporaryFileInGuest", reflect.TypeOf((*MockContext)(nil).CreateTemporaryFileInGuest), ctx, r, req)
}

// CreateUser mocks base method
func (m *MockContext) CreateUser(ctx context.Context, r soap.RoundTripper, req *types.CreateUser) (*types.CreateUserResponse, error) {
	ret := m.ctrl.Call(m, "CreateUser", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockContextMockRecorder) CreateUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockContext)(nil).CreateUser), ctx, r, req)
}

// CreateVApp mocks base method
func (m *MockContext) CreateVApp(ctx context.Context, r soap.RoundTripper, req *types.CreateVApp) (*types.CreateVAppResponse, error) {
	ret := m.ctrl.Call(m, "CreateVApp", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateVAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVApp indicates an expected call of CreateVApp
func (mr *MockContextMockRecorder) CreateVApp(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVApp", reflect.TypeOf((*MockContext)(nil).CreateVApp), ctx, r, req)
}

// CreateVM_Task mocks base method
func (m *MockContext) CreateVM_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateVM_Task) (*types.CreateVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM_Task indicates an expected call of CreateVM_Task
func (mr *MockContextMockRecorder) CreateVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM_Task", reflect.TypeOf((*MockContext)(nil).CreateVM_Task), ctx, r, req)
}

// CreateVirtualDisk_Task mocks base method
func (m *MockContext) CreateVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.CreateVirtualDisk_Task) (*types.CreateVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CreateVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualDisk_Task indicates an expected call of CreateVirtualDisk_Task
func (mr *MockContextMockRecorder) CreateVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).CreateVirtualDisk_Task), ctx, r, req)
}

// CreateVmfsDatastore mocks base method
func (m *MockContext) CreateVmfsDatastore(ctx context.Context, r soap.RoundTripper, req *types.CreateVmfsDatastore) (*types.CreateVmfsDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "CreateVmfsDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateVmfsDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVmfsDatastore indicates an expected call of CreateVmfsDatastore
func (mr *MockContextMockRecorder) CreateVmfsDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVmfsDatastore", reflect.TypeOf((*MockContext)(nil).CreateVmfsDatastore), ctx, r, req)
}

// CreateVvolDatastore mocks base method
func (m *MockContext) CreateVvolDatastore(ctx context.Context, r soap.RoundTripper, req *types.CreateVvolDatastore) (*types.CreateVvolDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "CreateVvolDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.CreateVvolDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVvolDatastore indicates an expected call of CreateVvolDatastore
func (mr *MockContextMockRecorder) CreateVvolDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVvolDatastore", reflect.TypeOf((*MockContext)(nil).CreateVvolDatastore), ctx, r, req)
}

// CurrentTime mocks base method
func (m *MockContext) CurrentTime(ctx context.Context, r soap.RoundTripper, req *types.CurrentTime) (*types.CurrentTimeResponse, error) {
	ret := m.ctrl.Call(m, "CurrentTime", ctx, r, req)
	ret0, _ := ret[0].(*types.CurrentTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentTime indicates an expected call of CurrentTime
func (mr *MockContextMockRecorder) CurrentTime(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTime", reflect.TypeOf((*MockContext)(nil).CurrentTime), ctx, r, req)
}

// CustomizationSpecItemToXml mocks base method
func (m *MockContext) CustomizationSpecItemToXml(ctx context.Context, r soap.RoundTripper, req *types.CustomizationSpecItemToXml) (*types.CustomizationSpecItemToXmlResponse, error) {
	ret := m.ctrl.Call(m, "CustomizationSpecItemToXml", ctx, r, req)
	ret0, _ := ret[0].(*types.CustomizationSpecItemToXmlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomizationSpecItemToXml indicates an expected call of CustomizationSpecItemToXml
func (mr *MockContextMockRecorder) CustomizationSpecItemToXml(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomizationSpecItemToXml", reflect.TypeOf((*MockContext)(nil).CustomizationSpecItemToXml), ctx, r, req)
}

// CustomizeVM_Task mocks base method
func (m *MockContext) CustomizeVM_Task(ctx context.Context, r soap.RoundTripper, req *types.CustomizeVM_Task) (*types.CustomizeVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "CustomizeVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.CustomizeVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomizeVM_Task indicates an expected call of CustomizeVM_Task
func (mr *MockContextMockRecorder) CustomizeVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomizeVM_Task", reflect.TypeOf((*MockContext)(nil).CustomizeVM_Task), ctx, r, req)
}

// DVPortgroupRollback_Task mocks base method
func (m *MockContext) DVPortgroupRollback_Task(ctx context.Context, r soap.RoundTripper, req *types.DVPortgroupRollback_Task) (*types.DVPortgroupRollback_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DVPortgroupRollback_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DVPortgroupRollback_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DVPortgroupRollback_Task indicates an expected call of DVPortgroupRollback_Task
func (mr *MockContextMockRecorder) DVPortgroupRollback_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DVPortgroupRollback_Task", reflect.TypeOf((*MockContext)(nil).DVPortgroupRollback_Task), ctx, r, req)
}

// DVSManagerExportEntity_Task mocks base method
func (m *MockContext) DVSManagerExportEntity_Task(ctx context.Context, r soap.RoundTripper, req *types.DVSManagerExportEntity_Task) (*types.DVSManagerExportEntity_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DVSManagerExportEntity_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DVSManagerExportEntity_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DVSManagerExportEntity_Task indicates an expected call of DVSManagerExportEntity_Task
func (mr *MockContextMockRecorder) DVSManagerExportEntity_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DVSManagerExportEntity_Task", reflect.TypeOf((*MockContext)(nil).DVSManagerExportEntity_Task), ctx, r, req)
}

// DVSManagerImportEntity_Task mocks base method
func (m *MockContext) DVSManagerImportEntity_Task(ctx context.Context, r soap.RoundTripper, req *types.DVSManagerImportEntity_Task) (*types.DVSManagerImportEntity_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DVSManagerImportEntity_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DVSManagerImportEntity_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DVSManagerImportEntity_Task indicates an expected call of DVSManagerImportEntity_Task
func (mr *MockContextMockRecorder) DVSManagerImportEntity_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DVSManagerImportEntity_Task", reflect.TypeOf((*MockContext)(nil).DVSManagerImportEntity_Task), ctx, r, req)
}

// DVSManagerLookupDvPortGroup mocks base method
func (m *MockContext) DVSManagerLookupDvPortGroup(ctx context.Context, r soap.RoundTripper, req *types.DVSManagerLookupDvPortGroup) (*types.DVSManagerLookupDvPortGroupResponse, error) {
	ret := m.ctrl.Call(m, "DVSManagerLookupDvPortGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.DVSManagerLookupDvPortGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DVSManagerLookupDvPortGroup indicates an expected call of DVSManagerLookupDvPortGroup
func (mr *MockContextMockRecorder) DVSManagerLookupDvPortGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DVSManagerLookupDvPortGroup", reflect.TypeOf((*MockContext)(nil).DVSManagerLookupDvPortGroup), ctx, r, req)
}

// DVSRollback_Task mocks base method
func (m *MockContext) DVSRollback_Task(ctx context.Context, r soap.RoundTripper, req *types.DVSRollback_Task) (*types.DVSRollback_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DVSRollback_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DVSRollback_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DVSRollback_Task indicates an expected call of DVSRollback_Task
func (mr *MockContextMockRecorder) DVSRollback_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DVSRollback_Task", reflect.TypeOf((*MockContext)(nil).DVSRollback_Task), ctx, r, req)
}

// DatastoreEnterMaintenanceMode mocks base method
func (m *MockContext) DatastoreEnterMaintenanceMode(ctx context.Context, r soap.RoundTripper, req *types.DatastoreEnterMaintenanceMode) (*types.DatastoreEnterMaintenanceModeResponse, error) {
	ret := m.ctrl.Call(m, "DatastoreEnterMaintenanceMode", ctx, r, req)
	ret0, _ := ret[0].(*types.DatastoreEnterMaintenanceModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatastoreEnterMaintenanceMode indicates an expected call of DatastoreEnterMaintenanceMode
func (mr *MockContextMockRecorder) DatastoreEnterMaintenanceMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatastoreEnterMaintenanceMode", reflect.TypeOf((*MockContext)(nil).DatastoreEnterMaintenanceMode), ctx, r, req)
}

// DatastoreExitMaintenanceMode_Task mocks base method
func (m *MockContext) DatastoreExitMaintenanceMode_Task(ctx context.Context, r soap.RoundTripper, req *types.DatastoreExitMaintenanceMode_Task) (*types.DatastoreExitMaintenanceMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DatastoreExitMaintenanceMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DatastoreExitMaintenanceMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DatastoreExitMaintenanceMode_Task indicates an expected call of DatastoreExitMaintenanceMode_Task
func (mr *MockContextMockRecorder) DatastoreExitMaintenanceMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatastoreExitMaintenanceMode_Task", reflect.TypeOf((*MockContext)(nil).DatastoreExitMaintenanceMode_Task), ctx, r, req)
}

// DecodeLicense mocks base method
func (m *MockContext) DecodeLicense(ctx context.Context, r soap.RoundTripper, req *types.DecodeLicense) (*types.DecodeLicenseResponse, error) {
	ret := m.ctrl.Call(m, "DecodeLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.DecodeLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeLicense indicates an expected call of DecodeLicense
func (mr *MockContextMockRecorder) DecodeLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeLicense", reflect.TypeOf((*MockContext)(nil).DecodeLicense), ctx, r, req)
}

// DefragmentAllDisks mocks base method
func (m *MockContext) DefragmentAllDisks(ctx context.Context, r soap.RoundTripper, req *types.DefragmentAllDisks) (*types.DefragmentAllDisksResponse, error) {
	ret := m.ctrl.Call(m, "DefragmentAllDisks", ctx, r, req)
	ret0, _ := ret[0].(*types.DefragmentAllDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefragmentAllDisks indicates an expected call of DefragmentAllDisks
func (mr *MockContextMockRecorder) DefragmentAllDisks(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefragmentAllDisks", reflect.TypeOf((*MockContext)(nil).DefragmentAllDisks), ctx, r, req)
}

// DefragmentVirtualDisk_Task mocks base method
func (m *MockContext) DefragmentVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.DefragmentVirtualDisk_Task) (*types.DefragmentVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DefragmentVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DefragmentVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefragmentVirtualDisk_Task indicates an expected call of DefragmentVirtualDisk_Task
func (mr *MockContextMockRecorder) DefragmentVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefragmentVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).DefragmentVirtualDisk_Task), ctx, r, req)
}

// DeleteCustomizationSpec mocks base method
func (m *MockContext) DeleteCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.DeleteCustomizationSpec) (*types.DeleteCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "DeleteCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomizationSpec indicates an expected call of DeleteCustomizationSpec
func (mr *MockContextMockRecorder) DeleteCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomizationSpec", reflect.TypeOf((*MockContext)(nil).DeleteCustomizationSpec), ctx, r, req)
}

// DeleteDatastoreFile_Task mocks base method
func (m *MockContext) DeleteDatastoreFile_Task(ctx context.Context, r soap.RoundTripper, req *types.DeleteDatastoreFile_Task) (*types.DeleteDatastoreFile_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DeleteDatastoreFile_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteDatastoreFile_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatastoreFile_Task indicates an expected call of DeleteDatastoreFile_Task
func (mr *MockContextMockRecorder) DeleteDatastoreFile_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatastoreFile_Task", reflect.TypeOf((*MockContext)(nil).DeleteDatastoreFile_Task), ctx, r, req)
}

// DeleteDirectory mocks base method
func (m *MockContext) DeleteDirectory(ctx context.Context, r soap.RoundTripper, req *types.DeleteDirectory) (*types.DeleteDirectoryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteDirectory", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteDirectoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectory indicates an expected call of DeleteDirectory
func (mr *MockContextMockRecorder) DeleteDirectory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockContext)(nil).DeleteDirectory), ctx, r, req)
}

// DeleteDirectoryInGuest mocks base method
func (m *MockContext) DeleteDirectoryInGuest(ctx context.Context, r soap.RoundTripper, req *types.DeleteDirectoryInGuest) (*types.DeleteDirectoryInGuestResponse, error) {
	ret := m.ctrl.Call(m, "DeleteDirectoryInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteDirectoryInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDirectoryInGuest indicates an expected call of DeleteDirectoryInGuest
func (mr *MockContextMockRecorder) DeleteDirectoryInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectoryInGuest", reflect.TypeOf((*MockContext)(nil).DeleteDirectoryInGuest), ctx, r, req)
}

// DeleteFile mocks base method
func (m *MockContext) DeleteFile(ctx context.Context, r soap.RoundTripper, req *types.DeleteFile) (*types.DeleteFileResponse, error) {
	ret := m.ctrl.Call(m, "DeleteFile", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFile indicates an expected call of DeleteFile
func (mr *MockContextMockRecorder) DeleteFile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockContext)(nil).DeleteFile), ctx, r, req)
}

// DeleteFileInGuest mocks base method
func (m *MockContext) DeleteFileInGuest(ctx context.Context, r soap.RoundTripper, req *types.DeleteFileInGuest) (*types.DeleteFileInGuestResponse, error) {
	ret := m.ctrl.Call(m, "DeleteFileInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteFileInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFileInGuest indicates an expected call of DeleteFileInGuest
func (mr *MockContextMockRecorder) DeleteFileInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileInGuest", reflect.TypeOf((*MockContext)(nil).DeleteFileInGuest), ctx, r, req)
}

// DeleteHostSpecification mocks base method
func (m *MockContext) DeleteHostSpecification(ctx context.Context, r soap.RoundTripper, req *types.DeleteHostSpecification) (*types.DeleteHostSpecificationResponse, error) {
	ret := m.ctrl.Call(m, "DeleteHostSpecification", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteHostSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostSpecification indicates an expected call of DeleteHostSpecification
func (mr *MockContextMockRecorder) DeleteHostSpecification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostSpecification", reflect.TypeOf((*MockContext)(nil).DeleteHostSpecification), ctx, r, req)
}

// DeleteHostSubSpecification mocks base method
func (m *MockContext) DeleteHostSubSpecification(ctx context.Context, r soap.RoundTripper, req *types.DeleteHostSubSpecification) (*types.DeleteHostSubSpecificationResponse, error) {
	ret := m.ctrl.Call(m, "DeleteHostSubSpecification", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteHostSubSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHostSubSpecification indicates an expected call of DeleteHostSubSpecification
func (mr *MockContextMockRecorder) DeleteHostSubSpecification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHostSubSpecification", reflect.TypeOf((*MockContext)(nil).DeleteHostSubSpecification), ctx, r, req)
}

// DeleteRegistryKeyInGuest mocks base method
func (m *MockContext) DeleteRegistryKeyInGuest(ctx context.Context, r soap.RoundTripper, req *types.DeleteRegistryKeyInGuest) (*types.DeleteRegistryKeyInGuestResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistryKeyInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteRegistryKeyInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryKeyInGuest indicates an expected call of DeleteRegistryKeyInGuest
func (mr *MockContextMockRecorder) DeleteRegistryKeyInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryKeyInGuest", reflect.TypeOf((*MockContext)(nil).DeleteRegistryKeyInGuest), ctx, r, req)
}

// DeleteRegistryValueInGuest mocks base method
func (m *MockContext) DeleteRegistryValueInGuest(ctx context.Context, r soap.RoundTripper, req *types.DeleteRegistryValueInGuest) (*types.DeleteRegistryValueInGuestResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistryValueInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteRegistryValueInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryValueInGuest indicates an expected call of DeleteRegistryValueInGuest
func (mr *MockContextMockRecorder) DeleteRegistryValueInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryValueInGuest", reflect.TypeOf((*MockContext)(nil).DeleteRegistryValueInGuest), ctx, r, req)
}

// DeleteScsiLunState mocks base method
func (m *MockContext) DeleteScsiLunState(ctx context.Context, r soap.RoundTripper, req *types.DeleteScsiLunState) (*types.DeleteScsiLunStateResponse, error) {
	ret := m.ctrl.Call(m, "DeleteScsiLunState", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteScsiLunStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteScsiLunState indicates an expected call of DeleteScsiLunState
func (mr *MockContextMockRecorder) DeleteScsiLunState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScsiLunState", reflect.TypeOf((*MockContext)(nil).DeleteScsiLunState), ctx, r, req)
}

// DeleteVStorageObject_Task mocks base method
func (m *MockContext) DeleteVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.DeleteVStorageObject_Task) (*types.DeleteVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVStorageObject_Task indicates an expected call of DeleteVStorageObject_Task
func (mr *MockContextMockRecorder) DeleteVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).DeleteVStorageObject_Task), ctx, r, req)
}

// DeleteVffsVolumeState mocks base method
func (m *MockContext) DeleteVffsVolumeState(ctx context.Context, r soap.RoundTripper, req *types.DeleteVffsVolumeState) (*types.DeleteVffsVolumeStateResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVffsVolumeState", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteVffsVolumeStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVffsVolumeState indicates an expected call of DeleteVffsVolumeState
func (mr *MockContextMockRecorder) DeleteVffsVolumeState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVffsVolumeState", reflect.TypeOf((*MockContext)(nil).DeleteVffsVolumeState), ctx, r, req)
}

// DeleteVirtualDisk_Task mocks base method
func (m *MockContext) DeleteVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.DeleteVirtualDisk_Task) (*types.DeleteVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualDisk_Task indicates an expected call of DeleteVirtualDisk_Task
func (mr *MockContextMockRecorder) DeleteVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).DeleteVirtualDisk_Task), ctx, r, req)
}

// DeleteVmfsVolumeState mocks base method
func (m *MockContext) DeleteVmfsVolumeState(ctx context.Context, r soap.RoundTripper, req *types.DeleteVmfsVolumeState) (*types.DeleteVmfsVolumeStateResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVmfsVolumeState", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteVmfsVolumeStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVmfsVolumeState indicates an expected call of DeleteVmfsVolumeState
func (mr *MockContextMockRecorder) DeleteVmfsVolumeState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVmfsVolumeState", reflect.TypeOf((*MockContext)(nil).DeleteVmfsVolumeState), ctx, r, req)
}

// DeleteVsanObjects mocks base method
func (m *MockContext) DeleteVsanObjects(ctx context.Context, r soap.RoundTripper, req *types.DeleteVsanObjects) (*types.DeleteVsanObjectsResponse, error) {
	ret := m.ctrl.Call(m, "DeleteVsanObjects", ctx, r, req)
	ret0, _ := ret[0].(*types.DeleteVsanObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVsanObjects indicates an expected call of DeleteVsanObjects
func (mr *MockContextMockRecorder) DeleteVsanObjects(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVsanObjects", reflect.TypeOf((*MockContext)(nil).DeleteVsanObjects), ctx, r, req)
}

// DeselectVnic mocks base method
func (m *MockContext) DeselectVnic(ctx context.Context, r soap.RoundTripper, req *types.DeselectVnic) (*types.DeselectVnicResponse, error) {
	ret := m.ctrl.Call(m, "DeselectVnic", ctx, r, req)
	ret0, _ := ret[0].(*types.DeselectVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeselectVnic indicates an expected call of DeselectVnic
func (mr *MockContextMockRecorder) DeselectVnic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeselectVnic", reflect.TypeOf((*MockContext)(nil).DeselectVnic), ctx, r, req)
}

// DeselectVnicForNicType mocks base method
func (m *MockContext) DeselectVnicForNicType(ctx context.Context, r soap.RoundTripper, req *types.DeselectVnicForNicType) (*types.DeselectVnicForNicTypeResponse, error) {
	ret := m.ctrl.Call(m, "DeselectVnicForNicType", ctx, r, req)
	ret0, _ := ret[0].(*types.DeselectVnicForNicTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeselectVnicForNicType indicates an expected call of DeselectVnicForNicType
func (mr *MockContextMockRecorder) DeselectVnicForNicType(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeselectVnicForNicType", reflect.TypeOf((*MockContext)(nil).DeselectVnicForNicType), ctx, r, req)
}

// DestroyChildren mocks base method
func (m *MockContext) DestroyChildren(ctx context.Context, r soap.RoundTripper, req *types.DestroyChildren) (*types.DestroyChildrenResponse, error) {
	ret := m.ctrl.Call(m, "DestroyChildren", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyChildren indicates an expected call of DestroyChildren
func (mr *MockContextMockRecorder) DestroyChildren(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyChildren", reflect.TypeOf((*MockContext)(nil).DestroyChildren), ctx, r, req)
}

// DestroyCollector mocks base method
func (m *MockContext) DestroyCollector(ctx context.Context, r soap.RoundTripper, req *types.DestroyCollector) (*types.DestroyCollectorResponse, error) {
	ret := m.ctrl.Call(m, "DestroyCollector", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyCollectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyCollector indicates an expected call of DestroyCollector
func (mr *MockContextMockRecorder) DestroyCollector(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyCollector", reflect.TypeOf((*MockContext)(nil).DestroyCollector), ctx, r, req)
}

// DestroyDatastore mocks base method
func (m *MockContext) DestroyDatastore(ctx context.Context, r soap.RoundTripper, req *types.DestroyDatastore) (*types.DestroyDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "DestroyDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyDatastore indicates an expected call of DestroyDatastore
func (mr *MockContextMockRecorder) DestroyDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDatastore", reflect.TypeOf((*MockContext)(nil).DestroyDatastore), ctx, r, req)
}

// DestroyIpPool mocks base method
func (m *MockContext) DestroyIpPool(ctx context.Context, r soap.RoundTripper, req *types.DestroyIpPool) (*types.DestroyIpPoolResponse, error) {
	ret := m.ctrl.Call(m, "DestroyIpPool", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyIpPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyIpPool indicates an expected call of DestroyIpPool
func (mr *MockContextMockRecorder) DestroyIpPool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyIpPool", reflect.TypeOf((*MockContext)(nil).DestroyIpPool), ctx, r, req)
}

// DestroyNetwork mocks base method
func (m *MockContext) DestroyNetwork(ctx context.Context, r soap.RoundTripper, req *types.DestroyNetwork) (*types.DestroyNetworkResponse, error) {
	ret := m.ctrl.Call(m, "DestroyNetwork", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyNetworkResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyNetwork indicates an expected call of DestroyNetwork
func (mr *MockContextMockRecorder) DestroyNetwork(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyNetwork", reflect.TypeOf((*MockContext)(nil).DestroyNetwork), ctx, r, req)
}

// DestroyProfile mocks base method
func (m *MockContext) DestroyProfile(ctx context.Context, r soap.RoundTripper, req *types.DestroyProfile) (*types.DestroyProfileResponse, error) {
	ret := m.ctrl.Call(m, "DestroyProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyProfile indicates an expected call of DestroyProfile
func (mr *MockContextMockRecorder) DestroyProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyProfile", reflect.TypeOf((*MockContext)(nil).DestroyProfile), ctx, r, req)
}

// DestroyPropertyCollector mocks base method
func (m *MockContext) DestroyPropertyCollector(ctx context.Context, r soap.RoundTripper, req *types.DestroyPropertyCollector) (*types.DestroyPropertyCollectorResponse, error) {
	ret := m.ctrl.Call(m, "DestroyPropertyCollector", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyPropertyCollectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyPropertyCollector indicates an expected call of DestroyPropertyCollector
func (mr *MockContextMockRecorder) DestroyPropertyCollector(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyPropertyCollector", reflect.TypeOf((*MockContext)(nil).DestroyPropertyCollector), ctx, r, req)
}

// DestroyPropertyFilter mocks base method
func (m *MockContext) DestroyPropertyFilter(ctx context.Context, r soap.RoundTripper, req *types.DestroyPropertyFilter) (*types.DestroyPropertyFilterResponse, error) {
	ret := m.ctrl.Call(m, "DestroyPropertyFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyPropertyFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyPropertyFilter indicates an expected call of DestroyPropertyFilter
func (mr *MockContextMockRecorder) DestroyPropertyFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyPropertyFilter", reflect.TypeOf((*MockContext)(nil).DestroyPropertyFilter), ctx, r, req)
}

// DestroyVffs mocks base method
func (m *MockContext) DestroyVffs(ctx context.Context, r soap.RoundTripper, req *types.DestroyVffs) (*types.DestroyVffsResponse, error) {
	ret := m.ctrl.Call(m, "DestroyVffs", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyVffsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyVffs indicates an expected call of DestroyVffs
func (mr *MockContextMockRecorder) DestroyVffs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyVffs", reflect.TypeOf((*MockContext)(nil).DestroyVffs), ctx, r, req)
}

// DestroyView mocks base method
func (m *MockContext) DestroyView(ctx context.Context, r soap.RoundTripper, req *types.DestroyView) (*types.DestroyViewResponse, error) {
	ret := m.ctrl.Call(m, "DestroyView", ctx, r, req)
	ret0, _ := ret[0].(*types.DestroyViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyView indicates an expected call of DestroyView
func (mr *MockContextMockRecorder) DestroyView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyView", reflect.TypeOf((*MockContext)(nil).DestroyView), ctx, r, req)
}

// Destroy_Task mocks base method
func (m *MockContext) Destroy_Task(ctx context.Context, r soap.RoundTripper, req *types.Destroy_Task) (*types.Destroy_TaskResponse, error) {
	ret := m.ctrl.Call(m, "Destroy_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.Destroy_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy_Task indicates an expected call of Destroy_Task
func (mr *MockContextMockRecorder) Destroy_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy_Task", reflect.TypeOf((*MockContext)(nil).Destroy_Task), ctx, r, req)
}

// DetachDisk_Task mocks base method
func (m *MockContext) DetachDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.DetachDisk_Task) (*types.DetachDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DetachDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DetachDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachDisk_Task indicates an expected call of DetachDisk_Task
func (mr *MockContextMockRecorder) DetachDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachDisk_Task", reflect.TypeOf((*MockContext)(nil).DetachDisk_Task), ctx, r, req)
}

// DetachScsiLun mocks base method
func (m *MockContext) DetachScsiLun(ctx context.Context, r soap.RoundTripper, req *types.DetachScsiLun) (*types.DetachScsiLunResponse, error) {
	ret := m.ctrl.Call(m, "DetachScsiLun", ctx, r, req)
	ret0, _ := ret[0].(*types.DetachScsiLunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachScsiLun indicates an expected call of DetachScsiLun
func (mr *MockContextMockRecorder) DetachScsiLun(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachScsiLun", reflect.TypeOf((*MockContext)(nil).DetachScsiLun), ctx, r, req)
}

// DetachScsiLunEx_Task mocks base method
func (m *MockContext) DetachScsiLunEx_Task(ctx context.Context, r soap.RoundTripper, req *types.DetachScsiLunEx_Task) (*types.DetachScsiLunEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DetachScsiLunEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DetachScsiLunEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachScsiLunEx_Task indicates an expected call of DetachScsiLunEx_Task
func (mr *MockContextMockRecorder) DetachScsiLunEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachScsiLunEx_Task", reflect.TypeOf((*MockContext)(nil).DetachScsiLunEx_Task), ctx, r, req)
}

// DetachTagFromVStorageObject mocks base method
func (m *MockContext) DetachTagFromVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.DetachTagFromVStorageObject) (*types.DetachTagFromVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "DetachTagFromVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.DetachTagFromVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachTagFromVStorageObject indicates an expected call of DetachTagFromVStorageObject
func (mr *MockContextMockRecorder) DetachTagFromVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachTagFromVStorageObject", reflect.TypeOf((*MockContext)(nil).DetachTagFromVStorageObject), ctx, r, req)
}

// DisableEvcMode_Task mocks base method
func (m *MockContext) DisableEvcMode_Task(ctx context.Context, r soap.RoundTripper, req *types.DisableEvcMode_Task) (*types.DisableEvcMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DisableEvcMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableEvcMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableEvcMode_Task indicates an expected call of DisableEvcMode_Task
func (mr *MockContextMockRecorder) DisableEvcMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableEvcMode_Task", reflect.TypeOf((*MockContext)(nil).DisableEvcMode_Task), ctx, r, req)
}

// DisableFeature mocks base method
func (m *MockContext) DisableFeature(ctx context.Context, r soap.RoundTripper, req *types.DisableFeature) (*types.DisableFeatureResponse, error) {
	ret := m.ctrl.Call(m, "DisableFeature", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableFeatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableFeature indicates an expected call of DisableFeature
func (mr *MockContextMockRecorder) DisableFeature(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableFeature", reflect.TypeOf((*MockContext)(nil).DisableFeature), ctx, r, req)
}

// DisableHyperThreading mocks base method
func (m *MockContext) DisableHyperThreading(ctx context.Context, r soap.RoundTripper, req *types.DisableHyperThreading) (*types.DisableHyperThreadingResponse, error) {
	ret := m.ctrl.Call(m, "DisableHyperThreading", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableHyperThreadingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableHyperThreading indicates an expected call of DisableHyperThreading
func (mr *MockContextMockRecorder) DisableHyperThreading(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableHyperThreading", reflect.TypeOf((*MockContext)(nil).DisableHyperThreading), ctx, r, req)
}

// DisableMultipathPath mocks base method
func (m *MockContext) DisableMultipathPath(ctx context.Context, r soap.RoundTripper, req *types.DisableMultipathPath) (*types.DisableMultipathPathResponse, error) {
	ret := m.ctrl.Call(m, "DisableMultipathPath", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableMultipathPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableMultipathPath indicates an expected call of DisableMultipathPath
func (mr *MockContextMockRecorder) DisableMultipathPath(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableMultipathPath", reflect.TypeOf((*MockContext)(nil).DisableMultipathPath), ctx, r, req)
}

// DisableRuleset mocks base method
func (m *MockContext) DisableRuleset(ctx context.Context, r soap.RoundTripper, req *types.DisableRuleset) (*types.DisableRulesetResponse, error) {
	ret := m.ctrl.Call(m, "DisableRuleset", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableRulesetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableRuleset indicates an expected call of DisableRuleset
func (mr *MockContextMockRecorder) DisableRuleset(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableRuleset", reflect.TypeOf((*MockContext)(nil).DisableRuleset), ctx, r, req)
}

// DisableSecondaryVM_Task mocks base method
func (m *MockContext) DisableSecondaryVM_Task(ctx context.Context, r soap.RoundTripper, req *types.DisableSecondaryVM_Task) (*types.DisableSecondaryVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DisableSecondaryVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableSecondaryVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSecondaryVM_Task indicates an expected call of DisableSecondaryVM_Task
func (mr *MockContextMockRecorder) DisableSecondaryVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSecondaryVM_Task", reflect.TypeOf((*MockContext)(nil).DisableSecondaryVM_Task), ctx, r, req)
}

// DisableSmartCardAuthentication mocks base method
func (m *MockContext) DisableSmartCardAuthentication(ctx context.Context, r soap.RoundTripper, req *types.DisableSmartCardAuthentication) (*types.DisableSmartCardAuthenticationResponse, error) {
	ret := m.ctrl.Call(m, "DisableSmartCardAuthentication", ctx, r, req)
	ret0, _ := ret[0].(*types.DisableSmartCardAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableSmartCardAuthentication indicates an expected call of DisableSmartCardAuthentication
func (mr *MockContextMockRecorder) DisableSmartCardAuthentication(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSmartCardAuthentication", reflect.TypeOf((*MockContext)(nil).DisableSmartCardAuthentication), ctx, r, req)
}

// DisconnectHost_Task mocks base method
func (m *MockContext) DisconnectHost_Task(ctx context.Context, r soap.RoundTripper, req *types.DisconnectHost_Task) (*types.DisconnectHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DisconnectHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DisconnectHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisconnectHost_Task indicates an expected call of DisconnectHost_Task
func (mr *MockContextMockRecorder) DisconnectHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectHost_Task", reflect.TypeOf((*MockContext)(nil).DisconnectHost_Task), ctx, r, req)
}

// DiscoverFcoeHbas mocks base method
func (m *MockContext) DiscoverFcoeHbas(ctx context.Context, r soap.RoundTripper, req *types.DiscoverFcoeHbas) (*types.DiscoverFcoeHbasResponse, error) {
	ret := m.ctrl.Call(m, "DiscoverFcoeHbas", ctx, r, req)
	ret0, _ := ret[0].(*types.DiscoverFcoeHbasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverFcoeHbas indicates an expected call of DiscoverFcoeHbas
func (mr *MockContextMockRecorder) DiscoverFcoeHbas(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverFcoeHbas", reflect.TypeOf((*MockContext)(nil).DiscoverFcoeHbas), ctx, r, req)
}

// DissociateProfile mocks base method
func (m *MockContext) DissociateProfile(ctx context.Context, r soap.RoundTripper, req *types.DissociateProfile) (*types.DissociateProfileResponse, error) {
	ret := m.ctrl.Call(m, "DissociateProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.DissociateProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DissociateProfile indicates an expected call of DissociateProfile
func (mr *MockContextMockRecorder) DissociateProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateProfile", reflect.TypeOf((*MockContext)(nil).DissociateProfile), ctx, r, req)
}

// DoesCustomizationSpecExist mocks base method
func (m *MockContext) DoesCustomizationSpecExist(ctx context.Context, r soap.RoundTripper, req *types.DoesCustomizationSpecExist) (*types.DoesCustomizationSpecExistResponse, error) {
	ret := m.ctrl.Call(m, "DoesCustomizationSpecExist", ctx, r, req)
	ret0, _ := ret[0].(*types.DoesCustomizationSpecExistResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesCustomizationSpecExist indicates an expected call of DoesCustomizationSpecExist
func (mr *MockContextMockRecorder) DoesCustomizationSpecExist(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesCustomizationSpecExist", reflect.TypeOf((*MockContext)(nil).DoesCustomizationSpecExist), ctx, r, req)
}

// DuplicateCustomizationSpec mocks base method
func (m *MockContext) DuplicateCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.DuplicateCustomizationSpec) (*types.DuplicateCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "DuplicateCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.DuplicateCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateCustomizationSpec indicates an expected call of DuplicateCustomizationSpec
func (mr *MockContextMockRecorder) DuplicateCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateCustomizationSpec", reflect.TypeOf((*MockContext)(nil).DuplicateCustomizationSpec), ctx, r, req)
}

// DvsReconfigureVmVnicNetworkResourcePool_Task mocks base method
func (m *MockContext) DvsReconfigureVmVnicNetworkResourcePool_Task(ctx context.Context, r soap.RoundTripper, req *types.DvsReconfigureVmVnicNetworkResourcePool_Task) (*types.DvsReconfigureVmVnicNetworkResourcePool_TaskResponse, error) {
	ret := m.ctrl.Call(m, "DvsReconfigureVmVnicNetworkResourcePool_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.DvsReconfigureVmVnicNetworkResourcePool_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DvsReconfigureVmVnicNetworkResourcePool_Task indicates an expected call of DvsReconfigureVmVnicNetworkResourcePool_Task
func (mr *MockContextMockRecorder) DvsReconfigureVmVnicNetworkResourcePool_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DvsReconfigureVmVnicNetworkResourcePool_Task", reflect.TypeOf((*MockContext)(nil).DvsReconfigureVmVnicNetworkResourcePool_Task), ctx, r, req)
}

// EagerZeroVirtualDisk_Task mocks base method
func (m *MockContext) EagerZeroVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.EagerZeroVirtualDisk_Task) (*types.EagerZeroVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "EagerZeroVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.EagerZeroVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EagerZeroVirtualDisk_Task indicates an expected call of EagerZeroVirtualDisk_Task
func (mr *MockContextMockRecorder) EagerZeroVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EagerZeroVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).EagerZeroVirtualDisk_Task), ctx, r, req)
}

// EnableAlarmActions mocks base method
func (m *MockContext) EnableAlarmActions(ctx context.Context, r soap.RoundTripper, req *types.EnableAlarmActions) (*types.EnableAlarmActionsResponse, error) {
	ret := m.ctrl.Call(m, "EnableAlarmActions", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableAlarmActionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAlarmActions indicates an expected call of EnableAlarmActions
func (mr *MockContextMockRecorder) EnableAlarmActions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlarmActions", reflect.TypeOf((*MockContext)(nil).EnableAlarmActions), ctx, r, req)
}

// EnableCrypto mocks base method
func (m *MockContext) EnableCrypto(ctx context.Context, r soap.RoundTripper, req *types.EnableCrypto) (*types.EnableCryptoResponse, error) {
	ret := m.ctrl.Call(m, "EnableCrypto", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableCryptoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCrypto indicates an expected call of EnableCrypto
func (mr *MockContextMockRecorder) EnableCrypto(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCrypto", reflect.TypeOf((*MockContext)(nil).EnableCrypto), ctx, r, req)
}

// EnableFeature mocks base method
func (m *MockContext) EnableFeature(ctx context.Context, r soap.RoundTripper, req *types.EnableFeature) (*types.EnableFeatureResponse, error) {
	ret := m.ctrl.Call(m, "EnableFeature", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableFeatureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableFeature indicates an expected call of EnableFeature
func (mr *MockContextMockRecorder) EnableFeature(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableFeature", reflect.TypeOf((*MockContext)(nil).EnableFeature), ctx, r, req)
}

// EnableHyperThreading mocks base method
func (m *MockContext) EnableHyperThreading(ctx context.Context, r soap.RoundTripper, req *types.EnableHyperThreading) (*types.EnableHyperThreadingResponse, error) {
	ret := m.ctrl.Call(m, "EnableHyperThreading", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableHyperThreadingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableHyperThreading indicates an expected call of EnableHyperThreading
func (mr *MockContextMockRecorder) EnableHyperThreading(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableHyperThreading", reflect.TypeOf((*MockContext)(nil).EnableHyperThreading), ctx, r, req)
}

// EnableMultipathPath mocks base method
func (m *MockContext) EnableMultipathPath(ctx context.Context, r soap.RoundTripper, req *types.EnableMultipathPath) (*types.EnableMultipathPathResponse, error) {
	ret := m.ctrl.Call(m, "EnableMultipathPath", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableMultipathPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableMultipathPath indicates an expected call of EnableMultipathPath
func (mr *MockContextMockRecorder) EnableMultipathPath(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableMultipathPath", reflect.TypeOf((*MockContext)(nil).EnableMultipathPath), ctx, r, req)
}

// EnableNetworkResourceManagement mocks base method
func (m *MockContext) EnableNetworkResourceManagement(ctx context.Context, r soap.RoundTripper, req *types.EnableNetworkResourceManagement) (*types.EnableNetworkResourceManagementResponse, error) {
	ret := m.ctrl.Call(m, "EnableNetworkResourceManagement", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableNetworkResourceManagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableNetworkResourceManagement indicates an expected call of EnableNetworkResourceManagement
func (mr *MockContextMockRecorder) EnableNetworkResourceManagement(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableNetworkResourceManagement", reflect.TypeOf((*MockContext)(nil).EnableNetworkResourceManagement), ctx, r, req)
}

// EnableRuleset mocks base method
func (m *MockContext) EnableRuleset(ctx context.Context, r soap.RoundTripper, req *types.EnableRuleset) (*types.EnableRulesetResponse, error) {
	ret := m.ctrl.Call(m, "EnableRuleset", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableRulesetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRuleset indicates an expected call of EnableRuleset
func (mr *MockContextMockRecorder) EnableRuleset(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRuleset", reflect.TypeOf((*MockContext)(nil).EnableRuleset), ctx, r, req)
}

// EnableSecondaryVM_Task mocks base method
func (m *MockContext) EnableSecondaryVM_Task(ctx context.Context, r soap.RoundTripper, req *types.EnableSecondaryVM_Task) (*types.EnableSecondaryVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "EnableSecondaryVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableSecondaryVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSecondaryVM_Task indicates an expected call of EnableSecondaryVM_Task
func (mr *MockContextMockRecorder) EnableSecondaryVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSecondaryVM_Task", reflect.TypeOf((*MockContext)(nil).EnableSecondaryVM_Task), ctx, r, req)
}

// EnableSmartCardAuthentication mocks base method
func (m *MockContext) EnableSmartCardAuthentication(ctx context.Context, r soap.RoundTripper, req *types.EnableSmartCardAuthentication) (*types.EnableSmartCardAuthenticationResponse, error) {
	ret := m.ctrl.Call(m, "EnableSmartCardAuthentication", ctx, r, req)
	ret0, _ := ret[0].(*types.EnableSmartCardAuthenticationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableSmartCardAuthentication indicates an expected call of EnableSmartCardAuthentication
func (mr *MockContextMockRecorder) EnableSmartCardAuthentication(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSmartCardAuthentication", reflect.TypeOf((*MockContext)(nil).EnableSmartCardAuthentication), ctx, r, req)
}

// EnterLockdownMode mocks base method
func (m *MockContext) EnterLockdownMode(ctx context.Context, r soap.RoundTripper, req *types.EnterLockdownMode) (*types.EnterLockdownModeResponse, error) {
	ret := m.ctrl.Call(m, "EnterLockdownMode", ctx, r, req)
	ret0, _ := ret[0].(*types.EnterLockdownModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterLockdownMode indicates an expected call of EnterLockdownMode
func (mr *MockContextMockRecorder) EnterLockdownMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterLockdownMode", reflect.TypeOf((*MockContext)(nil).EnterLockdownMode), ctx, r, req)
}

// EnterMaintenanceMode_Task mocks base method
func (m *MockContext) EnterMaintenanceMode_Task(ctx context.Context, r soap.RoundTripper, req *types.EnterMaintenanceMode_Task) (*types.EnterMaintenanceMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "EnterMaintenanceMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.EnterMaintenanceMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterMaintenanceMode_Task indicates an expected call of EnterMaintenanceMode_Task
func (mr *MockContextMockRecorder) EnterMaintenanceMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterMaintenanceMode_Task", reflect.TypeOf((*MockContext)(nil).EnterMaintenanceMode_Task), ctx, r, req)
}

// EstimateDatabaseSize mocks base method
func (m *MockContext) EstimateDatabaseSize(ctx context.Context, r soap.RoundTripper, req *types.EstimateDatabaseSize) (*types.EstimateDatabaseSizeResponse, error) {
	ret := m.ctrl.Call(m, "EstimateDatabaseSize", ctx, r, req)
	ret0, _ := ret[0].(*types.EstimateDatabaseSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateDatabaseSize indicates an expected call of EstimateDatabaseSize
func (mr *MockContextMockRecorder) EstimateDatabaseSize(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateDatabaseSize", reflect.TypeOf((*MockContext)(nil).EstimateDatabaseSize), ctx, r, req)
}

// EstimateStorageForConsolidateSnapshots_Task mocks base method
func (m *MockContext) EstimateStorageForConsolidateSnapshots_Task(ctx context.Context, r soap.RoundTripper, req *types.EstimateStorageForConsolidateSnapshots_Task) (*types.EstimateStorageForConsolidateSnapshots_TaskResponse, error) {
	ret := m.ctrl.Call(m, "EstimateStorageForConsolidateSnapshots_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.EstimateStorageForConsolidateSnapshots_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateStorageForConsolidateSnapshots_Task indicates an expected call of EstimateStorageForConsolidateSnapshots_Task
func (mr *MockContextMockRecorder) EstimateStorageForConsolidateSnapshots_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateStorageForConsolidateSnapshots_Task", reflect.TypeOf((*MockContext)(nil).EstimateStorageForConsolidateSnapshots_Task), ctx, r, req)
}

// EsxAgentHostManagerUpdateConfig mocks base method
func (m *MockContext) EsxAgentHostManagerUpdateConfig(ctx context.Context, r soap.RoundTripper, req *types.EsxAgentHostManagerUpdateConfig) (*types.EsxAgentHostManagerUpdateConfigResponse, error) {
	ret := m.ctrl.Call(m, "EsxAgentHostManagerUpdateConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.EsxAgentHostManagerUpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EsxAgentHostManagerUpdateConfig indicates an expected call of EsxAgentHostManagerUpdateConfig
func (mr *MockContextMockRecorder) EsxAgentHostManagerUpdateConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EsxAgentHostManagerUpdateConfig", reflect.TypeOf((*MockContext)(nil).EsxAgentHostManagerUpdateConfig), ctx, r, req)
}

// EvacuateVsanNode_Task mocks base method
func (m *MockContext) EvacuateVsanNode_Task(ctx context.Context, r soap.RoundTripper, req *types.EvacuateVsanNode_Task) (*types.EvacuateVsanNode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "EvacuateVsanNode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.EvacuateVsanNode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvacuateVsanNode_Task indicates an expected call of EvacuateVsanNode_Task
func (mr *MockContextMockRecorder) EvacuateVsanNode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvacuateVsanNode_Task", reflect.TypeOf((*MockContext)(nil).EvacuateVsanNode_Task), ctx, r, req)
}

// EvcManager mocks base method
func (m *MockContext) EvcManager(ctx context.Context, r soap.RoundTripper, req *types.EvcManager) (*types.EvcManagerResponse, error) {
	ret := m.ctrl.Call(m, "EvcManager", ctx, r, req)
	ret0, _ := ret[0].(*types.EvcManagerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvcManager indicates an expected call of EvcManager
func (mr *MockContextMockRecorder) EvcManager(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvcManager", reflect.TypeOf((*MockContext)(nil).EvcManager), ctx, r, req)
}

// ExecuteHostProfile mocks base method
func (m *MockContext) ExecuteHostProfile(ctx context.Context, r soap.RoundTripper, req *types.ExecuteHostProfile) (*types.ExecuteHostProfileResponse, error) {
	ret := m.ctrl.Call(m, "ExecuteHostProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.ExecuteHostProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteHostProfile indicates an expected call of ExecuteHostProfile
func (mr *MockContextMockRecorder) ExecuteHostProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteHostProfile", reflect.TypeOf((*MockContext)(nil).ExecuteHostProfile), ctx, r, req)
}

// ExecuteSimpleCommand mocks base method
func (m *MockContext) ExecuteSimpleCommand(ctx context.Context, r soap.RoundTripper, req *types.ExecuteSimpleCommand) (*types.ExecuteSimpleCommandResponse, error) {
	ret := m.ctrl.Call(m, "ExecuteSimpleCommand", ctx, r, req)
	ret0, _ := ret[0].(*types.ExecuteSimpleCommandResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteSimpleCommand indicates an expected call of ExecuteSimpleCommand
func (mr *MockContextMockRecorder) ExecuteSimpleCommand(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteSimpleCommand", reflect.TypeOf((*MockContext)(nil).ExecuteSimpleCommand), ctx, r, req)
}

// ExitLockdownMode mocks base method
func (m *MockContext) ExitLockdownMode(ctx context.Context, r soap.RoundTripper, req *types.ExitLockdownMode) (*types.ExitLockdownModeResponse, error) {
	ret := m.ctrl.Call(m, "ExitLockdownMode", ctx, r, req)
	ret0, _ := ret[0].(*types.ExitLockdownModeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitLockdownMode indicates an expected call of ExitLockdownMode
func (mr *MockContextMockRecorder) ExitLockdownMode(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitLockdownMode", reflect.TypeOf((*MockContext)(nil).ExitLockdownMode), ctx, r, req)
}

// ExitMaintenanceMode_Task mocks base method
func (m *MockContext) ExitMaintenanceMode_Task(ctx context.Context, r soap.RoundTripper, req *types.ExitMaintenanceMode_Task) (*types.ExitMaintenanceMode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ExitMaintenanceMode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ExitMaintenanceMode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitMaintenanceMode_Task indicates an expected call of ExitMaintenanceMode_Task
func (mr *MockContextMockRecorder) ExitMaintenanceMode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitMaintenanceMode_Task", reflect.TypeOf((*MockContext)(nil).ExitMaintenanceMode_Task), ctx, r, req)
}

// ExpandVmfsDatastore mocks base method
func (m *MockContext) ExpandVmfsDatastore(ctx context.Context, r soap.RoundTripper, req *types.ExpandVmfsDatastore) (*types.ExpandVmfsDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "ExpandVmfsDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.ExpandVmfsDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVmfsDatastore indicates an expected call of ExpandVmfsDatastore
func (mr *MockContextMockRecorder) ExpandVmfsDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVmfsDatastore", reflect.TypeOf((*MockContext)(nil).ExpandVmfsDatastore), ctx, r, req)
}

// ExpandVmfsExtent mocks base method
func (m *MockContext) ExpandVmfsExtent(ctx context.Context, r soap.RoundTripper, req *types.ExpandVmfsExtent) (*types.ExpandVmfsExtentResponse, error) {
	ret := m.ctrl.Call(m, "ExpandVmfsExtent", ctx, r, req)
	ret0, _ := ret[0].(*types.ExpandVmfsExtentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVmfsExtent indicates an expected call of ExpandVmfsExtent
func (mr *MockContextMockRecorder) ExpandVmfsExtent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVmfsExtent", reflect.TypeOf((*MockContext)(nil).ExpandVmfsExtent), ctx, r, req)
}

// ExportAnswerFile_Task mocks base method
func (m *MockContext) ExportAnswerFile_Task(ctx context.Context, r soap.RoundTripper, req *types.ExportAnswerFile_Task) (*types.ExportAnswerFile_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ExportAnswerFile_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ExportAnswerFile_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportAnswerFile_Task indicates an expected call of ExportAnswerFile_Task
func (mr *MockContextMockRecorder) ExportAnswerFile_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportAnswerFile_Task", reflect.TypeOf((*MockContext)(nil).ExportAnswerFile_Task), ctx, r, req)
}

// ExportProfile mocks base method
func (m *MockContext) ExportProfile(ctx context.Context, r soap.RoundTripper, req *types.ExportProfile) (*types.ExportProfileResponse, error) {
	ret := m.ctrl.Call(m, "ExportProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.ExportProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportProfile indicates an expected call of ExportProfile
func (mr *MockContextMockRecorder) ExportProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportProfile", reflect.TypeOf((*MockContext)(nil).ExportProfile), ctx, r, req)
}

// ExportSnapshot mocks base method
func (m *MockContext) ExportSnapshot(ctx context.Context, r soap.RoundTripper, req *types.ExportSnapshot) (*types.ExportSnapshotResponse, error) {
	ret := m.ctrl.Call(m, "ExportSnapshot", ctx, r, req)
	ret0, _ := ret[0].(*types.ExportSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSnapshot indicates an expected call of ExportSnapshot
func (mr *MockContextMockRecorder) ExportSnapshot(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSnapshot", reflect.TypeOf((*MockContext)(nil).ExportSnapshot), ctx, r, req)
}

// ExportVApp mocks base method
func (m *MockContext) ExportVApp(ctx context.Context, r soap.RoundTripper, req *types.ExportVApp) (*types.ExportVAppResponse, error) {
	ret := m.ctrl.Call(m, "ExportVApp", ctx, r, req)
	ret0, _ := ret[0].(*types.ExportVAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportVApp indicates an expected call of ExportVApp
func (mr *MockContextMockRecorder) ExportVApp(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVApp", reflect.TypeOf((*MockContext)(nil).ExportVApp), ctx, r, req)
}

// ExportVm mocks base method
func (m *MockContext) ExportVm(ctx context.Context, r soap.RoundTripper, req *types.ExportVm) (*types.ExportVmResponse, error) {
	ret := m.ctrl.Call(m, "ExportVm", ctx, r, req)
	ret0, _ := ret[0].(*types.ExportVmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportVm indicates an expected call of ExportVm
func (mr *MockContextMockRecorder) ExportVm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportVm", reflect.TypeOf((*MockContext)(nil).ExportVm), ctx, r, req)
}

// ExtendDisk_Task mocks base method
func (m *MockContext) ExtendDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.ExtendDisk_Task) (*types.ExtendDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ExtendDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ExtendDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendDisk_Task indicates an expected call of ExtendDisk_Task
func (mr *MockContextMockRecorder) ExtendDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendDisk_Task", reflect.TypeOf((*MockContext)(nil).ExtendDisk_Task), ctx, r, req)
}

// ExtendVffs mocks base method
func (m *MockContext) ExtendVffs(ctx context.Context, r soap.RoundTripper, req *types.ExtendVffs) (*types.ExtendVffsResponse, error) {
	ret := m.ctrl.Call(m, "ExtendVffs", ctx, r, req)
	ret0, _ := ret[0].(*types.ExtendVffsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVffs indicates an expected call of ExtendVffs
func (mr *MockContextMockRecorder) ExtendVffs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVffs", reflect.TypeOf((*MockContext)(nil).ExtendVffs), ctx, r, req)
}

// ExtendVirtualDisk_Task mocks base method
func (m *MockContext) ExtendVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.ExtendVirtualDisk_Task) (*types.ExtendVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ExtendVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ExtendVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVirtualDisk_Task indicates an expected call of ExtendVirtualDisk_Task
func (mr *MockContextMockRecorder) ExtendVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).ExtendVirtualDisk_Task), ctx, r, req)
}

// ExtendVmfsDatastore mocks base method
func (m *MockContext) ExtendVmfsDatastore(ctx context.Context, r soap.RoundTripper, req *types.ExtendVmfsDatastore) (*types.ExtendVmfsDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "ExtendVmfsDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.ExtendVmfsDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVmfsDatastore indicates an expected call of ExtendVmfsDatastore
func (mr *MockContextMockRecorder) ExtendVmfsDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVmfsDatastore", reflect.TypeOf((*MockContext)(nil).ExtendVmfsDatastore), ctx, r, req)
}

// ExtractOvfEnvironment mocks base method
func (m *MockContext) ExtractOvfEnvironment(ctx context.Context, r soap.RoundTripper, req *types.ExtractOvfEnvironment) (*types.ExtractOvfEnvironmentResponse, error) {
	ret := m.ctrl.Call(m, "ExtractOvfEnvironment", ctx, r, req)
	ret0, _ := ret[0].(*types.ExtractOvfEnvironmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractOvfEnvironment indicates an expected call of ExtractOvfEnvironment
func (mr *MockContextMockRecorder) ExtractOvfEnvironment(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractOvfEnvironment", reflect.TypeOf((*MockContext)(nil).ExtractOvfEnvironment), ctx, r, req)
}

// FetchDVPortKeys mocks base method
func (m *MockContext) FetchDVPortKeys(ctx context.Context, r soap.RoundTripper, req *types.FetchDVPortKeys) (*types.FetchDVPortKeysResponse, error) {
	ret := m.ctrl.Call(m, "FetchDVPortKeys", ctx, r, req)
	ret0, _ := ret[0].(*types.FetchDVPortKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDVPortKeys indicates an expected call of FetchDVPortKeys
func (mr *MockContextMockRecorder) FetchDVPortKeys(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDVPortKeys", reflect.TypeOf((*MockContext)(nil).FetchDVPortKeys), ctx, r, req)
}

// FetchDVPorts mocks base method
func (m *MockContext) FetchDVPorts(ctx context.Context, r soap.RoundTripper, req *types.FetchDVPorts) (*types.FetchDVPortsResponse, error) {
	ret := m.ctrl.Call(m, "FetchDVPorts", ctx, r, req)
	ret0, _ := ret[0].(*types.FetchDVPortsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDVPorts indicates an expected call of FetchDVPorts
func (mr *MockContextMockRecorder) FetchDVPorts(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDVPorts", reflect.TypeOf((*MockContext)(nil).FetchDVPorts), ctx, r, req)
}

// FetchSystemEventLog mocks base method
func (m *MockContext) FetchSystemEventLog(ctx context.Context, r soap.RoundTripper, req *types.FetchSystemEventLog) (*types.FetchSystemEventLogResponse, error) {
	ret := m.ctrl.Call(m, "FetchSystemEventLog", ctx, r, req)
	ret0, _ := ret[0].(*types.FetchSystemEventLogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSystemEventLog indicates an expected call of FetchSystemEventLog
func (mr *MockContextMockRecorder) FetchSystemEventLog(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSystemEventLog", reflect.TypeOf((*MockContext)(nil).FetchSystemEventLog), ctx, r, req)
}

// FetchUserPrivilegeOnEntities mocks base method
func (m *MockContext) FetchUserPrivilegeOnEntities(ctx context.Context, r soap.RoundTripper, req *types.FetchUserPrivilegeOnEntities) (*types.FetchUserPrivilegeOnEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "FetchUserPrivilegeOnEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.FetchUserPrivilegeOnEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserPrivilegeOnEntities indicates an expected call of FetchUserPrivilegeOnEntities
func (mr *MockContextMockRecorder) FetchUserPrivilegeOnEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserPrivilegeOnEntities", reflect.TypeOf((*MockContext)(nil).FetchUserPrivilegeOnEntities), ctx, r, req)
}

// FindAllByDnsName mocks base method
func (m *MockContext) FindAllByDnsName(ctx context.Context, r soap.RoundTripper, req *types.FindAllByDnsName) (*types.FindAllByDnsNameResponse, error) {
	ret := m.ctrl.Call(m, "FindAllByDnsName", ctx, r, req)
	ret0, _ := ret[0].(*types.FindAllByDnsNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByDnsName indicates an expected call of FindAllByDnsName
func (mr *MockContextMockRecorder) FindAllByDnsName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByDnsName", reflect.TypeOf((*MockContext)(nil).FindAllByDnsName), ctx, r, req)
}

// FindAllByIp mocks base method
func (m *MockContext) FindAllByIp(ctx context.Context, r soap.RoundTripper, req *types.FindAllByIp) (*types.FindAllByIpResponse, error) {
	ret := m.ctrl.Call(m, "FindAllByIp", ctx, r, req)
	ret0, _ := ret[0].(*types.FindAllByIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByIp indicates an expected call of FindAllByIp
func (mr *MockContextMockRecorder) FindAllByIp(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByIp", reflect.TypeOf((*MockContext)(nil).FindAllByIp), ctx, r, req)
}

// FindAllByUuid mocks base method
func (m *MockContext) FindAllByUuid(ctx context.Context, r soap.RoundTripper, req *types.FindAllByUuid) (*types.FindAllByUuidResponse, error) {
	ret := m.ctrl.Call(m, "FindAllByUuid", ctx, r, req)
	ret0, _ := ret[0].(*types.FindAllByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUuid indicates an expected call of FindAllByUuid
func (mr *MockContextMockRecorder) FindAllByUuid(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUuid", reflect.TypeOf((*MockContext)(nil).FindAllByUuid), ctx, r, req)
}

// FindAssociatedProfile mocks base method
func (m *MockContext) FindAssociatedProfile(ctx context.Context, r soap.RoundTripper, req *types.FindAssociatedProfile) (*types.FindAssociatedProfileResponse, error) {
	ret := m.ctrl.Call(m, "FindAssociatedProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.FindAssociatedProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAssociatedProfile indicates an expected call of FindAssociatedProfile
func (mr *MockContextMockRecorder) FindAssociatedProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAssociatedProfile", reflect.TypeOf((*MockContext)(nil).FindAssociatedProfile), ctx, r, req)
}

// FindByDatastorePath mocks base method
func (m *MockContext) FindByDatastorePath(ctx context.Context, r soap.RoundTripper, req *types.FindByDatastorePath) (*types.FindByDatastorePathResponse, error) {
	ret := m.ctrl.Call(m, "FindByDatastorePath", ctx, r, req)
	ret0, _ := ret[0].(*types.FindByDatastorePathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDatastorePath indicates an expected call of FindByDatastorePath
func (mr *MockContextMockRecorder) FindByDatastorePath(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDatastorePath", reflect.TypeOf((*MockContext)(nil).FindByDatastorePath), ctx, r, req)
}

// FindByDnsName mocks base method
func (m *MockContext) FindByDnsName(ctx context.Context, r soap.RoundTripper, req *types.FindByDnsName) (*types.FindByDnsNameResponse, error) {
	ret := m.ctrl.Call(m, "FindByDnsName", ctx, r, req)
	ret0, _ := ret[0].(*types.FindByDnsNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDnsName indicates an expected call of FindByDnsName
func (mr *MockContextMockRecorder) FindByDnsName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDnsName", reflect.TypeOf((*MockContext)(nil).FindByDnsName), ctx, r, req)
}

// FindByInventoryPath mocks base method
func (m *MockContext) FindByInventoryPath(ctx context.Context, r soap.RoundTripper, req *types.FindByInventoryPath) (*types.FindByInventoryPathResponse, error) {
	ret := m.ctrl.Call(m, "FindByInventoryPath", ctx, r, req)
	ret0, _ := ret[0].(*types.FindByInventoryPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByInventoryPath indicates an expected call of FindByInventoryPath
func (mr *MockContextMockRecorder) FindByInventoryPath(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByInventoryPath", reflect.TypeOf((*MockContext)(nil).FindByInventoryPath), ctx, r, req)
}

// FindByIp mocks base method
func (m *MockContext) FindByIp(ctx context.Context, r soap.RoundTripper, req *types.FindByIp) (*types.FindByIpResponse, error) {
	ret := m.ctrl.Call(m, "FindByIp", ctx, r, req)
	ret0, _ := ret[0].(*types.FindByIpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIp indicates an expected call of FindByIp
func (mr *MockContextMockRecorder) FindByIp(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIp", reflect.TypeOf((*MockContext)(nil).FindByIp), ctx, r, req)
}

// FindByUuid mocks base method
func (m *MockContext) FindByUuid(ctx context.Context, r soap.RoundTripper, req *types.FindByUuid) (*types.FindByUuidResponse, error) {
	ret := m.ctrl.Call(m, "FindByUuid", ctx, r, req)
	ret0, _ := ret[0].(*types.FindByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUuid indicates an expected call of FindByUuid
func (mr *MockContextMockRecorder) FindByUuid(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUuid", reflect.TypeOf((*MockContext)(nil).FindByUuid), ctx, r, req)
}

// FindChild mocks base method
func (m *MockContext) FindChild(ctx context.Context, r soap.RoundTripper, req *types.FindChild) (*types.FindChildResponse, error) {
	ret := m.ctrl.Call(m, "FindChild", ctx, r, req)
	ret0, _ := ret[0].(*types.FindChildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindChild indicates an expected call of FindChild
func (mr *MockContextMockRecorder) FindChild(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindChild", reflect.TypeOf((*MockContext)(nil).FindChild), ctx, r, req)
}

// FindExtension mocks base method
func (m *MockContext) FindExtension(ctx context.Context, r soap.RoundTripper, req *types.FindExtension) (*types.FindExtensionResponse, error) {
	ret := m.ctrl.Call(m, "FindExtension", ctx, r, req)
	ret0, _ := ret[0].(*types.FindExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExtension indicates an expected call of FindExtension
func (mr *MockContextMockRecorder) FindExtension(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExtension", reflect.TypeOf((*MockContext)(nil).FindExtension), ctx, r, req)
}

// FindRulesForVm mocks base method
func (m *MockContext) FindRulesForVm(ctx context.Context, r soap.RoundTripper, req *types.FindRulesForVm) (*types.FindRulesForVmResponse, error) {
	ret := m.ctrl.Call(m, "FindRulesForVm", ctx, r, req)
	ret0, _ := ret[0].(*types.FindRulesForVmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRulesForVm indicates an expected call of FindRulesForVm
func (mr *MockContextMockRecorder) FindRulesForVm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRulesForVm", reflect.TypeOf((*MockContext)(nil).FindRulesForVm), ctx, r, req)
}

// FormatVffs mocks base method
func (m *MockContext) FormatVffs(ctx context.Context, r soap.RoundTripper, req *types.FormatVffs) (*types.FormatVffsResponse, error) {
	ret := m.ctrl.Call(m, "FormatVffs", ctx, r, req)
	ret0, _ := ret[0].(*types.FormatVffsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatVffs indicates an expected call of FormatVffs
func (mr *MockContextMockRecorder) FormatVffs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatVffs", reflect.TypeOf((*MockContext)(nil).FormatVffs), ctx, r, req)
}

// FormatVmfs mocks base method
func (m *MockContext) FormatVmfs(ctx context.Context, r soap.RoundTripper, req *types.FormatVmfs) (*types.FormatVmfsResponse, error) {
	ret := m.ctrl.Call(m, "FormatVmfs", ctx, r, req)
	ret0, _ := ret[0].(*types.FormatVmfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatVmfs indicates an expected call of FormatVmfs
func (mr *MockContextMockRecorder) FormatVmfs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatVmfs", reflect.TypeOf((*MockContext)(nil).FormatVmfs), ctx, r, req)
}

// GenerateCertificateSigningRequest mocks base method
func (m *MockContext) GenerateCertificateSigningRequest(ctx context.Context, r soap.RoundTripper, req *types.GenerateCertificateSigningRequest) (*types.GenerateCertificateSigningRequestResponse, error) {
	ret := m.ctrl.Call(m, "GenerateCertificateSigningRequest", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateCertificateSigningRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCertificateSigningRequest indicates an expected call of GenerateCertificateSigningRequest
func (mr *MockContextMockRecorder) GenerateCertificateSigningRequest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCertificateSigningRequest", reflect.TypeOf((*MockContext)(nil).GenerateCertificateSigningRequest), ctx, r, req)
}

// GenerateCertificateSigningRequestByDn mocks base method
func (m *MockContext) GenerateCertificateSigningRequestByDn(ctx context.Context, r soap.RoundTripper, req *types.GenerateCertificateSigningRequestByDn) (*types.GenerateCertificateSigningRequestByDnResponse, error) {
	ret := m.ctrl.Call(m, "GenerateCertificateSigningRequestByDn", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateCertificateSigningRequestByDnResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCertificateSigningRequestByDn indicates an expected call of GenerateCertificateSigningRequestByDn
func (mr *MockContextMockRecorder) GenerateCertificateSigningRequestByDn(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCertificateSigningRequestByDn", reflect.TypeOf((*MockContext)(nil).GenerateCertificateSigningRequestByDn), ctx, r, req)
}

// GenerateClientCsr mocks base method
func (m *MockContext) GenerateClientCsr(ctx context.Context, r soap.RoundTripper, req *types.GenerateClientCsr) (*types.GenerateClientCsrResponse, error) {
	ret := m.ctrl.Call(m, "GenerateClientCsr", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateClientCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateClientCsr indicates an expected call of GenerateClientCsr
func (mr *MockContextMockRecorder) GenerateClientCsr(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateClientCsr", reflect.TypeOf((*MockContext)(nil).GenerateClientCsr), ctx, r, req)
}

// GenerateConfigTaskList mocks base method
func (m *MockContext) GenerateConfigTaskList(ctx context.Context, r soap.RoundTripper, req *types.GenerateConfigTaskList) (*types.GenerateConfigTaskListResponse, error) {
	ret := m.ctrl.Call(m, "GenerateConfigTaskList", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateConfigTaskListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateConfigTaskList indicates an expected call of GenerateConfigTaskList
func (mr *MockContextMockRecorder) GenerateConfigTaskList(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateConfigTaskList", reflect.TypeOf((*MockContext)(nil).GenerateConfigTaskList), ctx, r, req)
}

// GenerateHostConfigTaskSpec_Task mocks base method
func (m *MockContext) GenerateHostConfigTaskSpec_Task(ctx context.Context, r soap.RoundTripper, req *types.GenerateHostConfigTaskSpec_Task) (*types.GenerateHostConfigTaskSpec_TaskResponse, error) {
	ret := m.ctrl.Call(m, "GenerateHostConfigTaskSpec_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateHostConfigTaskSpec_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHostConfigTaskSpec_Task indicates an expected call of GenerateHostConfigTaskSpec_Task
func (mr *MockContextMockRecorder) GenerateHostConfigTaskSpec_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHostConfigTaskSpec_Task", reflect.TypeOf((*MockContext)(nil).GenerateHostConfigTaskSpec_Task), ctx, r, req)
}

// GenerateHostProfileTaskList_Task mocks base method
func (m *MockContext) GenerateHostProfileTaskList_Task(ctx context.Context, r soap.RoundTripper, req *types.GenerateHostProfileTaskList_Task) (*types.GenerateHostProfileTaskList_TaskResponse, error) {
	ret := m.ctrl.Call(m, "GenerateHostProfileTaskList_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateHostProfileTaskList_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHostProfileTaskList_Task indicates an expected call of GenerateHostProfileTaskList_Task
func (mr *MockContextMockRecorder) GenerateHostProfileTaskList_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHostProfileTaskList_Task", reflect.TypeOf((*MockContext)(nil).GenerateHostProfileTaskList_Task), ctx, r, req)
}

// GenerateKey mocks base method
func (m *MockContext) GenerateKey(ctx context.Context, r soap.RoundTripper, req *types.GenerateKey) (*types.GenerateKeyResponse, error) {
	ret := m.ctrl.Call(m, "GenerateKey", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey
func (mr *MockContextMockRecorder) GenerateKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockContext)(nil).GenerateKey), ctx, r, req)
}

// GenerateLogBundles_Task mocks base method
func (m *MockContext) GenerateLogBundles_Task(ctx context.Context, r soap.RoundTripper, req *types.GenerateLogBundles_Task) (*types.GenerateLogBundles_TaskResponse, error) {
	ret := m.ctrl.Call(m, "GenerateLogBundles_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateLogBundles_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateLogBundles_Task indicates an expected call of GenerateLogBundles_Task
func (mr *MockContextMockRecorder) GenerateLogBundles_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLogBundles_Task", reflect.TypeOf((*MockContext)(nil).GenerateLogBundles_Task), ctx, r, req)
}

// GenerateSelfSignedClientCert mocks base method
func (m *MockContext) GenerateSelfSignedClientCert(ctx context.Context, r soap.RoundTripper, req *types.GenerateSelfSignedClientCert) (*types.GenerateSelfSignedClientCertResponse, error) {
	ret := m.ctrl.Call(m, "GenerateSelfSignedClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.GenerateSelfSignedClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSelfSignedClientCert indicates an expected call of GenerateSelfSignedClientCert
func (mr *MockContextMockRecorder) GenerateSelfSignedClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSelfSignedClientCert", reflect.TypeOf((*MockContext)(nil).GenerateSelfSignedClientCert), ctx, r, req)
}

// GetAlarm mocks base method
func (m *MockContext) GetAlarm(ctx context.Context, r soap.RoundTripper, req *types.GetAlarm) (*types.GetAlarmResponse, error) {
	ret := m.ctrl.Call(m, "GetAlarm", ctx, r, req)
	ret0, _ := ret[0].(*types.GetAlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarm indicates an expected call of GetAlarm
func (mr *MockContextMockRecorder) GetAlarm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarm", reflect.TypeOf((*MockContext)(nil).GetAlarm), ctx, r, req)
}

// GetAlarmState mocks base method
func (m *MockContext) GetAlarmState(ctx context.Context, r soap.RoundTripper, req *types.GetAlarmState) (*types.GetAlarmStateResponse, error) {
	ret := m.ctrl.Call(m, "GetAlarmState", ctx, r, req)
	ret0, _ := ret[0].(*types.GetAlarmStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlarmState indicates an expected call of GetAlarmState
func (mr *MockContextMockRecorder) GetAlarmState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlarmState", reflect.TypeOf((*MockContext)(nil).GetAlarmState), ctx, r, req)
}

// GetCustomizationSpec mocks base method
func (m *MockContext) GetCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.GetCustomizationSpec) (*types.GetCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "GetCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.GetCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomizationSpec indicates an expected call of GetCustomizationSpec
func (mr *MockContextMockRecorder) GetCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomizationSpec", reflect.TypeOf((*MockContext)(nil).GetCustomizationSpec), ctx, r, req)
}

// GetPublicKey mocks base method
func (m *MockContext) GetPublicKey(ctx context.Context, r soap.RoundTripper, req *types.GetPublicKey) (*types.GetPublicKeyResponse, error) {
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, r, req)
	ret0, _ := ret[0].(*types.GetPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockContextMockRecorder) GetPublicKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockContext)(nil).GetPublicKey), ctx, r, req)
}

// GetResourceUsage mocks base method
func (m *MockContext) GetResourceUsage(ctx context.Context, r soap.RoundTripper, req *types.GetResourceUsage) (*types.GetResourceUsageResponse, error) {
	ret := m.ctrl.Call(m, "GetResourceUsage", ctx, r, req)
	ret0, _ := ret[0].(*types.GetResourceUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceUsage indicates an expected call of GetResourceUsage
func (mr *MockContextMockRecorder) GetResourceUsage(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceUsage", reflect.TypeOf((*MockContext)(nil).GetResourceUsage), ctx, r, req)
}

// GetVchaClusterHealth mocks base method
func (m *MockContext) GetVchaClusterHealth(ctx context.Context, r soap.RoundTripper, req *types.GetVchaClusterHealth) (*types.GetVchaClusterHealthResponse, error) {
	ret := m.ctrl.Call(m, "GetVchaClusterHealth", ctx, r, req)
	ret0, _ := ret[0].(*types.GetVchaClusterHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVchaClusterHealth indicates an expected call of GetVchaClusterHealth
func (mr *MockContextMockRecorder) GetVchaClusterHealth(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVchaClusterHealth", reflect.TypeOf((*MockContext)(nil).GetVchaClusterHealth), ctx, r, req)
}

// GetVsanObjExtAttrs mocks base method
func (m *MockContext) GetVsanObjExtAttrs(ctx context.Context, r soap.RoundTripper, req *types.GetVsanObjExtAttrs) (*types.GetVsanObjExtAttrsResponse, error) {
	ret := m.ctrl.Call(m, "GetVsanObjExtAttrs", ctx, r, req)
	ret0, _ := ret[0].(*types.GetVsanObjExtAttrsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVsanObjExtAttrs indicates an expected call of GetVsanObjExtAttrs
func (mr *MockContextMockRecorder) GetVsanObjExtAttrs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVsanObjExtAttrs", reflect.TypeOf((*MockContext)(nil).GetVsanObjExtAttrs), ctx, r, req)
}

// HasMonitoredEntity mocks base method
func (m *MockContext) HasMonitoredEntity(ctx context.Context, r soap.RoundTripper, req *types.HasMonitoredEntity) (*types.HasMonitoredEntityResponse, error) {
	ret := m.ctrl.Call(m, "HasMonitoredEntity", ctx, r, req)
	ret0, _ := ret[0].(*types.HasMonitoredEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMonitoredEntity indicates an expected call of HasMonitoredEntity
func (mr *MockContextMockRecorder) HasMonitoredEntity(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMonitoredEntity", reflect.TypeOf((*MockContext)(nil).HasMonitoredEntity), ctx, r, req)
}

// HasPrivilegeOnEntities mocks base method
func (m *MockContext) HasPrivilegeOnEntities(ctx context.Context, r soap.RoundTripper, req *types.HasPrivilegeOnEntities) (*types.HasPrivilegeOnEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "HasPrivilegeOnEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.HasPrivilegeOnEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPrivilegeOnEntities indicates an expected call of HasPrivilegeOnEntities
func (mr *MockContextMockRecorder) HasPrivilegeOnEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrivilegeOnEntities", reflect.TypeOf((*MockContext)(nil).HasPrivilegeOnEntities), ctx, r, req)
}

// HasPrivilegeOnEntity mocks base method
func (m *MockContext) HasPrivilegeOnEntity(ctx context.Context, r soap.RoundTripper, req *types.HasPrivilegeOnEntity) (*types.HasPrivilegeOnEntityResponse, error) {
	ret := m.ctrl.Call(m, "HasPrivilegeOnEntity", ctx, r, req)
	ret0, _ := ret[0].(*types.HasPrivilegeOnEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPrivilegeOnEntity indicates an expected call of HasPrivilegeOnEntity
func (mr *MockContextMockRecorder) HasPrivilegeOnEntity(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrivilegeOnEntity", reflect.TypeOf((*MockContext)(nil).HasPrivilegeOnEntity), ctx, r, req)
}

// HasProvider mocks base method
func (m *MockContext) HasProvider(ctx context.Context, r soap.RoundTripper, req *types.HasProvider) (*types.HasProviderResponse, error) {
	ret := m.ctrl.Call(m, "HasProvider", ctx, r, req)
	ret0, _ := ret[0].(*types.HasProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasProvider indicates an expected call of HasProvider
func (mr *MockContextMockRecorder) HasProvider(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProvider", reflect.TypeOf((*MockContext)(nil).HasProvider), ctx, r, req)
}

// HasUserPrivilegeOnEntities mocks base method
func (m *MockContext) HasUserPrivilegeOnEntities(ctx context.Context, r soap.RoundTripper, req *types.HasUserPrivilegeOnEntities) (*types.HasUserPrivilegeOnEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "HasUserPrivilegeOnEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.HasUserPrivilegeOnEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserPrivilegeOnEntities indicates an expected call of HasUserPrivilegeOnEntities
func (mr *MockContextMockRecorder) HasUserPrivilegeOnEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserPrivilegeOnEntities", reflect.TypeOf((*MockContext)(nil).HasUserPrivilegeOnEntities), ctx, r, req)
}

// HostCloneVStorageObject_Task mocks base method
func (m *MockContext) HostCloneVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.HostCloneVStorageObject_Task) (*types.HostCloneVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostCloneVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostCloneVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostCloneVStorageObject_Task indicates an expected call of HostCloneVStorageObject_Task
func (mr *MockContextMockRecorder) HostCloneVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostCloneVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).HostCloneVStorageObject_Task), ctx, r, req)
}

// HostConfigVFlashCache mocks base method
func (m *MockContext) HostConfigVFlashCache(ctx context.Context, r soap.RoundTripper, req *types.HostConfigVFlashCache) (*types.HostConfigVFlashCacheResponse, error) {
	ret := m.ctrl.Call(m, "HostConfigVFlashCache", ctx, r, req)
	ret0, _ := ret[0].(*types.HostConfigVFlashCacheResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostConfigVFlashCache indicates an expected call of HostConfigVFlashCache
func (mr *MockContextMockRecorder) HostConfigVFlashCache(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostConfigVFlashCache", reflect.TypeOf((*MockContext)(nil).HostConfigVFlashCache), ctx, r, req)
}

// HostConfigureVFlashResource mocks base method
func (m *MockContext) HostConfigureVFlashResource(ctx context.Context, r soap.RoundTripper, req *types.HostConfigureVFlashResource) (*types.HostConfigureVFlashResourceResponse, error) {
	ret := m.ctrl.Call(m, "HostConfigureVFlashResource", ctx, r, req)
	ret0, _ := ret[0].(*types.HostConfigureVFlashResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostConfigureVFlashResource indicates an expected call of HostConfigureVFlashResource
func (mr *MockContextMockRecorder) HostConfigureVFlashResource(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostConfigureVFlashResource", reflect.TypeOf((*MockContext)(nil).HostConfigureVFlashResource), ctx, r, req)
}

// HostCreateDisk_Task mocks base method
func (m *MockContext) HostCreateDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.HostCreateDisk_Task) (*types.HostCreateDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostCreateDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostCreateDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostCreateDisk_Task indicates an expected call of HostCreateDisk_Task
func (mr *MockContextMockRecorder) HostCreateDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostCreateDisk_Task", reflect.TypeOf((*MockContext)(nil).HostCreateDisk_Task), ctx, r, req)
}

// HostDeleteVStorageObject_Task mocks base method
func (m *MockContext) HostDeleteVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.HostDeleteVStorageObject_Task) (*types.HostDeleteVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostDeleteVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostDeleteVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostDeleteVStorageObject_Task indicates an expected call of HostDeleteVStorageObject_Task
func (mr *MockContextMockRecorder) HostDeleteVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostDeleteVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).HostDeleteVStorageObject_Task), ctx, r, req)
}

// HostExtendDisk_Task mocks base method
func (m *MockContext) HostExtendDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.HostExtendDisk_Task) (*types.HostExtendDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostExtendDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostExtendDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostExtendDisk_Task indicates an expected call of HostExtendDisk_Task
func (mr *MockContextMockRecorder) HostExtendDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostExtendDisk_Task", reflect.TypeOf((*MockContext)(nil).HostExtendDisk_Task), ctx, r, req)
}

// HostGetVFlashModuleDefaultConfig mocks base method
func (m *MockContext) HostGetVFlashModuleDefaultConfig(ctx context.Context, r soap.RoundTripper, req *types.HostGetVFlashModuleDefaultConfig) (*types.HostGetVFlashModuleDefaultConfigResponse, error) {
	ret := m.ctrl.Call(m, "HostGetVFlashModuleDefaultConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.HostGetVFlashModuleDefaultConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostGetVFlashModuleDefaultConfig indicates an expected call of HostGetVFlashModuleDefaultConfig
func (mr *MockContextMockRecorder) HostGetVFlashModuleDefaultConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostGetVFlashModuleDefaultConfig", reflect.TypeOf((*MockContext)(nil).HostGetVFlashModuleDefaultConfig), ctx, r, req)
}

// HostImageConfigGetAcceptance mocks base method
func (m *MockContext) HostImageConfigGetAcceptance(ctx context.Context, r soap.RoundTripper, req *types.HostImageConfigGetAcceptance) (*types.HostImageConfigGetAcceptanceResponse, error) {
	ret := m.ctrl.Call(m, "HostImageConfigGetAcceptance", ctx, r, req)
	ret0, _ := ret[0].(*types.HostImageConfigGetAcceptanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostImageConfigGetAcceptance indicates an expected call of HostImageConfigGetAcceptance
func (mr *MockContextMockRecorder) HostImageConfigGetAcceptance(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostImageConfigGetAcceptance", reflect.TypeOf((*MockContext)(nil).HostImageConfigGetAcceptance), ctx, r, req)
}

// HostImageConfigGetProfile mocks base method
func (m *MockContext) HostImageConfigGetProfile(ctx context.Context, r soap.RoundTripper, req *types.HostImageConfigGetProfile) (*types.HostImageConfigGetProfileResponse, error) {
	ret := m.ctrl.Call(m, "HostImageConfigGetProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.HostImageConfigGetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostImageConfigGetProfile indicates an expected call of HostImageConfigGetProfile
func (mr *MockContextMockRecorder) HostImageConfigGetProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostImageConfigGetProfile", reflect.TypeOf((*MockContext)(nil).HostImageConfigGetProfile), ctx, r, req)
}

// HostInflateDisk_Task mocks base method
func (m *MockContext) HostInflateDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.HostInflateDisk_Task) (*types.HostInflateDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostInflateDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostInflateDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostInflateDisk_Task indicates an expected call of HostInflateDisk_Task
func (mr *MockContextMockRecorder) HostInflateDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostInflateDisk_Task", reflect.TypeOf((*MockContext)(nil).HostInflateDisk_Task), ctx, r, req)
}

// HostListVStorageObject mocks base method
func (m *MockContext) HostListVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.HostListVStorageObject) (*types.HostListVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "HostListVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.HostListVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostListVStorageObject indicates an expected call of HostListVStorageObject
func (mr *MockContextMockRecorder) HostListVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostListVStorageObject", reflect.TypeOf((*MockContext)(nil).HostListVStorageObject), ctx, r, req)
}

// HostReconcileDatastoreInventory_Task mocks base method
func (m *MockContext) HostReconcileDatastoreInventory_Task(ctx context.Context, r soap.RoundTripper, req *types.HostReconcileDatastoreInventory_Task) (*types.HostReconcileDatastoreInventory_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostReconcileDatastoreInventory_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostReconcileDatastoreInventory_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostReconcileDatastoreInventory_Task indicates an expected call of HostReconcileDatastoreInventory_Task
func (mr *MockContextMockRecorder) HostReconcileDatastoreInventory_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostReconcileDatastoreInventory_Task", reflect.TypeOf((*MockContext)(nil).HostReconcileDatastoreInventory_Task), ctx, r, req)
}

// HostRegisterDisk mocks base method
func (m *MockContext) HostRegisterDisk(ctx context.Context, r soap.RoundTripper, req *types.HostRegisterDisk) (*types.HostRegisterDiskResponse, error) {
	ret := m.ctrl.Call(m, "HostRegisterDisk", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRegisterDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRegisterDisk indicates an expected call of HostRegisterDisk
func (mr *MockContextMockRecorder) HostRegisterDisk(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRegisterDisk", reflect.TypeOf((*MockContext)(nil).HostRegisterDisk), ctx, r, req)
}

// HostRelocateVStorageObject_Task mocks base method
func (m *MockContext) HostRelocateVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.HostRelocateVStorageObject_Task) (*types.HostRelocateVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "HostRelocateVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRelocateVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRelocateVStorageObject_Task indicates an expected call of HostRelocateVStorageObject_Task
func (mr *MockContextMockRecorder) HostRelocateVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRelocateVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).HostRelocateVStorageObject_Task), ctx, r, req)
}

// HostRemoveVFlashResource mocks base method
func (m *MockContext) HostRemoveVFlashResource(ctx context.Context, r soap.RoundTripper, req *types.HostRemoveVFlashResource) (*types.HostRemoveVFlashResourceResponse, error) {
	ret := m.ctrl.Call(m, "HostRemoveVFlashResource", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRemoveVFlashResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRemoveVFlashResource indicates an expected call of HostRemoveVFlashResource
func (mr *MockContextMockRecorder) HostRemoveVFlashResource(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRemoveVFlashResource", reflect.TypeOf((*MockContext)(nil).HostRemoveVFlashResource), ctx, r, req)
}

// HostRenameVStorageObject mocks base method
func (m *MockContext) HostRenameVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.HostRenameVStorageObject) (*types.HostRenameVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "HostRenameVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRenameVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRenameVStorageObject indicates an expected call of HostRenameVStorageObject
func (mr *MockContextMockRecorder) HostRenameVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRenameVStorageObject", reflect.TypeOf((*MockContext)(nil).HostRenameVStorageObject), ctx, r, req)
}

// HostRetrieveVStorageObject mocks base method
func (m *MockContext) HostRetrieveVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.HostRetrieveVStorageObject) (*types.HostRetrieveVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "HostRetrieveVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRetrieveVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRetrieveVStorageObject indicates an expected call of HostRetrieveVStorageObject
func (mr *MockContextMockRecorder) HostRetrieveVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRetrieveVStorageObject", reflect.TypeOf((*MockContext)(nil).HostRetrieveVStorageObject), ctx, r, req)
}

// HostRetrieveVStorageObjectState mocks base method
func (m *MockContext) HostRetrieveVStorageObjectState(ctx context.Context, r soap.RoundTripper, req *types.HostRetrieveVStorageObjectState) (*types.HostRetrieveVStorageObjectStateResponse, error) {
	ret := m.ctrl.Call(m, "HostRetrieveVStorageObjectState", ctx, r, req)
	ret0, _ := ret[0].(*types.HostRetrieveVStorageObjectStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostRetrieveVStorageObjectState indicates an expected call of HostRetrieveVStorageObjectState
func (mr *MockContextMockRecorder) HostRetrieveVStorageObjectState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRetrieveVStorageObjectState", reflect.TypeOf((*MockContext)(nil).HostRetrieveVStorageObjectState), ctx, r, req)
}

// HostScheduleReconcileDatastoreInventory mocks base method
func (m *MockContext) HostScheduleReconcileDatastoreInventory(ctx context.Context, r soap.RoundTripper, req *types.HostScheduleReconcileDatastoreInventory) (*types.HostScheduleReconcileDatastoreInventoryResponse, error) {
	ret := m.ctrl.Call(m, "HostScheduleReconcileDatastoreInventory", ctx, r, req)
	ret0, _ := ret[0].(*types.HostScheduleReconcileDatastoreInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostScheduleReconcileDatastoreInventory indicates an expected call of HostScheduleReconcileDatastoreInventory
func (mr *MockContextMockRecorder) HostScheduleReconcileDatastoreInventory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostScheduleReconcileDatastoreInventory", reflect.TypeOf((*MockContext)(nil).HostScheduleReconcileDatastoreInventory), ctx, r, req)
}

// HostSpecGetUpdatedHosts mocks base method
func (m *MockContext) HostSpecGetUpdatedHosts(ctx context.Context, r soap.RoundTripper, req *types.HostSpecGetUpdatedHosts) (*types.HostSpecGetUpdatedHostsResponse, error) {
	ret := m.ctrl.Call(m, "HostSpecGetUpdatedHosts", ctx, r, req)
	ret0, _ := ret[0].(*types.HostSpecGetUpdatedHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostSpecGetUpdatedHosts indicates an expected call of HostSpecGetUpdatedHosts
func (mr *MockContextMockRecorder) HostSpecGetUpdatedHosts(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostSpecGetUpdatedHosts", reflect.TypeOf((*MockContext)(nil).HostSpecGetUpdatedHosts), ctx, r, req)
}

// HttpNfcLeaseAbort mocks base method
func (m *MockContext) HttpNfcLeaseAbort(ctx context.Context, r soap.RoundTripper, req *types.HttpNfcLeaseAbort) (*types.HttpNfcLeaseAbortResponse, error) {
	ret := m.ctrl.Call(m, "HttpNfcLeaseAbort", ctx, r, req)
	ret0, _ := ret[0].(*types.HttpNfcLeaseAbortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HttpNfcLeaseAbort indicates an expected call of HttpNfcLeaseAbort
func (mr *MockContextMockRecorder) HttpNfcLeaseAbort(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpNfcLeaseAbort", reflect.TypeOf((*MockContext)(nil).HttpNfcLeaseAbort), ctx, r, req)
}

// HttpNfcLeaseComplete mocks base method
func (m *MockContext) HttpNfcLeaseComplete(ctx context.Context, r soap.RoundTripper, req *types.HttpNfcLeaseComplete) (*types.HttpNfcLeaseCompleteResponse, error) {
	ret := m.ctrl.Call(m, "HttpNfcLeaseComplete", ctx, r, req)
	ret0, _ := ret[0].(*types.HttpNfcLeaseCompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HttpNfcLeaseComplete indicates an expected call of HttpNfcLeaseComplete
func (mr *MockContextMockRecorder) HttpNfcLeaseComplete(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpNfcLeaseComplete", reflect.TypeOf((*MockContext)(nil).HttpNfcLeaseComplete), ctx, r, req)
}

// HttpNfcLeaseGetManifest mocks base method
func (m *MockContext) HttpNfcLeaseGetManifest(ctx context.Context, r soap.RoundTripper, req *types.HttpNfcLeaseGetManifest) (*types.HttpNfcLeaseGetManifestResponse, error) {
	ret := m.ctrl.Call(m, "HttpNfcLeaseGetManifest", ctx, r, req)
	ret0, _ := ret[0].(*types.HttpNfcLeaseGetManifestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HttpNfcLeaseGetManifest indicates an expected call of HttpNfcLeaseGetManifest
func (mr *MockContextMockRecorder) HttpNfcLeaseGetManifest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpNfcLeaseGetManifest", reflect.TypeOf((*MockContext)(nil).HttpNfcLeaseGetManifest), ctx, r, req)
}

// HttpNfcLeaseProgress mocks base method
func (m *MockContext) HttpNfcLeaseProgress(ctx context.Context, r soap.RoundTripper, req *types.HttpNfcLeaseProgress) (*types.HttpNfcLeaseProgressResponse, error) {
	ret := m.ctrl.Call(m, "HttpNfcLeaseProgress", ctx, r, req)
	ret0, _ := ret[0].(*types.HttpNfcLeaseProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HttpNfcLeaseProgress indicates an expected call of HttpNfcLeaseProgress
func (mr *MockContextMockRecorder) HttpNfcLeaseProgress(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpNfcLeaseProgress", reflect.TypeOf((*MockContext)(nil).HttpNfcLeaseProgress), ctx, r, req)
}

// ImpersonateUser mocks base method
func (m *MockContext) ImpersonateUser(ctx context.Context, r soap.RoundTripper, req *types.ImpersonateUser) (*types.ImpersonateUserResponse, error) {
	ret := m.ctrl.Call(m, "ImpersonateUser", ctx, r, req)
	ret0, _ := ret[0].(*types.ImpersonateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImpersonateUser indicates an expected call of ImpersonateUser
func (mr *MockContextMockRecorder) ImpersonateUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpersonateUser", reflect.TypeOf((*MockContext)(nil).ImpersonateUser), ctx, r, req)
}

// ImportCertificateForCAM_Task mocks base method
func (m *MockContext) ImportCertificateForCAM_Task(ctx context.Context, r soap.RoundTripper, req *types.ImportCertificateForCAM_Task) (*types.ImportCertificateForCAM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ImportCertificateForCAM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ImportCertificateForCAM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCertificateForCAM_Task indicates an expected call of ImportCertificateForCAM_Task
func (mr *MockContextMockRecorder) ImportCertificateForCAM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCertificateForCAM_Task", reflect.TypeOf((*MockContext)(nil).ImportCertificateForCAM_Task), ctx, r, req)
}

// ImportUnmanagedSnapshot mocks base method
func (m *MockContext) ImportUnmanagedSnapshot(ctx context.Context, r soap.RoundTripper, req *types.ImportUnmanagedSnapshot) (*types.ImportUnmanagedSnapshotResponse, error) {
	ret := m.ctrl.Call(m, "ImportUnmanagedSnapshot", ctx, r, req)
	ret0, _ := ret[0].(*types.ImportUnmanagedSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportUnmanagedSnapshot indicates an expected call of ImportUnmanagedSnapshot
func (mr *MockContextMockRecorder) ImportUnmanagedSnapshot(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportUnmanagedSnapshot", reflect.TypeOf((*MockContext)(nil).ImportUnmanagedSnapshot), ctx, r, req)
}

// ImportVApp mocks base method
func (m *MockContext) ImportVApp(ctx context.Context, r soap.RoundTripper, req *types.ImportVApp) (*types.ImportVAppResponse, error) {
	ret := m.ctrl.Call(m, "ImportVApp", ctx, r, req)
	ret0, _ := ret[0].(*types.ImportVAppResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportVApp indicates an expected call of ImportVApp
func (mr *MockContextMockRecorder) ImportVApp(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportVApp", reflect.TypeOf((*MockContext)(nil).ImportVApp), ctx, r, req)
}

// InflateDisk_Task mocks base method
func (m *MockContext) InflateDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.InflateDisk_Task) (*types.InflateDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InflateDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InflateDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InflateDisk_Task indicates an expected call of InflateDisk_Task
func (mr *MockContextMockRecorder) InflateDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InflateDisk_Task", reflect.TypeOf((*MockContext)(nil).InflateDisk_Task), ctx, r, req)
}

// InflateVirtualDisk_Task mocks base method
func (m *MockContext) InflateVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.InflateVirtualDisk_Task) (*types.InflateVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InflateVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InflateVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InflateVirtualDisk_Task indicates an expected call of InflateVirtualDisk_Task
func (mr *MockContextMockRecorder) InflateVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InflateVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).InflateVirtualDisk_Task), ctx, r, req)
}

// InitializeDisks_Task mocks base method
func (m *MockContext) InitializeDisks_Task(ctx context.Context, r soap.RoundTripper, req *types.InitializeDisks_Task) (*types.InitializeDisks_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InitializeDisks_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InitializeDisks_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeDisks_Task indicates an expected call of InitializeDisks_Task
func (mr *MockContextMockRecorder) InitializeDisks_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeDisks_Task", reflect.TypeOf((*MockContext)(nil).InitializeDisks_Task), ctx, r, req)
}

// InitiateFileTransferFromGuest mocks base method
func (m *MockContext) InitiateFileTransferFromGuest(ctx context.Context, r soap.RoundTripper, req *types.InitiateFileTransferFromGuest) (*types.InitiateFileTransferFromGuestResponse, error) {
	ret := m.ctrl.Call(m, "InitiateFileTransferFromGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.InitiateFileTransferFromGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateFileTransferFromGuest indicates an expected call of InitiateFileTransferFromGuest
func (mr *MockContextMockRecorder) InitiateFileTransferFromGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateFileTransferFromGuest", reflect.TypeOf((*MockContext)(nil).InitiateFileTransferFromGuest), ctx, r, req)
}

// InitiateFileTransferToGuest mocks base method
func (m *MockContext) InitiateFileTransferToGuest(ctx context.Context, r soap.RoundTripper, req *types.InitiateFileTransferToGuest) (*types.InitiateFileTransferToGuestResponse, error) {
	ret := m.ctrl.Call(m, "InitiateFileTransferToGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.InitiateFileTransferToGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateFileTransferToGuest indicates an expected call of InitiateFileTransferToGuest
func (mr *MockContextMockRecorder) InitiateFileTransferToGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateFileTransferToGuest", reflect.TypeOf((*MockContext)(nil).InitiateFileTransferToGuest), ctx, r, req)
}

// InstallHostPatchV2_Task mocks base method
func (m *MockContext) InstallHostPatchV2_Task(ctx context.Context, r soap.RoundTripper, req *types.InstallHostPatchV2_Task) (*types.InstallHostPatchV2_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InstallHostPatchV2_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InstallHostPatchV2_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallHostPatchV2_Task indicates an expected call of InstallHostPatchV2_Task
func (mr *MockContextMockRecorder) InstallHostPatchV2_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHostPatchV2_Task", reflect.TypeOf((*MockContext)(nil).InstallHostPatchV2_Task), ctx, r, req)
}

// InstallHostPatch_Task mocks base method
func (m *MockContext) InstallHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.InstallHostPatch_Task) (*types.InstallHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InstallHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InstallHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallHostPatch_Task indicates an expected call of InstallHostPatch_Task
func (mr *MockContextMockRecorder) InstallHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHostPatch_Task", reflect.TypeOf((*MockContext)(nil).InstallHostPatch_Task), ctx, r, req)
}

// InstallIoFilter_Task mocks base method
func (m *MockContext) InstallIoFilter_Task(ctx context.Context, r soap.RoundTripper, req *types.InstallIoFilter_Task) (*types.InstallIoFilter_TaskResponse, error) {
	ret := m.ctrl.Call(m, "InstallIoFilter_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.InstallIoFilter_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallIoFilter_Task indicates an expected call of InstallIoFilter_Task
func (mr *MockContextMockRecorder) InstallIoFilter_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallIoFilter_Task", reflect.TypeOf((*MockContext)(nil).InstallIoFilter_Task), ctx, r, req)
}

// InstallServerCertificate mocks base method
func (m *MockContext) InstallServerCertificate(ctx context.Context, r soap.RoundTripper, req *types.InstallServerCertificate) (*types.InstallServerCertificateResponse, error) {
	ret := m.ctrl.Call(m, "InstallServerCertificate", ctx, r, req)
	ret0, _ := ret[0].(*types.InstallServerCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallServerCertificate indicates an expected call of InstallServerCertificate
func (mr *MockContextMockRecorder) InstallServerCertificate(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallServerCertificate", reflect.TypeOf((*MockContext)(nil).InstallServerCertificate), ctx, r, req)
}

// InstallSmartCardTrustAnchor mocks base method
func (m *MockContext) InstallSmartCardTrustAnchor(ctx context.Context, r soap.RoundTripper, req *types.InstallSmartCardTrustAnchor) (*types.InstallSmartCardTrustAnchorResponse, error) {
	ret := m.ctrl.Call(m, "InstallSmartCardTrustAnchor", ctx, r, req)
	ret0, _ := ret[0].(*types.InstallSmartCardTrustAnchorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallSmartCardTrustAnchor indicates an expected call of InstallSmartCardTrustAnchor
func (mr *MockContextMockRecorder) InstallSmartCardTrustAnchor(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallSmartCardTrustAnchor", reflect.TypeOf((*MockContext)(nil).InstallSmartCardTrustAnchor), ctx, r, req)
}

// IsSharedGraphicsActive mocks base method
func (m *MockContext) IsSharedGraphicsActive(ctx context.Context, r soap.RoundTripper, req *types.IsSharedGraphicsActive) (*types.IsSharedGraphicsActiveResponse, error) {
	ret := m.ctrl.Call(m, "IsSharedGraphicsActive", ctx, r, req)
	ret0, _ := ret[0].(*types.IsSharedGraphicsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSharedGraphicsActive indicates an expected call of IsSharedGraphicsActive
func (mr *MockContextMockRecorder) IsSharedGraphicsActive(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSharedGraphicsActive", reflect.TypeOf((*MockContext)(nil).IsSharedGraphicsActive), ctx, r, req)
}

// JoinDomainWithCAM_Task mocks base method
func (m *MockContext) JoinDomainWithCAM_Task(ctx context.Context, r soap.RoundTripper, req *types.JoinDomainWithCAM_Task) (*types.JoinDomainWithCAM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "JoinDomainWithCAM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.JoinDomainWithCAM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinDomainWithCAM_Task indicates an expected call of JoinDomainWithCAM_Task
func (mr *MockContextMockRecorder) JoinDomainWithCAM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinDomainWithCAM_Task", reflect.TypeOf((*MockContext)(nil).JoinDomainWithCAM_Task), ctx, r, req)
}

// JoinDomain_Task mocks base method
func (m *MockContext) JoinDomain_Task(ctx context.Context, r soap.RoundTripper, req *types.JoinDomain_Task) (*types.JoinDomain_TaskResponse, error) {
	ret := m.ctrl.Call(m, "JoinDomain_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.JoinDomain_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinDomain_Task indicates an expected call of JoinDomain_Task
func (mr *MockContextMockRecorder) JoinDomain_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinDomain_Task", reflect.TypeOf((*MockContext)(nil).JoinDomain_Task), ctx, r, req)
}

// LeaveCurrentDomain_Task mocks base method
func (m *MockContext) LeaveCurrentDomain_Task(ctx context.Context, r soap.RoundTripper, req *types.LeaveCurrentDomain_Task) (*types.LeaveCurrentDomain_TaskResponse, error) {
	ret := m.ctrl.Call(m, "LeaveCurrentDomain_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.LeaveCurrentDomain_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveCurrentDomain_Task indicates an expected call of LeaveCurrentDomain_Task
func (mr *MockContextMockRecorder) LeaveCurrentDomain_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveCurrentDomain_Task", reflect.TypeOf((*MockContext)(nil).LeaveCurrentDomain_Task), ctx, r, req)
}

// ListCACertificateRevocationLists mocks base method
func (m *MockContext) ListCACertificateRevocationLists(ctx context.Context, r soap.RoundTripper, req *types.ListCACertificateRevocationLists) (*types.ListCACertificateRevocationListsResponse, error) {
	ret := m.ctrl.Call(m, "ListCACertificateRevocationLists", ctx, r, req)
	ret0, _ := ret[0].(*types.ListCACertificateRevocationListsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCACertificateRevocationLists indicates an expected call of ListCACertificateRevocationLists
func (mr *MockContextMockRecorder) ListCACertificateRevocationLists(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificateRevocationLists", reflect.TypeOf((*MockContext)(nil).ListCACertificateRevocationLists), ctx, r, req)
}

// ListCACertificates mocks base method
func (m *MockContext) ListCACertificates(ctx context.Context, r soap.RoundTripper, req *types.ListCACertificates) (*types.ListCACertificatesResponse, error) {
	ret := m.ctrl.Call(m, "ListCACertificates", ctx, r, req)
	ret0, _ := ret[0].(*types.ListCACertificatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCACertificates indicates an expected call of ListCACertificates
func (mr *MockContextMockRecorder) ListCACertificates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCACertificates", reflect.TypeOf((*MockContext)(nil).ListCACertificates), ctx, r, req)
}

// ListFilesInGuest mocks base method
func (m *MockContext) ListFilesInGuest(ctx context.Context, r soap.RoundTripper, req *types.ListFilesInGuest) (*types.ListFilesInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ListFilesInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ListFilesInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesInGuest indicates an expected call of ListFilesInGuest
func (mr *MockContextMockRecorder) ListFilesInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesInGuest", reflect.TypeOf((*MockContext)(nil).ListFilesInGuest), ctx, r, req)
}

// ListGuestAliases mocks base method
func (m *MockContext) ListGuestAliases(ctx context.Context, r soap.RoundTripper, req *types.ListGuestAliases) (*types.ListGuestAliasesResponse, error) {
	ret := m.ctrl.Call(m, "ListGuestAliases", ctx, r, req)
	ret0, _ := ret[0].(*types.ListGuestAliasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGuestAliases indicates an expected call of ListGuestAliases
func (mr *MockContextMockRecorder) ListGuestAliases(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGuestAliases", reflect.TypeOf((*MockContext)(nil).ListGuestAliases), ctx, r, req)
}

// ListGuestMappedAliases mocks base method
func (m *MockContext) ListGuestMappedAliases(ctx context.Context, r soap.RoundTripper, req *types.ListGuestMappedAliases) (*types.ListGuestMappedAliasesResponse, error) {
	ret := m.ctrl.Call(m, "ListGuestMappedAliases", ctx, r, req)
	ret0, _ := ret[0].(*types.ListGuestMappedAliasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGuestMappedAliases indicates an expected call of ListGuestMappedAliases
func (mr *MockContextMockRecorder) ListGuestMappedAliases(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGuestMappedAliases", reflect.TypeOf((*MockContext)(nil).ListGuestMappedAliases), ctx, r, req)
}

// ListKeys mocks base method
func (m *MockContext) ListKeys(ctx context.Context, r soap.RoundTripper, req *types.ListKeys) (*types.ListKeysResponse, error) {
	ret := m.ctrl.Call(m, "ListKeys", ctx, r, req)
	ret0, _ := ret[0].(*types.ListKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockContextMockRecorder) ListKeys(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockContext)(nil).ListKeys), ctx, r, req)
}

// ListKmipServers mocks base method
func (m *MockContext) ListKmipServers(ctx context.Context, r soap.RoundTripper, req *types.ListKmipServers) (*types.ListKmipServersResponse, error) {
	ret := m.ctrl.Call(m, "ListKmipServers", ctx, r, req)
	ret0, _ := ret[0].(*types.ListKmipServersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKmipServers indicates an expected call of ListKmipServers
func (mr *MockContextMockRecorder) ListKmipServers(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKmipServers", reflect.TypeOf((*MockContext)(nil).ListKmipServers), ctx, r, req)
}

// ListProcessesInGuest mocks base method
func (m *MockContext) ListProcessesInGuest(ctx context.Context, r soap.RoundTripper, req *types.ListProcessesInGuest) (*types.ListProcessesInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ListProcessesInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ListProcessesInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcessesInGuest indicates an expected call of ListProcessesInGuest
func (mr *MockContextMockRecorder) ListProcessesInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcessesInGuest", reflect.TypeOf((*MockContext)(nil).ListProcessesInGuest), ctx, r, req)
}

// ListRegistryKeysInGuest mocks base method
func (m *MockContext) ListRegistryKeysInGuest(ctx context.Context, r soap.RoundTripper, req *types.ListRegistryKeysInGuest) (*types.ListRegistryKeysInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ListRegistryKeysInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ListRegistryKeysInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistryKeysInGuest indicates an expected call of ListRegistryKeysInGuest
func (mr *MockContextMockRecorder) ListRegistryKeysInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistryKeysInGuest", reflect.TypeOf((*MockContext)(nil).ListRegistryKeysInGuest), ctx, r, req)
}

// ListRegistryValuesInGuest mocks base method
func (m *MockContext) ListRegistryValuesInGuest(ctx context.Context, r soap.RoundTripper, req *types.ListRegistryValuesInGuest) (*types.ListRegistryValuesInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ListRegistryValuesInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ListRegistryValuesInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistryValuesInGuest indicates an expected call of ListRegistryValuesInGuest
func (mr *MockContextMockRecorder) ListRegistryValuesInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistryValuesInGuest", reflect.TypeOf((*MockContext)(nil).ListRegistryValuesInGuest), ctx, r, req)
}

// ListSmartCardTrustAnchors mocks base method
func (m *MockContext) ListSmartCardTrustAnchors(ctx context.Context, r soap.RoundTripper, req *types.ListSmartCardTrustAnchors) (*types.ListSmartCardTrustAnchorsResponse, error) {
	ret := m.ctrl.Call(m, "ListSmartCardTrustAnchors", ctx, r, req)
	ret0, _ := ret[0].(*types.ListSmartCardTrustAnchorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSmartCardTrustAnchors indicates an expected call of ListSmartCardTrustAnchors
func (mr *MockContextMockRecorder) ListSmartCardTrustAnchors(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSmartCardTrustAnchors", reflect.TypeOf((*MockContext)(nil).ListSmartCardTrustAnchors), ctx, r, req)
}

// ListTagsAttachedToVStorageObject mocks base method
func (m *MockContext) ListTagsAttachedToVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.ListTagsAttachedToVStorageObject) (*types.ListTagsAttachedToVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "ListTagsAttachedToVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.ListTagsAttachedToVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsAttachedToVStorageObject indicates an expected call of ListTagsAttachedToVStorageObject
func (mr *MockContextMockRecorder) ListTagsAttachedToVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsAttachedToVStorageObject", reflect.TypeOf((*MockContext)(nil).ListTagsAttachedToVStorageObject), ctx, r, req)
}

// ListVStorageObject mocks base method
func (m *MockContext) ListVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.ListVStorageObject) (*types.ListVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "ListVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.ListVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVStorageObject indicates an expected call of ListVStorageObject
func (mr *MockContextMockRecorder) ListVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVStorageObject", reflect.TypeOf((*MockContext)(nil).ListVStorageObject), ctx, r, req)
}

// ListVStorageObjectsAttachedToTag mocks base method
func (m *MockContext) ListVStorageObjectsAttachedToTag(ctx context.Context, r soap.RoundTripper, req *types.ListVStorageObjectsAttachedToTag) (*types.ListVStorageObjectsAttachedToTagResponse, error) {
	ret := m.ctrl.Call(m, "ListVStorageObjectsAttachedToTag", ctx, r, req)
	ret0, _ := ret[0].(*types.ListVStorageObjectsAttachedToTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVStorageObjectsAttachedToTag indicates an expected call of ListVStorageObjectsAttachedToTag
func (mr *MockContextMockRecorder) ListVStorageObjectsAttachedToTag(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVStorageObjectsAttachedToTag", reflect.TypeOf((*MockContext)(nil).ListVStorageObjectsAttachedToTag), ctx, r, req)
}

// LogUserEvent mocks base method
func (m *MockContext) LogUserEvent(ctx context.Context, r soap.RoundTripper, req *types.LogUserEvent) (*types.LogUserEventResponse, error) {
	ret := m.ctrl.Call(m, "LogUserEvent", ctx, r, req)
	ret0, _ := ret[0].(*types.LogUserEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogUserEvent indicates an expected call of LogUserEvent
func (mr *MockContextMockRecorder) LogUserEvent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogUserEvent", reflect.TypeOf((*MockContext)(nil).LogUserEvent), ctx, r, req)
}

// Login mocks base method
func (m *MockContext) Login(ctx context.Context, r soap.RoundTripper, req *types.Login) (*types.LoginResponse, error) {
	ret := m.ctrl.Call(m, "Login", ctx, r, req)
	ret0, _ := ret[0].(*types.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockContextMockRecorder) Login(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockContext)(nil).Login), ctx, r, req)
}

// LoginBySSPI mocks base method
func (m *MockContext) LoginBySSPI(ctx context.Context, r soap.RoundTripper, req *types.LoginBySSPI) (*types.LoginBySSPIResponse, error) {
	ret := m.ctrl.Call(m, "LoginBySSPI", ctx, r, req)
	ret0, _ := ret[0].(*types.LoginBySSPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginBySSPI indicates an expected call of LoginBySSPI
func (mr *MockContextMockRecorder) LoginBySSPI(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginBySSPI", reflect.TypeOf((*MockContext)(nil).LoginBySSPI), ctx, r, req)
}

// LoginByToken mocks base method
func (m *MockContext) LoginByToken(ctx context.Context, r soap.RoundTripper, req *types.LoginByToken) (*types.LoginByTokenResponse, error) {
	ret := m.ctrl.Call(m, "LoginByToken", ctx, r, req)
	ret0, _ := ret[0].(*types.LoginByTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByToken indicates an expected call of LoginByToken
func (mr *MockContextMockRecorder) LoginByToken(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByToken", reflect.TypeOf((*MockContext)(nil).LoginByToken), ctx, r, req)
}

// LoginExtensionByCertificate mocks base method
func (m *MockContext) LoginExtensionByCertificate(ctx context.Context, r soap.RoundTripper, req *types.LoginExtensionByCertificate) (*types.LoginExtensionByCertificateResponse, error) {
	ret := m.ctrl.Call(m, "LoginExtensionByCertificate", ctx, r, req)
	ret0, _ := ret[0].(*types.LoginExtensionByCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginExtensionByCertificate indicates an expected call of LoginExtensionByCertificate
func (mr *MockContextMockRecorder) LoginExtensionByCertificate(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginExtensionByCertificate", reflect.TypeOf((*MockContext)(nil).LoginExtensionByCertificate), ctx, r, req)
}

// LoginExtensionBySubjectName mocks base method
func (m *MockContext) LoginExtensionBySubjectName(ctx context.Context, r soap.RoundTripper, req *types.LoginExtensionBySubjectName) (*types.LoginExtensionBySubjectNameResponse, error) {
	ret := m.ctrl.Call(m, "LoginExtensionBySubjectName", ctx, r, req)
	ret0, _ := ret[0].(*types.LoginExtensionBySubjectNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginExtensionBySubjectName indicates an expected call of LoginExtensionBySubjectName
func (mr *MockContextMockRecorder) LoginExtensionBySubjectName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginExtensionBySubjectName", reflect.TypeOf((*MockContext)(nil).LoginExtensionBySubjectName), ctx, r, req)
}

// Logout mocks base method
func (m *MockContext) Logout(ctx context.Context, r soap.RoundTripper, req *types.Logout) (*types.LogoutResponse, error) {
	ret := m.ctrl.Call(m, "Logout", ctx, r, req)
	ret0, _ := ret[0].(*types.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout
func (mr *MockContextMockRecorder) Logout(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockContext)(nil).Logout), ctx, r, req)
}

// LookupDvPortGroup mocks base method
func (m *MockContext) LookupDvPortGroup(ctx context.Context, r soap.RoundTripper, req *types.LookupDvPortGroup) (*types.LookupDvPortGroupResponse, error) {
	ret := m.ctrl.Call(m, "LookupDvPortGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.LookupDvPortGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupDvPortGroup indicates an expected call of LookupDvPortGroup
func (mr *MockContextMockRecorder) LookupDvPortGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupDvPortGroup", reflect.TypeOf((*MockContext)(nil).LookupDvPortGroup), ctx, r, req)
}

// LookupVmOverheadMemory mocks base method
func (m *MockContext) LookupVmOverheadMemory(ctx context.Context, r soap.RoundTripper, req *types.LookupVmOverheadMemory) (*types.LookupVmOverheadMemoryResponse, error) {
	ret := m.ctrl.Call(m, "LookupVmOverheadMemory", ctx, r, req)
	ret0, _ := ret[0].(*types.LookupVmOverheadMemoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupVmOverheadMemory indicates an expected call of LookupVmOverheadMemory
func (mr *MockContextMockRecorder) LookupVmOverheadMemory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupVmOverheadMemory", reflect.TypeOf((*MockContext)(nil).LookupVmOverheadMemory), ctx, r, req)
}

// MakeDirectory mocks base method
func (m *MockContext) MakeDirectory(ctx context.Context, r soap.RoundTripper, req *types.MakeDirectory) (*types.MakeDirectoryResponse, error) {
	ret := m.ctrl.Call(m, "MakeDirectory", ctx, r, req)
	ret0, _ := ret[0].(*types.MakeDirectoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeDirectory indicates an expected call of MakeDirectory
func (mr *MockContextMockRecorder) MakeDirectory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectory", reflect.TypeOf((*MockContext)(nil).MakeDirectory), ctx, r, req)
}

// MakeDirectoryInGuest mocks base method
func (m *MockContext) MakeDirectoryInGuest(ctx context.Context, r soap.RoundTripper, req *types.MakeDirectoryInGuest) (*types.MakeDirectoryInGuestResponse, error) {
	ret := m.ctrl.Call(m, "MakeDirectoryInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.MakeDirectoryInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeDirectoryInGuest indicates an expected call of MakeDirectoryInGuest
func (mr *MockContextMockRecorder) MakeDirectoryInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectoryInGuest", reflect.TypeOf((*MockContext)(nil).MakeDirectoryInGuest), ctx, r, req)
}

// MakePrimaryVM_Task mocks base method
func (m *MockContext) MakePrimaryVM_Task(ctx context.Context, r soap.RoundTripper, req *types.MakePrimaryVM_Task) (*types.MakePrimaryVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MakePrimaryVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MakePrimaryVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePrimaryVM_Task indicates an expected call of MakePrimaryVM_Task
func (mr *MockContextMockRecorder) MakePrimaryVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePrimaryVM_Task", reflect.TypeOf((*MockContext)(nil).MakePrimaryVM_Task), ctx, r, req)
}

// MarkAsLocal_Task mocks base method
func (m *MockContext) MarkAsLocal_Task(ctx context.Context, r soap.RoundTripper, req *types.MarkAsLocal_Task) (*types.MarkAsLocal_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsLocal_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsLocal_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsLocal_Task indicates an expected call of MarkAsLocal_Task
func (mr *MockContextMockRecorder) MarkAsLocal_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsLocal_Task", reflect.TypeOf((*MockContext)(nil).MarkAsLocal_Task), ctx, r, req)
}

// MarkAsNonLocal_Task mocks base method
func (m *MockContext) MarkAsNonLocal_Task(ctx context.Context, r soap.RoundTripper, req *types.MarkAsNonLocal_Task) (*types.MarkAsNonLocal_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsNonLocal_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsNonLocal_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsNonLocal_Task indicates an expected call of MarkAsNonLocal_Task
func (mr *MockContextMockRecorder) MarkAsNonLocal_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsNonLocal_Task", reflect.TypeOf((*MockContext)(nil).MarkAsNonLocal_Task), ctx, r, req)
}

// MarkAsNonSsd_Task mocks base method
func (m *MockContext) MarkAsNonSsd_Task(ctx context.Context, r soap.RoundTripper, req *types.MarkAsNonSsd_Task) (*types.MarkAsNonSsd_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsNonSsd_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsNonSsd_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsNonSsd_Task indicates an expected call of MarkAsNonSsd_Task
func (mr *MockContextMockRecorder) MarkAsNonSsd_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsNonSsd_Task", reflect.TypeOf((*MockContext)(nil).MarkAsNonSsd_Task), ctx, r, req)
}

// MarkAsSsd_Task mocks base method
func (m *MockContext) MarkAsSsd_Task(ctx context.Context, r soap.RoundTripper, req *types.MarkAsSsd_Task) (*types.MarkAsSsd_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsSsd_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsSsd_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsSsd_Task indicates an expected call of MarkAsSsd_Task
func (mr *MockContextMockRecorder) MarkAsSsd_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSsd_Task", reflect.TypeOf((*MockContext)(nil).MarkAsSsd_Task), ctx, r, req)
}

// MarkAsTemplate mocks base method
func (m *MockContext) MarkAsTemplate(ctx context.Context, r soap.RoundTripper, req *types.MarkAsTemplate) (*types.MarkAsTemplateResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsTemplate", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsTemplate indicates an expected call of MarkAsTemplate
func (mr *MockContextMockRecorder) MarkAsTemplate(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsTemplate", reflect.TypeOf((*MockContext)(nil).MarkAsTemplate), ctx, r, req)
}

// MarkAsVirtualMachine mocks base method
func (m *MockContext) MarkAsVirtualMachine(ctx context.Context, r soap.RoundTripper, req *types.MarkAsVirtualMachine) (*types.MarkAsVirtualMachineResponse, error) {
	ret := m.ctrl.Call(m, "MarkAsVirtualMachine", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkAsVirtualMachineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAsVirtualMachine indicates an expected call of MarkAsVirtualMachine
func (mr *MockContextMockRecorder) MarkAsVirtualMachine(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsVirtualMachine", reflect.TypeOf((*MockContext)(nil).MarkAsVirtualMachine), ctx, r, req)
}

// MarkDefault mocks base method
func (m *MockContext) MarkDefault(ctx context.Context, r soap.RoundTripper, req *types.MarkDefault) (*types.MarkDefaultResponse, error) {
	ret := m.ctrl.Call(m, "MarkDefault", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkDefaultResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkDefault indicates an expected call of MarkDefault
func (mr *MockContextMockRecorder) MarkDefault(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDefault", reflect.TypeOf((*MockContext)(nil).MarkDefault), ctx, r, req)
}

// MarkForRemoval mocks base method
func (m *MockContext) MarkForRemoval(ctx context.Context, r soap.RoundTripper, req *types.MarkForRemoval) (*types.MarkForRemovalResponse, error) {
	ret := m.ctrl.Call(m, "MarkForRemoval", ctx, r, req)
	ret0, _ := ret[0].(*types.MarkForRemovalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkForRemoval indicates an expected call of MarkForRemoval
func (mr *MockContextMockRecorder) MarkForRemoval(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkForRemoval", reflect.TypeOf((*MockContext)(nil).MarkForRemoval), ctx, r, req)
}

// MergeDvs_Task mocks base method
func (m *MockContext) MergeDvs_Task(ctx context.Context, r soap.RoundTripper, req *types.MergeDvs_Task) (*types.MergeDvs_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MergeDvs_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MergeDvs_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeDvs_Task indicates an expected call of MergeDvs_Task
func (mr *MockContextMockRecorder) MergeDvs_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeDvs_Task", reflect.TypeOf((*MockContext)(nil).MergeDvs_Task), ctx, r, req)
}

// MergePermissions mocks base method
func (m *MockContext) MergePermissions(ctx context.Context, r soap.RoundTripper, req *types.MergePermissions) (*types.MergePermissionsResponse, error) {
	ret := m.ctrl.Call(m, "MergePermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.MergePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergePermissions indicates an expected call of MergePermissions
func (mr *MockContextMockRecorder) MergePermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePermissions", reflect.TypeOf((*MockContext)(nil).MergePermissions), ctx, r, req)
}

// MigrateVM_Task mocks base method
func (m *MockContext) MigrateVM_Task(ctx context.Context, r soap.RoundTripper, req *types.MigrateVM_Task) (*types.MigrateVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MigrateVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MigrateVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateVM_Task indicates an expected call of MigrateVM_Task
func (mr *MockContextMockRecorder) MigrateVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateVM_Task", reflect.TypeOf((*MockContext)(nil).MigrateVM_Task), ctx, r, req)
}

// ModifyListView mocks base method
func (m *MockContext) ModifyListView(ctx context.Context, r soap.RoundTripper, req *types.ModifyListView) (*types.ModifyListViewResponse, error) {
	ret := m.ctrl.Call(m, "ModifyListView", ctx, r, req)
	ret0, _ := ret[0].(*types.ModifyListViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyListView indicates an expected call of ModifyListView
func (mr *MockContextMockRecorder) ModifyListView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyListView", reflect.TypeOf((*MockContext)(nil).ModifyListView), ctx, r, req)
}

// MountToolsInstaller mocks base method
func (m *MockContext) MountToolsInstaller(ctx context.Context, r soap.RoundTripper, req *types.MountToolsInstaller) (*types.MountToolsInstallerResponse, error) {
	ret := m.ctrl.Call(m, "MountToolsInstaller", ctx, r, req)
	ret0, _ := ret[0].(*types.MountToolsInstallerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountToolsInstaller indicates an expected call of MountToolsInstaller
func (mr *MockContextMockRecorder) MountToolsInstaller(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountToolsInstaller", reflect.TypeOf((*MockContext)(nil).MountToolsInstaller), ctx, r, req)
}

// MountVffsVolume mocks base method
func (m *MockContext) MountVffsVolume(ctx context.Context, r soap.RoundTripper, req *types.MountVffsVolume) (*types.MountVffsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "MountVffsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.MountVffsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountVffsVolume indicates an expected call of MountVffsVolume
func (mr *MockContextMockRecorder) MountVffsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountVffsVolume", reflect.TypeOf((*MockContext)(nil).MountVffsVolume), ctx, r, req)
}

// MountVmfsVolume mocks base method
func (m *MockContext) MountVmfsVolume(ctx context.Context, r soap.RoundTripper, req *types.MountVmfsVolume) (*types.MountVmfsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "MountVmfsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.MountVmfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountVmfsVolume indicates an expected call of MountVmfsVolume
func (mr *MockContextMockRecorder) MountVmfsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountVmfsVolume", reflect.TypeOf((*MockContext)(nil).MountVmfsVolume), ctx, r, req)
}

// MountVmfsVolumeEx_Task mocks base method
func (m *MockContext) MountVmfsVolumeEx_Task(ctx context.Context, r soap.RoundTripper, req *types.MountVmfsVolumeEx_Task) (*types.MountVmfsVolumeEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MountVmfsVolumeEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MountVmfsVolumeEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MountVmfsVolumeEx_Task indicates an expected call of MountVmfsVolumeEx_Task
func (mr *MockContextMockRecorder) MountVmfsVolumeEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountVmfsVolumeEx_Task", reflect.TypeOf((*MockContext)(nil).MountVmfsVolumeEx_Task), ctx, r, req)
}

// MoveDVPort_Task mocks base method
func (m *MockContext) MoveDVPort_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveDVPort_Task) (*types.MoveDVPort_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveDVPort_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveDVPort_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveDVPort_Task indicates an expected call of MoveDVPort_Task
func (mr *MockContextMockRecorder) MoveDVPort_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDVPort_Task", reflect.TypeOf((*MockContext)(nil).MoveDVPort_Task), ctx, r, req)
}

// MoveDatastoreFile_Task mocks base method
func (m *MockContext) MoveDatastoreFile_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveDatastoreFile_Task) (*types.MoveDatastoreFile_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveDatastoreFile_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveDatastoreFile_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveDatastoreFile_Task indicates an expected call of MoveDatastoreFile_Task
func (mr *MockContextMockRecorder) MoveDatastoreFile_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDatastoreFile_Task", reflect.TypeOf((*MockContext)(nil).MoveDatastoreFile_Task), ctx, r, req)
}

// MoveDirectoryInGuest mocks base method
func (m *MockContext) MoveDirectoryInGuest(ctx context.Context, r soap.RoundTripper, req *types.MoveDirectoryInGuest) (*types.MoveDirectoryInGuestResponse, error) {
	ret := m.ctrl.Call(m, "MoveDirectoryInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveDirectoryInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveDirectoryInGuest indicates an expected call of MoveDirectoryInGuest
func (mr *MockContextMockRecorder) MoveDirectoryInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDirectoryInGuest", reflect.TypeOf((*MockContext)(nil).MoveDirectoryInGuest), ctx, r, req)
}

// MoveFileInGuest mocks base method
func (m *MockContext) MoveFileInGuest(ctx context.Context, r soap.RoundTripper, req *types.MoveFileInGuest) (*types.MoveFileInGuestResponse, error) {
	ret := m.ctrl.Call(m, "MoveFileInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveFileInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveFileInGuest indicates an expected call of MoveFileInGuest
func (mr *MockContextMockRecorder) MoveFileInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFileInGuest", reflect.TypeOf((*MockContext)(nil).MoveFileInGuest), ctx, r, req)
}

// MoveHostInto_Task mocks base method
func (m *MockContext) MoveHostInto_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveHostInto_Task) (*types.MoveHostInto_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveHostInto_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveHostInto_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveHostInto_Task indicates an expected call of MoveHostInto_Task
func (mr *MockContextMockRecorder) MoveHostInto_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveHostInto_Task", reflect.TypeOf((*MockContext)(nil).MoveHostInto_Task), ctx, r, req)
}

// MoveIntoFolder_Task mocks base method
func (m *MockContext) MoveIntoFolder_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveIntoFolder_Task) (*types.MoveIntoFolder_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveIntoFolder_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveIntoFolder_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveIntoFolder_Task indicates an expected call of MoveIntoFolder_Task
func (mr *MockContextMockRecorder) MoveIntoFolder_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveIntoFolder_Task", reflect.TypeOf((*MockContext)(nil).MoveIntoFolder_Task), ctx, r, req)
}

// MoveIntoResourcePool mocks base method
func (m *MockContext) MoveIntoResourcePool(ctx context.Context, r soap.RoundTripper, req *types.MoveIntoResourcePool) (*types.MoveIntoResourcePoolResponse, error) {
	ret := m.ctrl.Call(m, "MoveIntoResourcePool", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveIntoResourcePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveIntoResourcePool indicates an expected call of MoveIntoResourcePool
func (mr *MockContextMockRecorder) MoveIntoResourcePool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveIntoResourcePool", reflect.TypeOf((*MockContext)(nil).MoveIntoResourcePool), ctx, r, req)
}

// MoveInto_Task mocks base method
func (m *MockContext) MoveInto_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveInto_Task) (*types.MoveInto_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveInto_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveInto_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveInto_Task indicates an expected call of MoveInto_Task
func (mr *MockContextMockRecorder) MoveInto_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveInto_Task", reflect.TypeOf((*MockContext)(nil).MoveInto_Task), ctx, r, req)
}

// MoveVirtualDisk_Task mocks base method
func (m *MockContext) MoveVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.MoveVirtualDisk_Task) (*types.MoveVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "MoveVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.MoveVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveVirtualDisk_Task indicates an expected call of MoveVirtualDisk_Task
func (mr *MockContextMockRecorder) MoveVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).MoveVirtualDisk_Task), ctx, r, req)
}

// OpenInventoryViewFolder mocks base method
func (m *MockContext) OpenInventoryViewFolder(ctx context.Context, r soap.RoundTripper, req *types.OpenInventoryViewFolder) (*types.OpenInventoryViewFolderResponse, error) {
	ret := m.ctrl.Call(m, "OpenInventoryViewFolder", ctx, r, req)
	ret0, _ := ret[0].(*types.OpenInventoryViewFolderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenInventoryViewFolder indicates an expected call of OpenInventoryViewFolder
func (mr *MockContextMockRecorder) OpenInventoryViewFolder(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInventoryViewFolder", reflect.TypeOf((*MockContext)(nil).OpenInventoryViewFolder), ctx, r, req)
}

// OverwriteCustomizationSpec mocks base method
func (m *MockContext) OverwriteCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.OverwriteCustomizationSpec) (*types.OverwriteCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "OverwriteCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.OverwriteCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OverwriteCustomizationSpec indicates an expected call of OverwriteCustomizationSpec
func (mr *MockContextMockRecorder) OverwriteCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverwriteCustomizationSpec", reflect.TypeOf((*MockContext)(nil).OverwriteCustomizationSpec), ctx, r, req)
}

// ParseDescriptor mocks base method
func (m *MockContext) ParseDescriptor(ctx context.Context, r soap.RoundTripper, req *types.ParseDescriptor) (*types.ParseDescriptorResponse, error) {
	ret := m.ctrl.Call(m, "ParseDescriptor", ctx, r, req)
	ret0, _ := ret[0].(*types.ParseDescriptorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseDescriptor indicates an expected call of ParseDescriptor
func (mr *MockContextMockRecorder) ParseDescriptor(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDescriptor", reflect.TypeOf((*MockContext)(nil).ParseDescriptor), ctx, r, req)
}

// PerformDvsProductSpecOperation_Task mocks base method
func (m *MockContext) PerformDvsProductSpecOperation_Task(ctx context.Context, r soap.RoundTripper, req *types.PerformDvsProductSpecOperation_Task) (*types.PerformDvsProductSpecOperation_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PerformDvsProductSpecOperation_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PerformDvsProductSpecOperation_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformDvsProductSpecOperation_Task indicates an expected call of PerformDvsProductSpecOperation_Task
func (mr *MockContextMockRecorder) PerformDvsProductSpecOperation_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformDvsProductSpecOperation_Task", reflect.TypeOf((*MockContext)(nil).PerformDvsProductSpecOperation_Task), ctx, r, req)
}

// PerformVsanUpgradePreflightCheck mocks base method
func (m *MockContext) PerformVsanUpgradePreflightCheck(ctx context.Context, r soap.RoundTripper, req *types.PerformVsanUpgradePreflightCheck) (*types.PerformVsanUpgradePreflightCheckResponse, error) {
	ret := m.ctrl.Call(m, "PerformVsanUpgradePreflightCheck", ctx, r, req)
	ret0, _ := ret[0].(*types.PerformVsanUpgradePreflightCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformVsanUpgradePreflightCheck indicates an expected call of PerformVsanUpgradePreflightCheck
func (mr *MockContextMockRecorder) PerformVsanUpgradePreflightCheck(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformVsanUpgradePreflightCheck", reflect.TypeOf((*MockContext)(nil).PerformVsanUpgradePreflightCheck), ctx, r, req)
}

// PerformVsanUpgrade_Task mocks base method
func (m *MockContext) PerformVsanUpgrade_Task(ctx context.Context, r soap.RoundTripper, req *types.PerformVsanUpgrade_Task) (*types.PerformVsanUpgrade_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PerformVsanUpgrade_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PerformVsanUpgrade_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformVsanUpgrade_Task indicates an expected call of PerformVsanUpgrade_Task
func (mr *MockContextMockRecorder) PerformVsanUpgrade_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformVsanUpgrade_Task", reflect.TypeOf((*MockContext)(nil).PerformVsanUpgrade_Task), ctx, r, req)
}

// PlaceVm mocks base method
func (m *MockContext) PlaceVm(ctx context.Context, r soap.RoundTripper, req *types.PlaceVm) (*types.PlaceVmResponse, error) {
	ret := m.ctrl.Call(m, "PlaceVm", ctx, r, req)
	ret0, _ := ret[0].(*types.PlaceVmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceVm indicates an expected call of PlaceVm
func (mr *MockContextMockRecorder) PlaceVm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceVm", reflect.TypeOf((*MockContext)(nil).PlaceVm), ctx, r, req)
}

// PostEvent mocks base method
func (m *MockContext) PostEvent(ctx context.Context, r soap.RoundTripper, req *types.PostEvent) (*types.PostEventResponse, error) {
	ret := m.ctrl.Call(m, "PostEvent", ctx, r, req)
	ret0, _ := ret[0].(*types.PostEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEvent indicates an expected call of PostEvent
func (mr *MockContextMockRecorder) PostEvent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEvent", reflect.TypeOf((*MockContext)(nil).PostEvent), ctx, r, req)
}

// PostHealthUpdates mocks base method
func (m *MockContext) PostHealthUpdates(ctx context.Context, r soap.RoundTripper, req *types.PostHealthUpdates) (*types.PostHealthUpdatesResponse, error) {
	ret := m.ctrl.Call(m, "PostHealthUpdates", ctx, r, req)
	ret0, _ := ret[0].(*types.PostHealthUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostHealthUpdates indicates an expected call of PostHealthUpdates
func (mr *MockContextMockRecorder) PostHealthUpdates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostHealthUpdates", reflect.TypeOf((*MockContext)(nil).PostHealthUpdates), ctx, r, req)
}

// PowerDownHostToStandBy_Task mocks base method
func (m *MockContext) PowerDownHostToStandBy_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerDownHostToStandBy_Task) (*types.PowerDownHostToStandBy_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerDownHostToStandBy_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerDownHostToStandBy_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerDownHostToStandBy_Task indicates an expected call of PowerDownHostToStandBy_Task
func (mr *MockContextMockRecorder) PowerDownHostToStandBy_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerDownHostToStandBy_Task", reflect.TypeOf((*MockContext)(nil).PowerDownHostToStandBy_Task), ctx, r, req)
}

// PowerOffVApp_Task mocks base method
func (m *MockContext) PowerOffVApp_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerOffVApp_Task) (*types.PowerOffVApp_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerOffVApp_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerOffVApp_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOffVApp_Task indicates an expected call of PowerOffVApp_Task
func (mr *MockContextMockRecorder) PowerOffVApp_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVApp_Task", reflect.TypeOf((*MockContext)(nil).PowerOffVApp_Task), ctx, r, req)
}

// PowerOffVM_Task mocks base method
func (m *MockContext) PowerOffVM_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerOffVM_Task) (*types.PowerOffVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerOffVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerOffVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOffVM_Task indicates an expected call of PowerOffVM_Task
func (mr *MockContextMockRecorder) PowerOffVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVM_Task", reflect.TypeOf((*MockContext)(nil).PowerOffVM_Task), ctx, r, req)
}

// PowerOnMultiVM_Task mocks base method
func (m *MockContext) PowerOnMultiVM_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerOnMultiVM_Task) (*types.PowerOnMultiVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerOnMultiVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerOnMultiVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnMultiVM_Task indicates an expected call of PowerOnMultiVM_Task
func (mr *MockContextMockRecorder) PowerOnMultiVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnMultiVM_Task", reflect.TypeOf((*MockContext)(nil).PowerOnMultiVM_Task), ctx, r, req)
}

// PowerOnVApp_Task mocks base method
func (m *MockContext) PowerOnVApp_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerOnVApp_Task) (*types.PowerOnVApp_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerOnVApp_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerOnVApp_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnVApp_Task indicates an expected call of PowerOnVApp_Task
func (mr *MockContextMockRecorder) PowerOnVApp_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVApp_Task", reflect.TypeOf((*MockContext)(nil).PowerOnVApp_Task), ctx, r, req)
}

// PowerOnVM_Task mocks base method
func (m *MockContext) PowerOnVM_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerOnVM_Task) (*types.PowerOnVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerOnVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerOnVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnVM_Task indicates an expected call of PowerOnVM_Task
func (mr *MockContextMockRecorder) PowerOnVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVM_Task", reflect.TypeOf((*MockContext)(nil).PowerOnVM_Task), ctx, r, req)
}

// PowerUpHostFromStandBy_Task mocks base method
func (m *MockContext) PowerUpHostFromStandBy_Task(ctx context.Context, r soap.RoundTripper, req *types.PowerUpHostFromStandBy_Task) (*types.PowerUpHostFromStandBy_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PowerUpHostFromStandBy_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PowerUpHostFromStandBy_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerUpHostFromStandBy_Task indicates an expected call of PowerUpHostFromStandBy_Task
func (mr *MockContextMockRecorder) PowerUpHostFromStandBy_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerUpHostFromStandBy_Task", reflect.TypeOf((*MockContext)(nil).PowerUpHostFromStandBy_Task), ctx, r, req)
}

// PrepareCrypto mocks base method
func (m *MockContext) PrepareCrypto(ctx context.Context, r soap.RoundTripper, req *types.PrepareCrypto) (*types.PrepareCryptoResponse, error) {
	ret := m.ctrl.Call(m, "PrepareCrypto", ctx, r, req)
	ret0, _ := ret[0].(*types.PrepareCryptoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareCrypto indicates an expected call of PrepareCrypto
func (mr *MockContextMockRecorder) PrepareCrypto(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareCrypto", reflect.TypeOf((*MockContext)(nil).PrepareCrypto), ctx, r, req)
}

// PromoteDisks_Task mocks base method
func (m *MockContext) PromoteDisks_Task(ctx context.Context, r soap.RoundTripper, req *types.PromoteDisks_Task) (*types.PromoteDisks_TaskResponse, error) {
	ret := m.ctrl.Call(m, "PromoteDisks_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.PromoteDisks_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteDisks_Task indicates an expected call of PromoteDisks_Task
func (mr *MockContextMockRecorder) PromoteDisks_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteDisks_Task", reflect.TypeOf((*MockContext)(nil).PromoteDisks_Task), ctx, r, req)
}

// PutUsbScanCodes mocks base method
func (m *MockContext) PutUsbScanCodes(ctx context.Context, r soap.RoundTripper, req *types.PutUsbScanCodes) (*types.PutUsbScanCodesResponse, error) {
	ret := m.ctrl.Call(m, "PutUsbScanCodes", ctx, r, req)
	ret0, _ := ret[0].(*types.PutUsbScanCodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUsbScanCodes indicates an expected call of PutUsbScanCodes
func (mr *MockContextMockRecorder) PutUsbScanCodes(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUsbScanCodes", reflect.TypeOf((*MockContext)(nil).PutUsbScanCodes), ctx, r, req)
}

// QueryAnswerFileStatus mocks base method
func (m *MockContext) QueryAnswerFileStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryAnswerFileStatus) (*types.QueryAnswerFileStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryAnswerFileStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAnswerFileStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnswerFileStatus indicates an expected call of QueryAnswerFileStatus
func (mr *MockContextMockRecorder) QueryAnswerFileStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnswerFileStatus", reflect.TypeOf((*MockContext)(nil).QueryAnswerFileStatus), ctx, r, req)
}

// QueryAssignedLicenses mocks base method
func (m *MockContext) QueryAssignedLicenses(ctx context.Context, r soap.RoundTripper, req *types.QueryAssignedLicenses) (*types.QueryAssignedLicensesResponse, error) {
	ret := m.ctrl.Call(m, "QueryAssignedLicenses", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAssignedLicensesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssignedLicenses indicates an expected call of QueryAssignedLicenses
func (mr *MockContextMockRecorder) QueryAssignedLicenses(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssignedLicenses", reflect.TypeOf((*MockContext)(nil).QueryAssignedLicenses), ctx, r, req)
}

// QueryAvailableDisksForVmfs mocks base method
func (m *MockContext) QueryAvailableDisksForVmfs(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailableDisksForVmfs) (*types.QueryAvailableDisksForVmfsResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailableDisksForVmfs", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailableDisksForVmfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailableDisksForVmfs indicates an expected call of QueryAvailableDisksForVmfs
func (mr *MockContextMockRecorder) QueryAvailableDisksForVmfs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableDisksForVmfs", reflect.TypeOf((*MockContext)(nil).QueryAvailableDisksForVmfs), ctx, r, req)
}

// QueryAvailableDvsSpec mocks base method
func (m *MockContext) QueryAvailableDvsSpec(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailableDvsSpec) (*types.QueryAvailableDvsSpecResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailableDvsSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailableDvsSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailableDvsSpec indicates an expected call of QueryAvailableDvsSpec
func (mr *MockContextMockRecorder) QueryAvailableDvsSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableDvsSpec", reflect.TypeOf((*MockContext)(nil).QueryAvailableDvsSpec), ctx, r, req)
}

// QueryAvailablePartition mocks base method
func (m *MockContext) QueryAvailablePartition(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailablePartition) (*types.QueryAvailablePartitionResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailablePartition", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailablePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailablePartition indicates an expected call of QueryAvailablePartition
func (mr *MockContextMockRecorder) QueryAvailablePartition(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailablePartition", reflect.TypeOf((*MockContext)(nil).QueryAvailablePartition), ctx, r, req)
}

// QueryAvailablePerfMetric mocks base method
func (m *MockContext) QueryAvailablePerfMetric(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailablePerfMetric) (*types.QueryAvailablePerfMetricResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailablePerfMetric", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailablePerfMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailablePerfMetric indicates an expected call of QueryAvailablePerfMetric
func (mr *MockContextMockRecorder) QueryAvailablePerfMetric(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailablePerfMetric", reflect.TypeOf((*MockContext)(nil).QueryAvailablePerfMetric), ctx, r, req)
}

// QueryAvailableSsds mocks base method
func (m *MockContext) QueryAvailableSsds(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailableSsds) (*types.QueryAvailableSsdsResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailableSsds", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailableSsdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailableSsds indicates an expected call of QueryAvailableSsds
func (mr *MockContextMockRecorder) QueryAvailableSsds(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableSsds", reflect.TypeOf((*MockContext)(nil).QueryAvailableSsds), ctx, r, req)
}

// QueryAvailableTimeZones mocks base method
func (m *MockContext) QueryAvailableTimeZones(ctx context.Context, r soap.RoundTripper, req *types.QueryAvailableTimeZones) (*types.QueryAvailableTimeZonesResponse, error) {
	ret := m.ctrl.Call(m, "QueryAvailableTimeZones", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryAvailableTimeZonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAvailableTimeZones indicates an expected call of QueryAvailableTimeZones
func (mr *MockContextMockRecorder) QueryAvailableTimeZones(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAvailableTimeZones", reflect.TypeOf((*MockContext)(nil).QueryAvailableTimeZones), ctx, r, req)
}

// QueryBootDevices mocks base method
func (m *MockContext) QueryBootDevices(ctx context.Context, r soap.RoundTripper, req *types.QueryBootDevices) (*types.QueryBootDevicesResponse, error) {
	ret := m.ctrl.Call(m, "QueryBootDevices", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryBootDevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBootDevices indicates an expected call of QueryBootDevices
func (mr *MockContextMockRecorder) QueryBootDevices(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBootDevices", reflect.TypeOf((*MockContext)(nil).QueryBootDevices), ctx, r, req)
}

// QueryBoundVnics mocks base method
func (m *MockContext) QueryBoundVnics(ctx context.Context, r soap.RoundTripper, req *types.QueryBoundVnics) (*types.QueryBoundVnicsResponse, error) {
	ret := m.ctrl.Call(m, "QueryBoundVnics", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryBoundVnicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBoundVnics indicates an expected call of QueryBoundVnics
func (mr *MockContextMockRecorder) QueryBoundVnics(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBoundVnics", reflect.TypeOf((*MockContext)(nil).QueryBoundVnics), ctx, r, req)
}

// QueryCandidateNics mocks base method
func (m *MockContext) QueryCandidateNics(ctx context.Context, r soap.RoundTripper, req *types.QueryCandidateNics) (*types.QueryCandidateNicsResponse, error) {
	ret := m.ctrl.Call(m, "QueryCandidateNics", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryCandidateNicsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCandidateNics indicates an expected call of QueryCandidateNics
func (mr *MockContextMockRecorder) QueryCandidateNics(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCandidateNics", reflect.TypeOf((*MockContext)(nil).QueryCandidateNics), ctx, r, req)
}

// QueryChangedDiskAreas mocks base method
func (m *MockContext) QueryChangedDiskAreas(ctx context.Context, r soap.RoundTripper, req *types.QueryChangedDiskAreas) (*types.QueryChangedDiskAreasResponse, error) {
	ret := m.ctrl.Call(m, "QueryChangedDiskAreas", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryChangedDiskAreasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryChangedDiskAreas indicates an expected call of QueryChangedDiskAreas
func (mr *MockContextMockRecorder) QueryChangedDiskAreas(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryChangedDiskAreas", reflect.TypeOf((*MockContext)(nil).QueryChangedDiskAreas), ctx, r, req)
}

// QueryCmmds mocks base method
func (m *MockContext) QueryCmmds(ctx context.Context, r soap.RoundTripper, req *types.QueryCmmds) (*types.QueryCmmdsResponse, error) {
	ret := m.ctrl.Call(m, "QueryCmmds", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryCmmdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCmmds indicates an expected call of QueryCmmds
func (mr *MockContextMockRecorder) QueryCmmds(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCmmds", reflect.TypeOf((*MockContext)(nil).QueryCmmds), ctx, r, req)
}

// QueryCompatibleHostForExistingDvs mocks base method
func (m *MockContext) QueryCompatibleHostForExistingDvs(ctx context.Context, r soap.RoundTripper, req *types.QueryCompatibleHostForExistingDvs) (*types.QueryCompatibleHostForExistingDvsResponse, error) {
	ret := m.ctrl.Call(m, "QueryCompatibleHostForExistingDvs", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryCompatibleHostForExistingDvsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCompatibleHostForExistingDvs indicates an expected call of QueryCompatibleHostForExistingDvs
func (mr *MockContextMockRecorder) QueryCompatibleHostForExistingDvs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCompatibleHostForExistingDvs", reflect.TypeOf((*MockContext)(nil).QueryCompatibleHostForExistingDvs), ctx, r, req)
}

// QueryCompatibleHostForNewDvs mocks base method
func (m *MockContext) QueryCompatibleHostForNewDvs(ctx context.Context, r soap.RoundTripper, req *types.QueryCompatibleHostForNewDvs) (*types.QueryCompatibleHostForNewDvsResponse, error) {
	ret := m.ctrl.Call(m, "QueryCompatibleHostForNewDvs", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryCompatibleHostForNewDvsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCompatibleHostForNewDvs indicates an expected call of QueryCompatibleHostForNewDvs
func (mr *MockContextMockRecorder) QueryCompatibleHostForNewDvs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCompatibleHostForNewDvs", reflect.TypeOf((*MockContext)(nil).QueryCompatibleHostForNewDvs), ctx, r, req)
}

// QueryComplianceStatus mocks base method
func (m *MockContext) QueryComplianceStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryComplianceStatus) (*types.QueryComplianceStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryComplianceStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryComplianceStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryComplianceStatus indicates an expected call of QueryComplianceStatus
func (mr *MockContextMockRecorder) QueryComplianceStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryComplianceStatus", reflect.TypeOf((*MockContext)(nil).QueryComplianceStatus), ctx, r, req)
}

// QueryConfigOption mocks base method
func (m *MockContext) QueryConfigOption(ctx context.Context, r soap.RoundTripper, req *types.QueryConfigOption) (*types.QueryConfigOptionResponse, error) {
	ret := m.ctrl.Call(m, "QueryConfigOption", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConfigOptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConfigOption indicates an expected call of QueryConfigOption
func (mr *MockContextMockRecorder) QueryConfigOption(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigOption", reflect.TypeOf((*MockContext)(nil).QueryConfigOption), ctx, r, req)
}

// QueryConfigOptionDescriptor mocks base method
func (m *MockContext) QueryConfigOptionDescriptor(ctx context.Context, r soap.RoundTripper, req *types.QueryConfigOptionDescriptor) (*types.QueryConfigOptionDescriptorResponse, error) {
	ret := m.ctrl.Call(m, "QueryConfigOptionDescriptor", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConfigOptionDescriptorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConfigOptionDescriptor indicates an expected call of QueryConfigOptionDescriptor
func (mr *MockContextMockRecorder) QueryConfigOptionDescriptor(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigOptionDescriptor", reflect.TypeOf((*MockContext)(nil).QueryConfigOptionDescriptor), ctx, r, req)
}

// QueryConfigOptionEx mocks base method
func (m *MockContext) QueryConfigOptionEx(ctx context.Context, r soap.RoundTripper, req *types.QueryConfigOptionEx) (*types.QueryConfigOptionExResponse, error) {
	ret := m.ctrl.Call(m, "QueryConfigOptionEx", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConfigOptionExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConfigOptionEx indicates an expected call of QueryConfigOptionEx
func (mr *MockContextMockRecorder) QueryConfigOptionEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigOptionEx", reflect.TypeOf((*MockContext)(nil).QueryConfigOptionEx), ctx, r, req)
}

// QueryConfigTarget mocks base method
func (m *MockContext) QueryConfigTarget(ctx context.Context, r soap.RoundTripper, req *types.QueryConfigTarget) (*types.QueryConfigTargetResponse, error) {
	ret := m.ctrl.Call(m, "QueryConfigTarget", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConfigTargetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConfigTarget indicates an expected call of QueryConfigTarget
func (mr *MockContextMockRecorder) QueryConfigTarget(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfigTarget", reflect.TypeOf((*MockContext)(nil).QueryConfigTarget), ctx, r, req)
}

// QueryConfiguredModuleOptionString mocks base method
func (m *MockContext) QueryConfiguredModuleOptionString(ctx context.Context, r soap.RoundTripper, req *types.QueryConfiguredModuleOptionString) (*types.QueryConfiguredModuleOptionStringResponse, error) {
	ret := m.ctrl.Call(m, "QueryConfiguredModuleOptionString", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConfiguredModuleOptionStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConfiguredModuleOptionString indicates an expected call of QueryConfiguredModuleOptionString
func (mr *MockContextMockRecorder) QueryConfiguredModuleOptionString(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConfiguredModuleOptionString", reflect.TypeOf((*MockContext)(nil).QueryConfiguredModuleOptionString), ctx, r, req)
}

// QueryConnectionInfo mocks base method
func (m *MockContext) QueryConnectionInfo(ctx context.Context, r soap.RoundTripper, req *types.QueryConnectionInfo) (*types.QueryConnectionInfoResponse, error) {
	ret := m.ctrl.Call(m, "QueryConnectionInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConnectionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConnectionInfo indicates an expected call of QueryConnectionInfo
func (mr *MockContextMockRecorder) QueryConnectionInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConnectionInfo", reflect.TypeOf((*MockContext)(nil).QueryConnectionInfo), ctx, r, req)
}

// QueryConnectionInfoViaSpec mocks base method
func (m *MockContext) QueryConnectionInfoViaSpec(ctx context.Context, r soap.RoundTripper, req *types.QueryConnectionInfoViaSpec) (*types.QueryConnectionInfoViaSpecResponse, error) {
	ret := m.ctrl.Call(m, "QueryConnectionInfoViaSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryConnectionInfoViaSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryConnectionInfoViaSpec indicates an expected call of QueryConnectionInfoViaSpec
func (mr *MockContextMockRecorder) QueryConnectionInfoViaSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryConnectionInfoViaSpec", reflect.TypeOf((*MockContext)(nil).QueryConnectionInfoViaSpec), ctx, r, req)
}

// QueryDatastorePerformanceSummary mocks base method
func (m *MockContext) QueryDatastorePerformanceSummary(ctx context.Context, r soap.RoundTripper, req *types.QueryDatastorePerformanceSummary) (*types.QueryDatastorePerformanceSummaryResponse, error) {
	ret := m.ctrl.Call(m, "QueryDatastorePerformanceSummary", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDatastorePerformanceSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDatastorePerformanceSummary indicates an expected call of QueryDatastorePerformanceSummary
func (mr *MockContextMockRecorder) QueryDatastorePerformanceSummary(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDatastorePerformanceSummary", reflect.TypeOf((*MockContext)(nil).QueryDatastorePerformanceSummary), ctx, r, req)
}

// QueryDateTime mocks base method
func (m *MockContext) QueryDateTime(ctx context.Context, r soap.RoundTripper, req *types.QueryDateTime) (*types.QueryDateTimeResponse, error) {
	ret := m.ctrl.Call(m, "QueryDateTime", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDateTime indicates an expected call of QueryDateTime
func (mr *MockContextMockRecorder) QueryDateTime(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDateTime", reflect.TypeOf((*MockContext)(nil).QueryDateTime), ctx, r, req)
}

// QueryDescriptions mocks base method
func (m *MockContext) QueryDescriptions(ctx context.Context, r soap.RoundTripper, req *types.QueryDescriptions) (*types.QueryDescriptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryDescriptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDescriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDescriptions indicates an expected call of QueryDescriptions
func (mr *MockContextMockRecorder) QueryDescriptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDescriptions", reflect.TypeOf((*MockContext)(nil).QueryDescriptions), ctx, r, req)
}

// QueryDisksForVsan mocks base method
func (m *MockContext) QueryDisksForVsan(ctx context.Context, r soap.RoundTripper, req *types.QueryDisksForVsan) (*types.QueryDisksForVsanResponse, error) {
	ret := m.ctrl.Call(m, "QueryDisksForVsan", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDisksForVsanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDisksForVsan indicates an expected call of QueryDisksForVsan
func (mr *MockContextMockRecorder) QueryDisksForVsan(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDisksForVsan", reflect.TypeOf((*MockContext)(nil).QueryDisksForVsan), ctx, r, req)
}

// QueryDisksUsingFilter mocks base method
func (m *MockContext) QueryDisksUsingFilter(ctx context.Context, r soap.RoundTripper, req *types.QueryDisksUsingFilter) (*types.QueryDisksUsingFilterResponse, error) {
	ret := m.ctrl.Call(m, "QueryDisksUsingFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDisksUsingFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDisksUsingFilter indicates an expected call of QueryDisksUsingFilter
func (mr *MockContextMockRecorder) QueryDisksUsingFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDisksUsingFilter", reflect.TypeOf((*MockContext)(nil).QueryDisksUsingFilter), ctx, r, req)
}

// QueryDvsByUuid mocks base method
func (m *MockContext) QueryDvsByUuid(ctx context.Context, r soap.RoundTripper, req *types.QueryDvsByUuid) (*types.QueryDvsByUuidResponse, error) {
	ret := m.ctrl.Call(m, "QueryDvsByUuid", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDvsByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDvsByUuid indicates an expected call of QueryDvsByUuid
func (mr *MockContextMockRecorder) QueryDvsByUuid(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDvsByUuid", reflect.TypeOf((*MockContext)(nil).QueryDvsByUuid), ctx, r, req)
}

// QueryDvsCheckCompatibility mocks base method
func (m *MockContext) QueryDvsCheckCompatibility(ctx context.Context, r soap.RoundTripper, req *types.QueryDvsCheckCompatibility) (*types.QueryDvsCheckCompatibilityResponse, error) {
	ret := m.ctrl.Call(m, "QueryDvsCheckCompatibility", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDvsCheckCompatibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDvsCheckCompatibility indicates an expected call of QueryDvsCheckCompatibility
func (mr *MockContextMockRecorder) QueryDvsCheckCompatibility(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDvsCheckCompatibility", reflect.TypeOf((*MockContext)(nil).QueryDvsCheckCompatibility), ctx, r, req)
}

// QueryDvsCompatibleHostSpec mocks base method
func (m *MockContext) QueryDvsCompatibleHostSpec(ctx context.Context, r soap.RoundTripper, req *types.QueryDvsCompatibleHostSpec) (*types.QueryDvsCompatibleHostSpecResponse, error) {
	ret := m.ctrl.Call(m, "QueryDvsCompatibleHostSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDvsCompatibleHostSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDvsCompatibleHostSpec indicates an expected call of QueryDvsCompatibleHostSpec
func (mr *MockContextMockRecorder) QueryDvsCompatibleHostSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDvsCompatibleHostSpec", reflect.TypeOf((*MockContext)(nil).QueryDvsCompatibleHostSpec), ctx, r, req)
}

// QueryDvsConfigTarget mocks base method
func (m *MockContext) QueryDvsConfigTarget(ctx context.Context, r soap.RoundTripper, req *types.QueryDvsConfigTarget) (*types.QueryDvsConfigTargetResponse, error) {
	ret := m.ctrl.Call(m, "QueryDvsConfigTarget", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDvsConfigTargetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDvsConfigTarget indicates an expected call of QueryDvsConfigTarget
func (mr *MockContextMockRecorder) QueryDvsConfigTarget(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDvsConfigTarget", reflect.TypeOf((*MockContext)(nil).QueryDvsConfigTarget), ctx, r, req)
}

// QueryDvsFeatureCapability mocks base method
func (m *MockContext) QueryDvsFeatureCapability(ctx context.Context, r soap.RoundTripper, req *types.QueryDvsFeatureCapability) (*types.QueryDvsFeatureCapabilityResponse, error) {
	ret := m.ctrl.Call(m, "QueryDvsFeatureCapability", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryDvsFeatureCapabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDvsFeatureCapability indicates an expected call of QueryDvsFeatureCapability
func (mr *MockContextMockRecorder) QueryDvsFeatureCapability(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDvsFeatureCapability", reflect.TypeOf((*MockContext)(nil).QueryDvsFeatureCapability), ctx, r, req)
}

// QueryEvents mocks base method
func (m *MockContext) QueryEvents(ctx context.Context, r soap.RoundTripper, req *types.QueryEvents) (*types.QueryEventsResponse, error) {
	ret := m.ctrl.Call(m, "QueryEvents", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEvents indicates an expected call of QueryEvents
func (mr *MockContextMockRecorder) QueryEvents(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvents", reflect.TypeOf((*MockContext)(nil).QueryEvents), ctx, r, req)
}

// QueryExpressionMetadata mocks base method
func (m *MockContext) QueryExpressionMetadata(ctx context.Context, r soap.RoundTripper, req *types.QueryExpressionMetadata) (*types.QueryExpressionMetadataResponse, error) {
	ret := m.ctrl.Call(m, "QueryExpressionMetadata", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryExpressionMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExpressionMetadata indicates an expected call of QueryExpressionMetadata
func (mr *MockContextMockRecorder) QueryExpressionMetadata(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExpressionMetadata", reflect.TypeOf((*MockContext)(nil).QueryExpressionMetadata), ctx, r, req)
}

// QueryExtensionIpAllocationUsage mocks base method
func (m *MockContext) QueryExtensionIpAllocationUsage(ctx context.Context, r soap.RoundTripper, req *types.QueryExtensionIpAllocationUsage) (*types.QueryExtensionIpAllocationUsageResponse, error) {
	ret := m.ctrl.Call(m, "QueryExtensionIpAllocationUsage", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryExtensionIpAllocationUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExtensionIpAllocationUsage indicates an expected call of QueryExtensionIpAllocationUsage
func (mr *MockContextMockRecorder) QueryExtensionIpAllocationUsage(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExtensionIpAllocationUsage", reflect.TypeOf((*MockContext)(nil).QueryExtensionIpAllocationUsage), ctx, r, req)
}

// QueryFaultToleranceCompatibility mocks base method
func (m *MockContext) QueryFaultToleranceCompatibility(ctx context.Context, r soap.RoundTripper, req *types.QueryFaultToleranceCompatibility) (*types.QueryFaultToleranceCompatibilityResponse, error) {
	ret := m.ctrl.Call(m, "QueryFaultToleranceCompatibility", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFaultToleranceCompatibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFaultToleranceCompatibility indicates an expected call of QueryFaultToleranceCompatibility
func (mr *MockContextMockRecorder) QueryFaultToleranceCompatibility(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFaultToleranceCompatibility", reflect.TypeOf((*MockContext)(nil).QueryFaultToleranceCompatibility), ctx, r, req)
}

// QueryFaultToleranceCompatibilityEx mocks base method
func (m *MockContext) QueryFaultToleranceCompatibilityEx(ctx context.Context, r soap.RoundTripper, req *types.QueryFaultToleranceCompatibilityEx) (*types.QueryFaultToleranceCompatibilityExResponse, error) {
	ret := m.ctrl.Call(m, "QueryFaultToleranceCompatibilityEx", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFaultToleranceCompatibilityExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFaultToleranceCompatibilityEx indicates an expected call of QueryFaultToleranceCompatibilityEx
func (mr *MockContextMockRecorder) QueryFaultToleranceCompatibilityEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFaultToleranceCompatibilityEx", reflect.TypeOf((*MockContext)(nil).QueryFaultToleranceCompatibilityEx), ctx, r, req)
}

// QueryFilterEntities mocks base method
func (m *MockContext) QueryFilterEntities(ctx context.Context, r soap.RoundTripper, req *types.QueryFilterEntities) (*types.QueryFilterEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "QueryFilterEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFilterEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFilterEntities indicates an expected call of QueryFilterEntities
func (mr *MockContextMockRecorder) QueryFilterEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFilterEntities", reflect.TypeOf((*MockContext)(nil).QueryFilterEntities), ctx, r, req)
}

// QueryFilterInfoIds mocks base method
func (m *MockContext) QueryFilterInfoIds(ctx context.Context, r soap.RoundTripper, req *types.QueryFilterInfoIds) (*types.QueryFilterInfoIdsResponse, error) {
	ret := m.ctrl.Call(m, "QueryFilterInfoIds", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFilterInfoIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFilterInfoIds indicates an expected call of QueryFilterInfoIds
func (mr *MockContextMockRecorder) QueryFilterInfoIds(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFilterInfoIds", reflect.TypeOf((*MockContext)(nil).QueryFilterInfoIds), ctx, r, req)
}

// QueryFilterList mocks base method
func (m *MockContext) QueryFilterList(ctx context.Context, r soap.RoundTripper, req *types.QueryFilterList) (*types.QueryFilterListResponse, error) {
	ret := m.ctrl.Call(m, "QueryFilterList", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFilterListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFilterList indicates an expected call of QueryFilterList
func (mr *MockContextMockRecorder) QueryFilterList(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFilterList", reflect.TypeOf((*MockContext)(nil).QueryFilterList), ctx, r, req)
}

// QueryFilterName mocks base method
func (m *MockContext) QueryFilterName(ctx context.Context, r soap.RoundTripper, req *types.QueryFilterName) (*types.QueryFilterNameResponse, error) {
	ret := m.ctrl.Call(m, "QueryFilterName", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFilterNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFilterName indicates an expected call of QueryFilterName
func (mr *MockContextMockRecorder) QueryFilterName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFilterName", reflect.TypeOf((*MockContext)(nil).QueryFilterName), ctx, r, req)
}

// QueryFirmwareConfigUploadURL mocks base method
func (m *MockContext) QueryFirmwareConfigUploadURL(ctx context.Context, r soap.RoundTripper, req *types.QueryFirmwareConfigUploadURL) (*types.QueryFirmwareConfigUploadURLResponse, error) {
	ret := m.ctrl.Call(m, "QueryFirmwareConfigUploadURL", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryFirmwareConfigUploadURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFirmwareConfigUploadURL indicates an expected call of QueryFirmwareConfigUploadURL
func (mr *MockContextMockRecorder) QueryFirmwareConfigUploadURL(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFirmwareConfigUploadURL", reflect.TypeOf((*MockContext)(nil).QueryFirmwareConfigUploadURL), ctx, r, req)
}

// QueryHealthUpdateInfos mocks base method
func (m *MockContext) QueryHealthUpdateInfos(ctx context.Context, r soap.RoundTripper, req *types.QueryHealthUpdateInfos) (*types.QueryHealthUpdateInfosResponse, error) {
	ret := m.ctrl.Call(m, "QueryHealthUpdateInfos", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHealthUpdateInfosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHealthUpdateInfos indicates an expected call of QueryHealthUpdateInfos
func (mr *MockContextMockRecorder) QueryHealthUpdateInfos(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHealthUpdateInfos", reflect.TypeOf((*MockContext)(nil).QueryHealthUpdateInfos), ctx, r, req)
}

// QueryHealthUpdates mocks base method
func (m *MockContext) QueryHealthUpdates(ctx context.Context, r soap.RoundTripper, req *types.QueryHealthUpdates) (*types.QueryHealthUpdatesResponse, error) {
	ret := m.ctrl.Call(m, "QueryHealthUpdates", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHealthUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHealthUpdates indicates an expected call of QueryHealthUpdates
func (mr *MockContextMockRecorder) QueryHealthUpdates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHealthUpdates", reflect.TypeOf((*MockContext)(nil).QueryHealthUpdates), ctx, r, req)
}

// QueryHostConnectionInfo mocks base method
func (m *MockContext) QueryHostConnectionInfo(ctx context.Context, r soap.RoundTripper, req *types.QueryHostConnectionInfo) (*types.QueryHostConnectionInfoResponse, error) {
	ret := m.ctrl.Call(m, "QueryHostConnectionInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHostConnectionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostConnectionInfo indicates an expected call of QueryHostConnectionInfo
func (mr *MockContextMockRecorder) QueryHostConnectionInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostConnectionInfo", reflect.TypeOf((*MockContext)(nil).QueryHostConnectionInfo), ctx, r, req)
}

// QueryHostPatch_Task mocks base method
func (m *MockContext) QueryHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.QueryHostPatch_Task) (*types.QueryHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "QueryHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostPatch_Task indicates an expected call of QueryHostPatch_Task
func (mr *MockContextMockRecorder) QueryHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostPatch_Task", reflect.TypeOf((*MockContext)(nil).QueryHostPatch_Task), ctx, r, req)
}

// QueryHostProfileMetadata mocks base method
func (m *MockContext) QueryHostProfileMetadata(ctx context.Context, r soap.RoundTripper, req *types.QueryHostProfileMetadata) (*types.QueryHostProfileMetadataResponse, error) {
	ret := m.ctrl.Call(m, "QueryHostProfileMetadata", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHostProfileMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostProfileMetadata indicates an expected call of QueryHostProfileMetadata
func (mr *MockContextMockRecorder) QueryHostProfileMetadata(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostProfileMetadata", reflect.TypeOf((*MockContext)(nil).QueryHostProfileMetadata), ctx, r, req)
}

// QueryHostStatus mocks base method
func (m *MockContext) QueryHostStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryHostStatus) (*types.QueryHostStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryHostStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryHostStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryHostStatus indicates an expected call of QueryHostStatus
func (mr *MockContextMockRecorder) QueryHostStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHostStatus", reflect.TypeOf((*MockContext)(nil).QueryHostStatus), ctx, r, req)
}

// QueryIORMConfigOption mocks base method
func (m *MockContext) QueryIORMConfigOption(ctx context.Context, r soap.RoundTripper, req *types.QueryIORMConfigOption) (*types.QueryIORMConfigOptionResponse, error) {
	ret := m.ctrl.Call(m, "QueryIORMConfigOption", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryIORMConfigOptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIORMConfigOption indicates an expected call of QueryIORMConfigOption
func (mr *MockContextMockRecorder) QueryIORMConfigOption(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIORMConfigOption", reflect.TypeOf((*MockContext)(nil).QueryIORMConfigOption), ctx, r, req)
}

// QueryIPAllocations mocks base method
func (m *MockContext) QueryIPAllocations(ctx context.Context, r soap.RoundTripper, req *types.QueryIPAllocations) (*types.QueryIPAllocationsResponse, error) {
	ret := m.ctrl.Call(m, "QueryIPAllocations", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryIPAllocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIPAllocations indicates an expected call of QueryIPAllocations
func (mr *MockContextMockRecorder) QueryIPAllocations(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIPAllocations", reflect.TypeOf((*MockContext)(nil).QueryIPAllocations), ctx, r, req)
}

// QueryIoFilterInfo mocks base method
func (m *MockContext) QueryIoFilterInfo(ctx context.Context, r soap.RoundTripper, req *types.QueryIoFilterInfo) (*types.QueryIoFilterInfoResponse, error) {
	ret := m.ctrl.Call(m, "QueryIoFilterInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryIoFilterInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIoFilterInfo indicates an expected call of QueryIoFilterInfo
func (mr *MockContextMockRecorder) QueryIoFilterInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIoFilterInfo", reflect.TypeOf((*MockContext)(nil).QueryIoFilterInfo), ctx, r, req)
}

// QueryIoFilterIssues mocks base method
func (m *MockContext) QueryIoFilterIssues(ctx context.Context, r soap.RoundTripper, req *types.QueryIoFilterIssues) (*types.QueryIoFilterIssuesResponse, error) {
	ret := m.ctrl.Call(m, "QueryIoFilterIssues", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryIoFilterIssuesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIoFilterIssues indicates an expected call of QueryIoFilterIssues
func (mr *MockContextMockRecorder) QueryIoFilterIssues(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIoFilterIssues", reflect.TypeOf((*MockContext)(nil).QueryIoFilterIssues), ctx, r, req)
}

// QueryIpPools mocks base method
func (m *MockContext) QueryIpPools(ctx context.Context, r soap.RoundTripper, req *types.QueryIpPools) (*types.QueryIpPoolsResponse, error) {
	ret := m.ctrl.Call(m, "QueryIpPools", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryIpPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIpPools indicates an expected call of QueryIpPools
func (mr *MockContextMockRecorder) QueryIpPools(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIpPools", reflect.TypeOf((*MockContext)(nil).QueryIpPools), ctx, r, req)
}

// QueryLicenseSourceAvailability mocks base method
func (m *MockContext) QueryLicenseSourceAvailability(ctx context.Context, r soap.RoundTripper, req *types.QueryLicenseSourceAvailability) (*types.QueryLicenseSourceAvailabilityResponse, error) {
	ret := m.ctrl.Call(m, "QueryLicenseSourceAvailability", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryLicenseSourceAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLicenseSourceAvailability indicates an expected call of QueryLicenseSourceAvailability
func (mr *MockContextMockRecorder) QueryLicenseSourceAvailability(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLicenseSourceAvailability", reflect.TypeOf((*MockContext)(nil).QueryLicenseSourceAvailability), ctx, r, req)
}

// QueryLicenseUsage mocks base method
func (m *MockContext) QueryLicenseUsage(ctx context.Context, r soap.RoundTripper, req *types.QueryLicenseUsage) (*types.QueryLicenseUsageResponse, error) {
	ret := m.ctrl.Call(m, "QueryLicenseUsage", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryLicenseUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLicenseUsage indicates an expected call of QueryLicenseUsage
func (mr *MockContextMockRecorder) QueryLicenseUsage(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLicenseUsage", reflect.TypeOf((*MockContext)(nil).QueryLicenseUsage), ctx, r, req)
}

// QueryLockdownExceptions mocks base method
func (m *MockContext) QueryLockdownExceptions(ctx context.Context, r soap.RoundTripper, req *types.QueryLockdownExceptions) (*types.QueryLockdownExceptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryLockdownExceptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryLockdownExceptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLockdownExceptions indicates an expected call of QueryLockdownExceptions
func (mr *MockContextMockRecorder) QueryLockdownExceptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLockdownExceptions", reflect.TypeOf((*MockContext)(nil).QueryLockdownExceptions), ctx, r, req)
}

// QueryManagedBy mocks base method
func (m *MockContext) QueryManagedBy(ctx context.Context, r soap.RoundTripper, req *types.QueryManagedBy) (*types.QueryManagedByResponse, error) {
	ret := m.ctrl.Call(m, "QueryManagedBy", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryManagedByResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryManagedBy indicates an expected call of QueryManagedBy
func (mr *MockContextMockRecorder) QueryManagedBy(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryManagedBy", reflect.TypeOf((*MockContext)(nil).QueryManagedBy), ctx, r, req)
}

// QueryMemoryOverhead mocks base method
func (m *MockContext) QueryMemoryOverhead(ctx context.Context, r soap.RoundTripper, req *types.QueryMemoryOverhead) (*types.QueryMemoryOverheadResponse, error) {
	ret := m.ctrl.Call(m, "QueryMemoryOverhead", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryMemoryOverheadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemoryOverhead indicates an expected call of QueryMemoryOverhead
func (mr *MockContextMockRecorder) QueryMemoryOverhead(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemoryOverhead", reflect.TypeOf((*MockContext)(nil).QueryMemoryOverhead), ctx, r, req)
}

// QueryMemoryOverheadEx mocks base method
func (m *MockContext) QueryMemoryOverheadEx(ctx context.Context, r soap.RoundTripper, req *types.QueryMemoryOverheadEx) (*types.QueryMemoryOverheadExResponse, error) {
	ret := m.ctrl.Call(m, "QueryMemoryOverheadEx", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryMemoryOverheadExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMemoryOverheadEx indicates an expected call of QueryMemoryOverheadEx
func (mr *MockContextMockRecorder) QueryMemoryOverheadEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMemoryOverheadEx", reflect.TypeOf((*MockContext)(nil).QueryMemoryOverheadEx), ctx, r, req)
}

// QueryMigrationDependencies mocks base method
func (m *MockContext) QueryMigrationDependencies(ctx context.Context, r soap.RoundTripper, req *types.QueryMigrationDependencies) (*types.QueryMigrationDependenciesResponse, error) {
	ret := m.ctrl.Call(m, "QueryMigrationDependencies", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryMigrationDependenciesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMigrationDependencies indicates an expected call of QueryMigrationDependencies
func (mr *MockContextMockRecorder) QueryMigrationDependencies(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMigrationDependencies", reflect.TypeOf((*MockContext)(nil).QueryMigrationDependencies), ctx, r, req)
}

// QueryModules mocks base method
func (m *MockContext) QueryModules(ctx context.Context, r soap.RoundTripper, req *types.QueryModules) (*types.QueryModulesResponse, error) {
	ret := m.ctrl.Call(m, "QueryModules", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryModulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryModules indicates an expected call of QueryModules
func (mr *MockContextMockRecorder) QueryModules(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryModules", reflect.TypeOf((*MockContext)(nil).QueryModules), ctx, r, req)
}

// QueryMonitoredEntities mocks base method
func (m *MockContext) QueryMonitoredEntities(ctx context.Context, r soap.RoundTripper, req *types.QueryMonitoredEntities) (*types.QueryMonitoredEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "QueryMonitoredEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryMonitoredEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMonitoredEntities indicates an expected call of QueryMonitoredEntities
func (mr *MockContextMockRecorder) QueryMonitoredEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMonitoredEntities", reflect.TypeOf((*MockContext)(nil).QueryMonitoredEntities), ctx, r, req)
}

// QueryNFSUser mocks base method
func (m *MockContext) QueryNFSUser(ctx context.Context, r soap.RoundTripper, req *types.QueryNFSUser) (*types.QueryNFSUserResponse, error) {
	ret := m.ctrl.Call(m, "QueryNFSUser", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryNFSUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNFSUser indicates an expected call of QueryNFSUser
func (mr *MockContextMockRecorder) QueryNFSUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNFSUser", reflect.TypeOf((*MockContext)(nil).QueryNFSUser), ctx, r, req)
}

// QueryNetConfig mocks base method
func (m *MockContext) QueryNetConfig(ctx context.Context, r soap.RoundTripper, req *types.QueryNetConfig) (*types.QueryNetConfigResponse, error) {
	ret := m.ctrl.Call(m, "QueryNetConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryNetConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNetConfig indicates an expected call of QueryNetConfig
func (mr *MockContextMockRecorder) QueryNetConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNetConfig", reflect.TypeOf((*MockContext)(nil).QueryNetConfig), ctx, r, req)
}

// QueryNetworkHint mocks base method
func (m *MockContext) QueryNetworkHint(ctx context.Context, r soap.RoundTripper, req *types.QueryNetworkHint) (*types.QueryNetworkHintResponse, error) {
	ret := m.ctrl.Call(m, "QueryNetworkHint", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryNetworkHintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNetworkHint indicates an expected call of QueryNetworkHint
func (mr *MockContextMockRecorder) QueryNetworkHint(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNetworkHint", reflect.TypeOf((*MockContext)(nil).QueryNetworkHint), ctx, r, req)
}

// QueryObjectsOnPhysicalVsanDisk mocks base method
func (m *MockContext) QueryObjectsOnPhysicalVsanDisk(ctx context.Context, r soap.RoundTripper, req *types.QueryObjectsOnPhysicalVsanDisk) (*types.QueryObjectsOnPhysicalVsanDiskResponse, error) {
	ret := m.ctrl.Call(m, "QueryObjectsOnPhysicalVsanDisk", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryObjectsOnPhysicalVsanDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryObjectsOnPhysicalVsanDisk indicates an expected call of QueryObjectsOnPhysicalVsanDisk
func (mr *MockContextMockRecorder) QueryObjectsOnPhysicalVsanDisk(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryObjectsOnPhysicalVsanDisk", reflect.TypeOf((*MockContext)(nil).QueryObjectsOnPhysicalVsanDisk), ctx, r, req)
}

// QueryOptions mocks base method
func (m *MockContext) QueryOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryOptions) (*types.QueryOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryOptions indicates an expected call of QueryOptions
func (mr *MockContextMockRecorder) QueryOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOptions", reflect.TypeOf((*MockContext)(nil).QueryOptions), ctx, r, req)
}

// QueryPartitionCreateDesc mocks base method
func (m *MockContext) QueryPartitionCreateDesc(ctx context.Context, r soap.RoundTripper, req *types.QueryPartitionCreateDesc) (*types.QueryPartitionCreateDescResponse, error) {
	ret := m.ctrl.Call(m, "QueryPartitionCreateDesc", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPartitionCreateDescResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartitionCreateDesc indicates an expected call of QueryPartitionCreateDesc
func (mr *MockContextMockRecorder) QueryPartitionCreateDesc(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartitionCreateDesc", reflect.TypeOf((*MockContext)(nil).QueryPartitionCreateDesc), ctx, r, req)
}

// QueryPartitionCreateOptions mocks base method
func (m *MockContext) QueryPartitionCreateOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryPartitionCreateOptions) (*types.QueryPartitionCreateOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryPartitionCreateOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPartitionCreateOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPartitionCreateOptions indicates an expected call of QueryPartitionCreateOptions
func (mr *MockContextMockRecorder) QueryPartitionCreateOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPartitionCreateOptions", reflect.TypeOf((*MockContext)(nil).QueryPartitionCreateOptions), ctx, r, req)
}

// QueryPathSelectionPolicyOptions mocks base method
func (m *MockContext) QueryPathSelectionPolicyOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryPathSelectionPolicyOptions) (*types.QueryPathSelectionPolicyOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryPathSelectionPolicyOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPathSelectionPolicyOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPathSelectionPolicyOptions indicates an expected call of QueryPathSelectionPolicyOptions
func (mr *MockContextMockRecorder) QueryPathSelectionPolicyOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPathSelectionPolicyOptions", reflect.TypeOf((*MockContext)(nil).QueryPathSelectionPolicyOptions), ctx, r, req)
}

// QueryPerf mocks base method
func (m *MockContext) QueryPerf(ctx context.Context, r soap.RoundTripper, req *types.QueryPerf) (*types.QueryPerfResponse, error) {
	ret := m.ctrl.Call(m, "QueryPerf", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPerfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPerf indicates an expected call of QueryPerf
func (mr *MockContextMockRecorder) QueryPerf(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPerf", reflect.TypeOf((*MockContext)(nil).QueryPerf), ctx, r, req)
}

// QueryPerfComposite mocks base method
func (m *MockContext) QueryPerfComposite(ctx context.Context, r soap.RoundTripper, req *types.QueryPerfComposite) (*types.QueryPerfCompositeResponse, error) {
	ret := m.ctrl.Call(m, "QueryPerfComposite", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPerfCompositeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPerfComposite indicates an expected call of QueryPerfComposite
func (mr *MockContextMockRecorder) QueryPerfComposite(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPerfComposite", reflect.TypeOf((*MockContext)(nil).QueryPerfComposite), ctx, r, req)
}

// QueryPerfCounter mocks base method
func (m *MockContext) QueryPerfCounter(ctx context.Context, r soap.RoundTripper, req *types.QueryPerfCounter) (*types.QueryPerfCounterResponse, error) {
	ret := m.ctrl.Call(m, "QueryPerfCounter", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPerfCounterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPerfCounter indicates an expected call of QueryPerfCounter
func (mr *MockContextMockRecorder) QueryPerfCounter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPerfCounter", reflect.TypeOf((*MockContext)(nil).QueryPerfCounter), ctx, r, req)
}

// QueryPerfCounterByLevel mocks base method
func (m *MockContext) QueryPerfCounterByLevel(ctx context.Context, r soap.RoundTripper, req *types.QueryPerfCounterByLevel) (*types.QueryPerfCounterByLevelResponse, error) {
	ret := m.ctrl.Call(m, "QueryPerfCounterByLevel", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPerfCounterByLevelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPerfCounterByLevel indicates an expected call of QueryPerfCounterByLevel
func (mr *MockContextMockRecorder) QueryPerfCounterByLevel(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPerfCounterByLevel", reflect.TypeOf((*MockContext)(nil).QueryPerfCounterByLevel), ctx, r, req)
}

// QueryPerfProviderSummary mocks base method
func (m *MockContext) QueryPerfProviderSummary(ctx context.Context, r soap.RoundTripper, req *types.QueryPerfProviderSummary) (*types.QueryPerfProviderSummaryResponse, error) {
	ret := m.ctrl.Call(m, "QueryPerfProviderSummary", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPerfProviderSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPerfProviderSummary indicates an expected call of QueryPerfProviderSummary
func (mr *MockContextMockRecorder) QueryPerfProviderSummary(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPerfProviderSummary", reflect.TypeOf((*MockContext)(nil).QueryPerfProviderSummary), ctx, r, req)
}

// QueryPhysicalVsanDisks mocks base method
func (m *MockContext) QueryPhysicalVsanDisks(ctx context.Context, r soap.RoundTripper, req *types.QueryPhysicalVsanDisks) (*types.QueryPhysicalVsanDisksResponse, error) {
	ret := m.ctrl.Call(m, "QueryPhysicalVsanDisks", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPhysicalVsanDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPhysicalVsanDisks indicates an expected call of QueryPhysicalVsanDisks
func (mr *MockContextMockRecorder) QueryPhysicalVsanDisks(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPhysicalVsanDisks", reflect.TypeOf((*MockContext)(nil).QueryPhysicalVsanDisks), ctx, r, req)
}

// QueryPnicStatus mocks base method
func (m *MockContext) QueryPnicStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryPnicStatus) (*types.QueryPnicStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryPnicStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPnicStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPnicStatus indicates an expected call of QueryPnicStatus
func (mr *MockContextMockRecorder) QueryPnicStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPnicStatus", reflect.TypeOf((*MockContext)(nil).QueryPnicStatus), ctx, r, req)
}

// QueryPolicyMetadata mocks base method
func (m *MockContext) QueryPolicyMetadata(ctx context.Context, r soap.RoundTripper, req *types.QueryPolicyMetadata) (*types.QueryPolicyMetadataResponse, error) {
	ret := m.ctrl.Call(m, "QueryPolicyMetadata", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryPolicyMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPolicyMetadata indicates an expected call of QueryPolicyMetadata
func (mr *MockContextMockRecorder) QueryPolicyMetadata(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPolicyMetadata", reflect.TypeOf((*MockContext)(nil).QueryPolicyMetadata), ctx, r, req)
}

// QueryProfileStructure mocks base method
func (m *MockContext) QueryProfileStructure(ctx context.Context, r soap.RoundTripper, req *types.QueryProfileStructure) (*types.QueryProfileStructureResponse, error) {
	ret := m.ctrl.Call(m, "QueryProfileStructure", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryProfileStructureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProfileStructure indicates an expected call of QueryProfileStructure
func (mr *MockContextMockRecorder) QueryProfileStructure(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProfileStructure", reflect.TypeOf((*MockContext)(nil).QueryProfileStructure), ctx, r, req)
}

// QueryProviderList mocks base method
func (m *MockContext) QueryProviderList(ctx context.Context, r soap.RoundTripper, req *types.QueryProviderList) (*types.QueryProviderListResponse, error) {
	ret := m.ctrl.Call(m, "QueryProviderList", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryProviderListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProviderList indicates an expected call of QueryProviderList
func (mr *MockContextMockRecorder) QueryProviderList(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProviderList", reflect.TypeOf((*MockContext)(nil).QueryProviderList), ctx, r, req)
}

// QueryProviderName mocks base method
func (m *MockContext) QueryProviderName(ctx context.Context, r soap.RoundTripper, req *types.QueryProviderName) (*types.QueryProviderNameResponse, error) {
	ret := m.ctrl.Call(m, "QueryProviderName", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryProviderNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProviderName indicates an expected call of QueryProviderName
func (mr *MockContextMockRecorder) QueryProviderName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProviderName", reflect.TypeOf((*MockContext)(nil).QueryProviderName), ctx, r, req)
}

// QueryResourceConfigOption mocks base method
func (m *MockContext) QueryResourceConfigOption(ctx context.Context, r soap.RoundTripper, req *types.QueryResourceConfigOption) (*types.QueryResourceConfigOptionResponse, error) {
	ret := m.ctrl.Call(m, "QueryResourceConfigOption", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryResourceConfigOptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryResourceConfigOption indicates an expected call of QueryResourceConfigOption
func (mr *MockContextMockRecorder) QueryResourceConfigOption(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryResourceConfigOption", reflect.TypeOf((*MockContext)(nil).QueryResourceConfigOption), ctx, r, req)
}

// QueryServiceList mocks base method
func (m *MockContext) QueryServiceList(ctx context.Context, r soap.RoundTripper, req *types.QueryServiceList) (*types.QueryServiceListResponse, error) {
	ret := m.ctrl.Call(m, "QueryServiceList", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryServiceListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryServiceList indicates an expected call of QueryServiceList
func (mr *MockContextMockRecorder) QueryServiceList(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryServiceList", reflect.TypeOf((*MockContext)(nil).QueryServiceList), ctx, r, req)
}

// QueryStorageArrayTypePolicyOptions mocks base method
func (m *MockContext) QueryStorageArrayTypePolicyOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryStorageArrayTypePolicyOptions) (*types.QueryStorageArrayTypePolicyOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryStorageArrayTypePolicyOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryStorageArrayTypePolicyOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStorageArrayTypePolicyOptions indicates an expected call of QueryStorageArrayTypePolicyOptions
func (mr *MockContextMockRecorder) QueryStorageArrayTypePolicyOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStorageArrayTypePolicyOptions", reflect.TypeOf((*MockContext)(nil).QueryStorageArrayTypePolicyOptions), ctx, r, req)
}

// QuerySupportedFeatures mocks base method
func (m *MockContext) QuerySupportedFeatures(ctx context.Context, r soap.RoundTripper, req *types.QuerySupportedFeatures) (*types.QuerySupportedFeaturesResponse, error) {
	ret := m.ctrl.Call(m, "QuerySupportedFeatures", ctx, r, req)
	ret0, _ := ret[0].(*types.QuerySupportedFeaturesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySupportedFeatures indicates an expected call of QuerySupportedFeatures
func (mr *MockContextMockRecorder) QuerySupportedFeatures(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySupportedFeatures", reflect.TypeOf((*MockContext)(nil).QuerySupportedFeatures), ctx, r, req)
}

// QuerySyncingVsanObjects mocks base method
func (m *MockContext) QuerySyncingVsanObjects(ctx context.Context, r soap.RoundTripper, req *types.QuerySyncingVsanObjects) (*types.QuerySyncingVsanObjectsResponse, error) {
	ret := m.ctrl.Call(m, "QuerySyncingVsanObjects", ctx, r, req)
	ret0, _ := ret[0].(*types.QuerySyncingVsanObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySyncingVsanObjects indicates an expected call of QuerySyncingVsanObjects
func (mr *MockContextMockRecorder) QuerySyncingVsanObjects(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySyncingVsanObjects", reflect.TypeOf((*MockContext)(nil).QuerySyncingVsanObjects), ctx, r, req)
}

// QuerySystemUsers mocks base method
func (m *MockContext) QuerySystemUsers(ctx context.Context, r soap.RoundTripper, req *types.QuerySystemUsers) (*types.QuerySystemUsersResponse, error) {
	ret := m.ctrl.Call(m, "QuerySystemUsers", ctx, r, req)
	ret0, _ := ret[0].(*types.QuerySystemUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySystemUsers indicates an expected call of QuerySystemUsers
func (mr *MockContextMockRecorder) QuerySystemUsers(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySystemUsers", reflect.TypeOf((*MockContext)(nil).QuerySystemUsers), ctx, r, req)
}

// QueryTargetCapabilities mocks base method
func (m *MockContext) QueryTargetCapabilities(ctx context.Context, r soap.RoundTripper, req *types.QueryTargetCapabilities) (*types.QueryTargetCapabilitiesResponse, error) {
	ret := m.ctrl.Call(m, "QueryTargetCapabilities", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryTargetCapabilitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTargetCapabilities indicates an expected call of QueryTargetCapabilities
func (mr *MockContextMockRecorder) QueryTargetCapabilities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTargetCapabilities", reflect.TypeOf((*MockContext)(nil).QueryTargetCapabilities), ctx, r, req)
}

// QueryTpmAttestationReport mocks base method
func (m *MockContext) QueryTpmAttestationReport(ctx context.Context, r soap.RoundTripper, req *types.QueryTpmAttestationReport) (*types.QueryTpmAttestationReportResponse, error) {
	ret := m.ctrl.Call(m, "QueryTpmAttestationReport", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryTpmAttestationReportResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTpmAttestationReport indicates an expected call of QueryTpmAttestationReport
func (mr *MockContextMockRecorder) QueryTpmAttestationReport(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTpmAttestationReport", reflect.TypeOf((*MockContext)(nil).QueryTpmAttestationReport), ctx, r, req)
}

// QueryUnmonitoredHosts mocks base method
func (m *MockContext) QueryUnmonitoredHosts(ctx context.Context, r soap.RoundTripper, req *types.QueryUnmonitoredHosts) (*types.QueryUnmonitoredHostsResponse, error) {
	ret := m.ctrl.Call(m, "QueryUnmonitoredHosts", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryUnmonitoredHostsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUnmonitoredHosts indicates an expected call of QueryUnmonitoredHosts
func (mr *MockContextMockRecorder) QueryUnmonitoredHosts(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUnmonitoredHosts", reflect.TypeOf((*MockContext)(nil).QueryUnmonitoredHosts), ctx, r, req)
}

// QueryUnownedFiles mocks base method
func (m *MockContext) QueryUnownedFiles(ctx context.Context, r soap.RoundTripper, req *types.QueryUnownedFiles) (*types.QueryUnownedFilesResponse, error) {
	ret := m.ctrl.Call(m, "QueryUnownedFiles", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryUnownedFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUnownedFiles indicates an expected call of QueryUnownedFiles
func (mr *MockContextMockRecorder) QueryUnownedFiles(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUnownedFiles", reflect.TypeOf((*MockContext)(nil).QueryUnownedFiles), ctx, r, req)
}

// QueryUnresolvedVmfsVolume mocks base method
func (m *MockContext) QueryUnresolvedVmfsVolume(ctx context.Context, r soap.RoundTripper, req *types.QueryUnresolvedVmfsVolume) (*types.QueryUnresolvedVmfsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "QueryUnresolvedVmfsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryUnresolvedVmfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUnresolvedVmfsVolume indicates an expected call of QueryUnresolvedVmfsVolume
func (mr *MockContextMockRecorder) QueryUnresolvedVmfsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUnresolvedVmfsVolume", reflect.TypeOf((*MockContext)(nil).QueryUnresolvedVmfsVolume), ctx, r, req)
}

// QueryUnresolvedVmfsVolumes mocks base method
func (m *MockContext) QueryUnresolvedVmfsVolumes(ctx context.Context, r soap.RoundTripper, req *types.QueryUnresolvedVmfsVolumes) (*types.QueryUnresolvedVmfsVolumesResponse, error) {
	ret := m.ctrl.Call(m, "QueryUnresolvedVmfsVolumes", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryUnresolvedVmfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUnresolvedVmfsVolumes indicates an expected call of QueryUnresolvedVmfsVolumes
func (mr *MockContextMockRecorder) QueryUnresolvedVmfsVolumes(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUnresolvedVmfsVolumes", reflect.TypeOf((*MockContext)(nil).QueryUnresolvedVmfsVolumes), ctx, r, req)
}

// QueryUsedVlanIdInDvs mocks base method
func (m *MockContext) QueryUsedVlanIdInDvs(ctx context.Context, r soap.RoundTripper, req *types.QueryUsedVlanIdInDvs) (*types.QueryUsedVlanIdInDvsResponse, error) {
	ret := m.ctrl.Call(m, "QueryUsedVlanIdInDvs", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryUsedVlanIdInDvsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUsedVlanIdInDvs indicates an expected call of QueryUsedVlanIdInDvs
func (mr *MockContextMockRecorder) QueryUsedVlanIdInDvs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsedVlanIdInDvs", reflect.TypeOf((*MockContext)(nil).QueryUsedVlanIdInDvs), ctx, r, req)
}

// QueryVMotionCompatibility mocks base method
func (m *MockContext) QueryVMotionCompatibility(ctx context.Context, r soap.RoundTripper, req *types.QueryVMotionCompatibility) (*types.QueryVMotionCompatibilityResponse, error) {
	ret := m.ctrl.Call(m, "QueryVMotionCompatibility", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVMotionCompatibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVMotionCompatibility indicates an expected call of QueryVMotionCompatibility
func (mr *MockContextMockRecorder) QueryVMotionCompatibility(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVMotionCompatibility", reflect.TypeOf((*MockContext)(nil).QueryVMotionCompatibility), ctx, r, req)
}

// QueryVMotionCompatibilityEx_Task mocks base method
func (m *MockContext) QueryVMotionCompatibilityEx_Task(ctx context.Context, r soap.RoundTripper, req *types.QueryVMotionCompatibilityEx_Task) (*types.QueryVMotionCompatibilityEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "QueryVMotionCompatibilityEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVMotionCompatibilityEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVMotionCompatibilityEx_Task indicates an expected call of QueryVMotionCompatibilityEx_Task
func (mr *MockContextMockRecorder) QueryVMotionCompatibilityEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVMotionCompatibilityEx_Task", reflect.TypeOf((*MockContext)(nil).QueryVMotionCompatibilityEx_Task), ctx, r, req)
}

// QueryVirtualDiskFragmentation mocks base method
func (m *MockContext) QueryVirtualDiskFragmentation(ctx context.Context, r soap.RoundTripper, req *types.QueryVirtualDiskFragmentation) (*types.QueryVirtualDiskFragmentationResponse, error) {
	ret := m.ctrl.Call(m, "QueryVirtualDiskFragmentation", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVirtualDiskFragmentationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVirtualDiskFragmentation indicates an expected call of QueryVirtualDiskFragmentation
func (mr *MockContextMockRecorder) QueryVirtualDiskFragmentation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVirtualDiskFragmentation", reflect.TypeOf((*MockContext)(nil).QueryVirtualDiskFragmentation), ctx, r, req)
}

// QueryVirtualDiskGeometry mocks base method
func (m *MockContext) QueryVirtualDiskGeometry(ctx context.Context, r soap.RoundTripper, req *types.QueryVirtualDiskGeometry) (*types.QueryVirtualDiskGeometryResponse, error) {
	ret := m.ctrl.Call(m, "QueryVirtualDiskGeometry", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVirtualDiskGeometryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVirtualDiskGeometry indicates an expected call of QueryVirtualDiskGeometry
func (mr *MockContextMockRecorder) QueryVirtualDiskGeometry(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVirtualDiskGeometry", reflect.TypeOf((*MockContext)(nil).QueryVirtualDiskGeometry), ctx, r, req)
}

// QueryVirtualDiskUuid mocks base method
func (m *MockContext) QueryVirtualDiskUuid(ctx context.Context, r soap.RoundTripper, req *types.QueryVirtualDiskUuid) (*types.QueryVirtualDiskUuidResponse, error) {
	ret := m.ctrl.Call(m, "QueryVirtualDiskUuid", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVirtualDiskUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVirtualDiskUuid indicates an expected call of QueryVirtualDiskUuid
func (mr *MockContextMockRecorder) QueryVirtualDiskUuid(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVirtualDiskUuid", reflect.TypeOf((*MockContext)(nil).QueryVirtualDiskUuid), ctx, r, req)
}

// QueryVmfsConfigOption mocks base method
func (m *MockContext) QueryVmfsConfigOption(ctx context.Context, r soap.RoundTripper, req *types.QueryVmfsConfigOption) (*types.QueryVmfsConfigOptionResponse, error) {
	ret := m.ctrl.Call(m, "QueryVmfsConfigOption", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVmfsConfigOptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVmfsConfigOption indicates an expected call of QueryVmfsConfigOption
func (mr *MockContextMockRecorder) QueryVmfsConfigOption(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVmfsConfigOption", reflect.TypeOf((*MockContext)(nil).QueryVmfsConfigOption), ctx, r, req)
}

// QueryVmfsDatastoreCreateOptions mocks base method
func (m *MockContext) QueryVmfsDatastoreCreateOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryVmfsDatastoreCreateOptions) (*types.QueryVmfsDatastoreCreateOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryVmfsDatastoreCreateOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVmfsDatastoreCreateOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVmfsDatastoreCreateOptions indicates an expected call of QueryVmfsDatastoreCreateOptions
func (mr *MockContextMockRecorder) QueryVmfsDatastoreCreateOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVmfsDatastoreCreateOptions", reflect.TypeOf((*MockContext)(nil).QueryVmfsDatastoreCreateOptions), ctx, r, req)
}

// QueryVmfsDatastoreExpandOptions mocks base method
func (m *MockContext) QueryVmfsDatastoreExpandOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryVmfsDatastoreExpandOptions) (*types.QueryVmfsDatastoreExpandOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryVmfsDatastoreExpandOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVmfsDatastoreExpandOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVmfsDatastoreExpandOptions indicates an expected call of QueryVmfsDatastoreExpandOptions
func (mr *MockContextMockRecorder) QueryVmfsDatastoreExpandOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVmfsDatastoreExpandOptions", reflect.TypeOf((*MockContext)(nil).QueryVmfsDatastoreExpandOptions), ctx, r, req)
}

// QueryVmfsDatastoreExtendOptions mocks base method
func (m *MockContext) QueryVmfsDatastoreExtendOptions(ctx context.Context, r soap.RoundTripper, req *types.QueryVmfsDatastoreExtendOptions) (*types.QueryVmfsDatastoreExtendOptionsResponse, error) {
	ret := m.ctrl.Call(m, "QueryVmfsDatastoreExtendOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVmfsDatastoreExtendOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVmfsDatastoreExtendOptions indicates an expected call of QueryVmfsDatastoreExtendOptions
func (mr *MockContextMockRecorder) QueryVmfsDatastoreExtendOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVmfsDatastoreExtendOptions", reflect.TypeOf((*MockContext)(nil).QueryVmfsDatastoreExtendOptions), ctx, r, req)
}

// QueryVnicStatus mocks base method
func (m *MockContext) QueryVnicStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryVnicStatus) (*types.QueryVnicStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryVnicStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVnicStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVnicStatus indicates an expected call of QueryVnicStatus
func (mr *MockContextMockRecorder) QueryVnicStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVnicStatus", reflect.TypeOf((*MockContext)(nil).QueryVnicStatus), ctx, r, req)
}

// QueryVsanObjectUuidsByFilter mocks base method
func (m *MockContext) QueryVsanObjectUuidsByFilter(ctx context.Context, r soap.RoundTripper, req *types.QueryVsanObjectUuidsByFilter) (*types.QueryVsanObjectUuidsByFilterResponse, error) {
	ret := m.ctrl.Call(m, "QueryVsanObjectUuidsByFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVsanObjectUuidsByFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVsanObjectUuidsByFilter indicates an expected call of QueryVsanObjectUuidsByFilter
func (mr *MockContextMockRecorder) QueryVsanObjectUuidsByFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVsanObjectUuidsByFilter", reflect.TypeOf((*MockContext)(nil).QueryVsanObjectUuidsByFilter), ctx, r, req)
}

// QueryVsanObjects mocks base method
func (m *MockContext) QueryVsanObjects(ctx context.Context, r soap.RoundTripper, req *types.QueryVsanObjects) (*types.QueryVsanObjectsResponse, error) {
	ret := m.ctrl.Call(m, "QueryVsanObjects", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVsanObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVsanObjects indicates an expected call of QueryVsanObjects
func (mr *MockContextMockRecorder) QueryVsanObjects(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVsanObjects", reflect.TypeOf((*MockContext)(nil).QueryVsanObjects), ctx, r, req)
}

// QueryVsanStatistics mocks base method
func (m *MockContext) QueryVsanStatistics(ctx context.Context, r soap.RoundTripper, req *types.QueryVsanStatistics) (*types.QueryVsanStatisticsResponse, error) {
	ret := m.ctrl.Call(m, "QueryVsanStatistics", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVsanStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVsanStatistics indicates an expected call of QueryVsanStatistics
func (mr *MockContextMockRecorder) QueryVsanStatistics(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVsanStatistics", reflect.TypeOf((*MockContext)(nil).QueryVsanStatistics), ctx, r, req)
}

// QueryVsanUpgradeStatus mocks base method
func (m *MockContext) QueryVsanUpgradeStatus(ctx context.Context, r soap.RoundTripper, req *types.QueryVsanUpgradeStatus) (*types.QueryVsanUpgradeStatusResponse, error) {
	ret := m.ctrl.Call(m, "QueryVsanUpgradeStatus", ctx, r, req)
	ret0, _ := ret[0].(*types.QueryVsanUpgradeStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryVsanUpgradeStatus indicates an expected call of QueryVsanUpgradeStatus
func (mr *MockContextMockRecorder) QueryVsanUpgradeStatus(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryVsanUpgradeStatus", reflect.TypeOf((*MockContext)(nil).QueryVsanUpgradeStatus), ctx, r, req)
}

// ReadEnvironmentVariableInGuest mocks base method
func (m *MockContext) ReadEnvironmentVariableInGuest(ctx context.Context, r soap.RoundTripper, req *types.ReadEnvironmentVariableInGuest) (*types.ReadEnvironmentVariableInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ReadEnvironmentVariableInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ReadEnvironmentVariableInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEnvironmentVariableInGuest indicates an expected call of ReadEnvironmentVariableInGuest
func (mr *MockContextMockRecorder) ReadEnvironmentVariableInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEnvironmentVariableInGuest", reflect.TypeOf((*MockContext)(nil).ReadEnvironmentVariableInGuest), ctx, r, req)
}

// ReadNextEvents mocks base method
func (m *MockContext) ReadNextEvents(ctx context.Context, r soap.RoundTripper, req *types.ReadNextEvents) (*types.ReadNextEventsResponse, error) {
	ret := m.ctrl.Call(m, "ReadNextEvents", ctx, r, req)
	ret0, _ := ret[0].(*types.ReadNextEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNextEvents indicates an expected call of ReadNextEvents
func (mr *MockContextMockRecorder) ReadNextEvents(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextEvents", reflect.TypeOf((*MockContext)(nil).ReadNextEvents), ctx, r, req)
}

// ReadNextTasks mocks base method
func (m *MockContext) ReadNextTasks(ctx context.Context, r soap.RoundTripper, req *types.ReadNextTasks) (*types.ReadNextTasksResponse, error) {
	ret := m.ctrl.Call(m, "ReadNextTasks", ctx, r, req)
	ret0, _ := ret[0].(*types.ReadNextTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadNextTasks indicates an expected call of ReadNextTasks
func (mr *MockContextMockRecorder) ReadNextTasks(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNextTasks", reflect.TypeOf((*MockContext)(nil).ReadNextTasks), ctx, r, req)
}

// ReadPreviousEvents mocks base method
func (m *MockContext) ReadPreviousEvents(ctx context.Context, r soap.RoundTripper, req *types.ReadPreviousEvents) (*types.ReadPreviousEventsResponse, error) {
	ret := m.ctrl.Call(m, "ReadPreviousEvents", ctx, r, req)
	ret0, _ := ret[0].(*types.ReadPreviousEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPreviousEvents indicates an expected call of ReadPreviousEvents
func (mr *MockContextMockRecorder) ReadPreviousEvents(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPreviousEvents", reflect.TypeOf((*MockContext)(nil).ReadPreviousEvents), ctx, r, req)
}

// ReadPreviousTasks mocks base method
func (m *MockContext) ReadPreviousTasks(ctx context.Context, r soap.RoundTripper, req *types.ReadPreviousTasks) (*types.ReadPreviousTasksResponse, error) {
	ret := m.ctrl.Call(m, "ReadPreviousTasks", ctx, r, req)
	ret0, _ := ret[0].(*types.ReadPreviousTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPreviousTasks indicates an expected call of ReadPreviousTasks
func (mr *MockContextMockRecorder) ReadPreviousTasks(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPreviousTasks", reflect.TypeOf((*MockContext)(nil).ReadPreviousTasks), ctx, r, req)
}

// RebootGuest mocks base method
func (m *MockContext) RebootGuest(ctx context.Context, r soap.RoundTripper, req *types.RebootGuest) (*types.RebootGuestResponse, error) {
	ret := m.ctrl.Call(m, "RebootGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.RebootGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootGuest indicates an expected call of RebootGuest
func (mr *MockContextMockRecorder) RebootGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootGuest", reflect.TypeOf((*MockContext)(nil).RebootGuest), ctx, r, req)
}

// RebootHost_Task mocks base method
func (m *MockContext) RebootHost_Task(ctx context.Context, r soap.RoundTripper, req *types.RebootHost_Task) (*types.RebootHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RebootHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RebootHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootHost_Task indicates an expected call of RebootHost_Task
func (mr *MockContextMockRecorder) RebootHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootHost_Task", reflect.TypeOf((*MockContext)(nil).RebootHost_Task), ctx, r, req)
}

// RecommendDatastores mocks base method
func (m *MockContext) RecommendDatastores(ctx context.Context, r soap.RoundTripper, req *types.RecommendDatastores) (*types.RecommendDatastoresResponse, error) {
	ret := m.ctrl.Call(m, "RecommendDatastores", ctx, r, req)
	ret0, _ := ret[0].(*types.RecommendDatastoresResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendDatastores indicates an expected call of RecommendDatastores
func (mr *MockContextMockRecorder) RecommendDatastores(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendDatastores", reflect.TypeOf((*MockContext)(nil).RecommendDatastores), ctx, r, req)
}

// RecommendHostsForVm mocks base method
func (m *MockContext) RecommendHostsForVm(ctx context.Context, r soap.RoundTripper, req *types.RecommendHostsForVm) (*types.RecommendHostsForVmResponse, error) {
	ret := m.ctrl.Call(m, "RecommendHostsForVm", ctx, r, req)
	ret0, _ := ret[0].(*types.RecommendHostsForVmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendHostsForVm indicates an expected call of RecommendHostsForVm
func (mr *MockContextMockRecorder) RecommendHostsForVm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendHostsForVm", reflect.TypeOf((*MockContext)(nil).RecommendHostsForVm), ctx, r, req)
}

// RecommissionVsanNode_Task mocks base method
func (m *MockContext) RecommissionVsanNode_Task(ctx context.Context, r soap.RoundTripper, req *types.RecommissionVsanNode_Task) (*types.RecommissionVsanNode_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RecommissionVsanNode_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RecommissionVsanNode_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommissionVsanNode_Task indicates an expected call of RecommissionVsanNode_Task
func (mr *MockContextMockRecorder) RecommissionVsanNode_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommissionVsanNode_Task", reflect.TypeOf((*MockContext)(nil).RecommissionVsanNode_Task), ctx, r, req)
}

// ReconcileDatastoreInventory_Task mocks base method
func (m *MockContext) ReconcileDatastoreInventory_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconcileDatastoreInventory_Task) (*types.ReconcileDatastoreInventory_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconcileDatastoreInventory_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconcileDatastoreInventory_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileDatastoreInventory_Task indicates an expected call of ReconcileDatastoreInventory_Task
func (mr *MockContextMockRecorder) ReconcileDatastoreInventory_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileDatastoreInventory_Task", reflect.TypeOf((*MockContext)(nil).ReconcileDatastoreInventory_Task), ctx, r, req)
}

// ReconfigVM_Task mocks base method
func (m *MockContext) ReconfigVM_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigVM_Task) (*types.ReconfigVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigVM_Task indicates an expected call of ReconfigVM_Task
func (mr *MockContextMockRecorder) ReconfigVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigVM_Task", reflect.TypeOf((*MockContext)(nil).ReconfigVM_Task), ctx, r, req)
}

// ReconfigurationSatisfiable mocks base method
func (m *MockContext) ReconfigurationSatisfiable(ctx context.Context, r soap.RoundTripper, req *types.ReconfigurationSatisfiable) (*types.ReconfigurationSatisfiableResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigurationSatisfiable", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigurationSatisfiableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigurationSatisfiable indicates an expected call of ReconfigurationSatisfiable
func (mr *MockContextMockRecorder) ReconfigurationSatisfiable(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigurationSatisfiable", reflect.TypeOf((*MockContext)(nil).ReconfigurationSatisfiable), ctx, r, req)
}

// ReconfigureAlarm mocks base method
func (m *MockContext) ReconfigureAlarm(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureAlarm) (*types.ReconfigureAlarmResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureAlarm", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureAlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureAlarm indicates an expected call of ReconfigureAlarm
func (mr *MockContextMockRecorder) ReconfigureAlarm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureAlarm", reflect.TypeOf((*MockContext)(nil).ReconfigureAlarm), ctx, r, req)
}

// ReconfigureAutostart mocks base method
func (m *MockContext) ReconfigureAutostart(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureAutostart) (*types.ReconfigureAutostartResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureAutostart", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureAutostartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureAutostart indicates an expected call of ReconfigureAutostart
func (mr *MockContextMockRecorder) ReconfigureAutostart(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureAutostart", reflect.TypeOf((*MockContext)(nil).ReconfigureAutostart), ctx, r, req)
}

// ReconfigureCluster_Task mocks base method
func (m *MockContext) ReconfigureCluster_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureCluster_Task) (*types.ReconfigureCluster_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureCluster_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureCluster_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureCluster_Task indicates an expected call of ReconfigureCluster_Task
func (mr *MockContextMockRecorder) ReconfigureCluster_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureCluster_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureCluster_Task), ctx, r, req)
}

// ReconfigureComputeResource_Task mocks base method
func (m *MockContext) ReconfigureComputeResource_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureComputeResource_Task) (*types.ReconfigureComputeResource_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureComputeResource_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureComputeResource_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureComputeResource_Task indicates an expected call of ReconfigureComputeResource_Task
func (mr *MockContextMockRecorder) ReconfigureComputeResource_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureComputeResource_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureComputeResource_Task), ctx, r, req)
}

// ReconfigureDVPort_Task mocks base method
func (m *MockContext) ReconfigureDVPort_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureDVPort_Task) (*types.ReconfigureDVPort_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureDVPort_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureDVPort_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureDVPort_Task indicates an expected call of ReconfigureDVPort_Task
func (mr *MockContextMockRecorder) ReconfigureDVPort_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureDVPort_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureDVPort_Task), ctx, r, req)
}

// ReconfigureDVPortgroup_Task mocks base method
func (m *MockContext) ReconfigureDVPortgroup_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureDVPortgroup_Task) (*types.ReconfigureDVPortgroup_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureDVPortgroup_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureDVPortgroup_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureDVPortgroup_Task indicates an expected call of ReconfigureDVPortgroup_Task
func (mr *MockContextMockRecorder) ReconfigureDVPortgroup_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureDVPortgroup_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureDVPortgroup_Task), ctx, r, req)
}

// ReconfigureDatacenter_Task mocks base method
func (m *MockContext) ReconfigureDatacenter_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureDatacenter_Task) (*types.ReconfigureDatacenter_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureDatacenter_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureDatacenter_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureDatacenter_Task indicates an expected call of ReconfigureDatacenter_Task
func (mr *MockContextMockRecorder) ReconfigureDatacenter_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureDatacenter_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureDatacenter_Task), ctx, r, req)
}

// ReconfigureDomObject mocks base method
func (m *MockContext) ReconfigureDomObject(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureDomObject) (*types.ReconfigureDomObjectResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureDomObject", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureDomObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureDomObject indicates an expected call of ReconfigureDomObject
func (mr *MockContextMockRecorder) ReconfigureDomObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureDomObject", reflect.TypeOf((*MockContext)(nil).ReconfigureDomObject), ctx, r, req)
}

// ReconfigureDvs_Task mocks base method
func (m *MockContext) ReconfigureDvs_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureDvs_Task) (*types.ReconfigureDvs_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureDvs_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureDvs_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureDvs_Task indicates an expected call of ReconfigureDvs_Task
func (mr *MockContextMockRecorder) ReconfigureDvs_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureDvs_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureDvs_Task), ctx, r, req)
}

// ReconfigureHostForDAS_Task mocks base method
func (m *MockContext) ReconfigureHostForDAS_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureHostForDAS_Task) (*types.ReconfigureHostForDAS_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureHostForDAS_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureHostForDAS_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureHostForDAS_Task indicates an expected call of ReconfigureHostForDAS_Task
func (mr *MockContextMockRecorder) ReconfigureHostForDAS_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureHostForDAS_Task", reflect.TypeOf((*MockContext)(nil).ReconfigureHostForDAS_Task), ctx, r, req)
}

// ReconfigureScheduledTask mocks base method
func (m *MockContext) ReconfigureScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureScheduledTask) (*types.ReconfigureScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureScheduledTask indicates an expected call of ReconfigureScheduledTask
func (mr *MockContextMockRecorder) ReconfigureScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureScheduledTask", reflect.TypeOf((*MockContext)(nil).ReconfigureScheduledTask), ctx, r, req)
}

// ReconfigureServiceConsoleReservation mocks base method
func (m *MockContext) ReconfigureServiceConsoleReservation(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureServiceConsoleReservation) (*types.ReconfigureServiceConsoleReservationResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureServiceConsoleReservation", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureServiceConsoleReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureServiceConsoleReservation indicates an expected call of ReconfigureServiceConsoleReservation
func (mr *MockContextMockRecorder) ReconfigureServiceConsoleReservation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureServiceConsoleReservation", reflect.TypeOf((*MockContext)(nil).ReconfigureServiceConsoleReservation), ctx, r, req)
}

// ReconfigureSnmpAgent mocks base method
func (m *MockContext) ReconfigureSnmpAgent(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureSnmpAgent) (*types.ReconfigureSnmpAgentResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureSnmpAgent", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureSnmpAgentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureSnmpAgent indicates an expected call of ReconfigureSnmpAgent
func (mr *MockContextMockRecorder) ReconfigureSnmpAgent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureSnmpAgent", reflect.TypeOf((*MockContext)(nil).ReconfigureSnmpAgent), ctx, r, req)
}

// ReconfigureVirtualMachineReservation mocks base method
func (m *MockContext) ReconfigureVirtualMachineReservation(ctx context.Context, r soap.RoundTripper, req *types.ReconfigureVirtualMachineReservation) (*types.ReconfigureVirtualMachineReservationResponse, error) {
	ret := m.ctrl.Call(m, "ReconfigureVirtualMachineReservation", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconfigureVirtualMachineReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconfigureVirtualMachineReservation indicates an expected call of ReconfigureVirtualMachineReservation
func (mr *MockContextMockRecorder) ReconfigureVirtualMachineReservation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconfigureVirtualMachineReservation", reflect.TypeOf((*MockContext)(nil).ReconfigureVirtualMachineReservation), ctx, r, req)
}

// ReconnectHost_Task mocks base method
func (m *MockContext) ReconnectHost_Task(ctx context.Context, r soap.RoundTripper, req *types.ReconnectHost_Task) (*types.ReconnectHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ReconnectHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ReconnectHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconnectHost_Task indicates an expected call of ReconnectHost_Task
func (mr *MockContextMockRecorder) ReconnectHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectHost_Task", reflect.TypeOf((*MockContext)(nil).ReconnectHost_Task), ctx, r, req)
}

// RectifyDvsHost_Task mocks base method
func (m *MockContext) RectifyDvsHost_Task(ctx context.Context, r soap.RoundTripper, req *types.RectifyDvsHost_Task) (*types.RectifyDvsHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RectifyDvsHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RectifyDvsHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyDvsHost_Task indicates an expected call of RectifyDvsHost_Task
func (mr *MockContextMockRecorder) RectifyDvsHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyDvsHost_Task", reflect.TypeOf((*MockContext)(nil).RectifyDvsHost_Task), ctx, r, req)
}

// RectifyDvsOnHost_Task mocks base method
func (m *MockContext) RectifyDvsOnHost_Task(ctx context.Context, r soap.RoundTripper, req *types.RectifyDvsOnHost_Task) (*types.RectifyDvsOnHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RectifyDvsOnHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RectifyDvsOnHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyDvsOnHost_Task indicates an expected call of RectifyDvsOnHost_Task
func (mr *MockContextMockRecorder) RectifyDvsOnHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyDvsOnHost_Task", reflect.TypeOf((*MockContext)(nil).RectifyDvsOnHost_Task), ctx, r, req)
}

// Refresh mocks base method
func (m *MockContext) Refresh(ctx context.Context, r soap.RoundTripper, req *types.Refresh) (*types.RefreshResponse, error) {
	ret := m.ctrl.Call(m, "Refresh", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh
func (mr *MockContextMockRecorder) Refresh(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockContext)(nil).Refresh), ctx, r, req)
}

// RefreshDVPortState mocks base method
func (m *MockContext) RefreshDVPortState(ctx context.Context, r soap.RoundTripper, req *types.RefreshDVPortState) (*types.RefreshDVPortStateResponse, error) {
	ret := m.ctrl.Call(m, "RefreshDVPortState", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshDVPortStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshDVPortState indicates an expected call of RefreshDVPortState
func (mr *MockContextMockRecorder) RefreshDVPortState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDVPortState", reflect.TypeOf((*MockContext)(nil).RefreshDVPortState), ctx, r, req)
}

// RefreshDatastore mocks base method
func (m *MockContext) RefreshDatastore(ctx context.Context, r soap.RoundTripper, req *types.RefreshDatastore) (*types.RefreshDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "RefreshDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshDatastore indicates an expected call of RefreshDatastore
func (mr *MockContextMockRecorder) RefreshDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDatastore", reflect.TypeOf((*MockContext)(nil).RefreshDatastore), ctx, r, req)
}

// RefreshDatastoreStorageInfo mocks base method
func (m *MockContext) RefreshDatastoreStorageInfo(ctx context.Context, r soap.RoundTripper, req *types.RefreshDatastoreStorageInfo) (*types.RefreshDatastoreStorageInfoResponse, error) {
	ret := m.ctrl.Call(m, "RefreshDatastoreStorageInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshDatastoreStorageInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshDatastoreStorageInfo indicates an expected call of RefreshDatastoreStorageInfo
func (mr *MockContextMockRecorder) RefreshDatastoreStorageInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDatastoreStorageInfo", reflect.TypeOf((*MockContext)(nil).RefreshDatastoreStorageInfo), ctx, r, req)
}

// RefreshDateTimeSystem mocks base method
func (m *MockContext) RefreshDateTimeSystem(ctx context.Context, r soap.RoundTripper, req *types.RefreshDateTimeSystem) (*types.RefreshDateTimeSystemResponse, error) {
	ret := m.ctrl.Call(m, "RefreshDateTimeSystem", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshDateTimeSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshDateTimeSystem indicates an expected call of RefreshDateTimeSystem
func (mr *MockContextMockRecorder) RefreshDateTimeSystem(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDateTimeSystem", reflect.TypeOf((*MockContext)(nil).RefreshDateTimeSystem), ctx, r, req)
}

// RefreshFirewall mocks base method
func (m *MockContext) RefreshFirewall(ctx context.Context, r soap.RoundTripper, req *types.RefreshFirewall) (*types.RefreshFirewallResponse, error) {
	ret := m.ctrl.Call(m, "RefreshFirewall", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshFirewallResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshFirewall indicates an expected call of RefreshFirewall
func (mr *MockContextMockRecorder) RefreshFirewall(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshFirewall", reflect.TypeOf((*MockContext)(nil).RefreshFirewall), ctx, r, req)
}

// RefreshGraphicsManager mocks base method
func (m *MockContext) RefreshGraphicsManager(ctx context.Context, r soap.RoundTripper, req *types.RefreshGraphicsManager) (*types.RefreshGraphicsManagerResponse, error) {
	ret := m.ctrl.Call(m, "RefreshGraphicsManager", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshGraphicsManagerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshGraphicsManager indicates an expected call of RefreshGraphicsManager
func (mr *MockContextMockRecorder) RefreshGraphicsManager(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshGraphicsManager", reflect.TypeOf((*MockContext)(nil).RefreshGraphicsManager), ctx, r, req)
}

// RefreshHealthStatusSystem mocks base method
func (m *MockContext) RefreshHealthStatusSystem(ctx context.Context, r soap.RoundTripper, req *types.RefreshHealthStatusSystem) (*types.RefreshHealthStatusSystemResponse, error) {
	ret := m.ctrl.Call(m, "RefreshHealthStatusSystem", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshHealthStatusSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshHealthStatusSystem indicates an expected call of RefreshHealthStatusSystem
func (mr *MockContextMockRecorder) RefreshHealthStatusSystem(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshHealthStatusSystem", reflect.TypeOf((*MockContext)(nil).RefreshHealthStatusSystem), ctx, r, req)
}

// RefreshNetworkSystem mocks base method
func (m *MockContext) RefreshNetworkSystem(ctx context.Context, r soap.RoundTripper, req *types.RefreshNetworkSystem) (*types.RefreshNetworkSystemResponse, error) {
	ret := m.ctrl.Call(m, "RefreshNetworkSystem", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshNetworkSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshNetworkSystem indicates an expected call of RefreshNetworkSystem
func (mr *MockContextMockRecorder) RefreshNetworkSystem(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshNetworkSystem", reflect.TypeOf((*MockContext)(nil).RefreshNetworkSystem), ctx, r, req)
}

// RefreshRecommendation mocks base method
func (m *MockContext) RefreshRecommendation(ctx context.Context, r soap.RoundTripper, req *types.RefreshRecommendation) (*types.RefreshRecommendationResponse, error) {
	ret := m.ctrl.Call(m, "RefreshRecommendation", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshRecommendation indicates an expected call of RefreshRecommendation
func (mr *MockContextMockRecorder) RefreshRecommendation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshRecommendation", reflect.TypeOf((*MockContext)(nil).RefreshRecommendation), ctx, r, req)
}

// RefreshRuntime mocks base method
func (m *MockContext) RefreshRuntime(ctx context.Context, r soap.RoundTripper, req *types.RefreshRuntime) (*types.RefreshRuntimeResponse, error) {
	ret := m.ctrl.Call(m, "RefreshRuntime", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshRuntimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshRuntime indicates an expected call of RefreshRuntime
func (mr *MockContextMockRecorder) RefreshRuntime(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshRuntime", reflect.TypeOf((*MockContext)(nil).RefreshRuntime), ctx, r, req)
}

// RefreshServices mocks base method
func (m *MockContext) RefreshServices(ctx context.Context, r soap.RoundTripper, req *types.RefreshServices) (*types.RefreshServicesResponse, error) {
	ret := m.ctrl.Call(m, "RefreshServices", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshServices indicates an expected call of RefreshServices
func (mr *MockContextMockRecorder) RefreshServices(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshServices", reflect.TypeOf((*MockContext)(nil).RefreshServices), ctx, r, req)
}

// RefreshStorageDrsRecommendation mocks base method
func (m *MockContext) RefreshStorageDrsRecommendation(ctx context.Context, r soap.RoundTripper, req *types.RefreshStorageDrsRecommendation) (*types.RefreshStorageDrsRecommendationResponse, error) {
	ret := m.ctrl.Call(m, "RefreshStorageDrsRecommendation", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshStorageDrsRecommendationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshStorageDrsRecommendation indicates an expected call of RefreshStorageDrsRecommendation
func (mr *MockContextMockRecorder) RefreshStorageDrsRecommendation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshStorageDrsRecommendation", reflect.TypeOf((*MockContext)(nil).RefreshStorageDrsRecommendation), ctx, r, req)
}

// RefreshStorageInfo mocks base method
func (m *MockContext) RefreshStorageInfo(ctx context.Context, r soap.RoundTripper, req *types.RefreshStorageInfo) (*types.RefreshStorageInfoResponse, error) {
	ret := m.ctrl.Call(m, "RefreshStorageInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshStorageInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshStorageInfo indicates an expected call of RefreshStorageInfo
func (mr *MockContextMockRecorder) RefreshStorageInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshStorageInfo", reflect.TypeOf((*MockContext)(nil).RefreshStorageInfo), ctx, r, req)
}

// RefreshStorageSystem mocks base method
func (m *MockContext) RefreshStorageSystem(ctx context.Context, r soap.RoundTripper, req *types.RefreshStorageSystem) (*types.RefreshStorageSystemResponse, error) {
	ret := m.ctrl.Call(m, "RefreshStorageSystem", ctx, r, req)
	ret0, _ := ret[0].(*types.RefreshStorageSystemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshStorageSystem indicates an expected call of RefreshStorageSystem
func (mr *MockContextMockRecorder) RefreshStorageSystem(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshStorageSystem", reflect.TypeOf((*MockContext)(nil).RefreshStorageSystem), ctx, r, req)
}

// RegisterChildVM_Task mocks base method
func (m *MockContext) RegisterChildVM_Task(ctx context.Context, r soap.RoundTripper, req *types.RegisterChildVM_Task) (*types.RegisterChildVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RegisterChildVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterChildVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterChildVM_Task indicates an expected call of RegisterChildVM_Task
func (mr *MockContextMockRecorder) RegisterChildVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChildVM_Task", reflect.TypeOf((*MockContext)(nil).RegisterChildVM_Task), ctx, r, req)
}

// RegisterDisk mocks base method
func (m *MockContext) RegisterDisk(ctx context.Context, r soap.RoundTripper, req *types.RegisterDisk) (*types.RegisterDiskResponse, error) {
	ret := m.ctrl.Call(m, "RegisterDisk", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterDiskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDisk indicates an expected call of RegisterDisk
func (mr *MockContextMockRecorder) RegisterDisk(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDisk", reflect.TypeOf((*MockContext)(nil).RegisterDisk), ctx, r, req)
}

// RegisterExtension mocks base method
func (m *MockContext) RegisterExtension(ctx context.Context, r soap.RoundTripper, req *types.RegisterExtension) (*types.RegisterExtensionResponse, error) {
	ret := m.ctrl.Call(m, "RegisterExtension", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterExtension indicates an expected call of RegisterExtension
func (mr *MockContextMockRecorder) RegisterExtension(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterExtension", reflect.TypeOf((*MockContext)(nil).RegisterExtension), ctx, r, req)
}

// RegisterHealthUpdateProvider mocks base method
func (m *MockContext) RegisterHealthUpdateProvider(ctx context.Context, r soap.RoundTripper, req *types.RegisterHealthUpdateProvider) (*types.RegisterHealthUpdateProviderResponse, error) {
	ret := m.ctrl.Call(m, "RegisterHealthUpdateProvider", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterHealthUpdateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHealthUpdateProvider indicates an expected call of RegisterHealthUpdateProvider
func (mr *MockContextMockRecorder) RegisterHealthUpdateProvider(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHealthUpdateProvider", reflect.TypeOf((*MockContext)(nil).RegisterHealthUpdateProvider), ctx, r, req)
}

// RegisterKmipServer mocks base method
func (m *MockContext) RegisterKmipServer(ctx context.Context, r soap.RoundTripper, req *types.RegisterKmipServer) (*types.RegisterKmipServerResponse, error) {
	ret := m.ctrl.Call(m, "RegisterKmipServer", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterKmipServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterKmipServer indicates an expected call of RegisterKmipServer
func (mr *MockContextMockRecorder) RegisterKmipServer(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterKmipServer", reflect.TypeOf((*MockContext)(nil).RegisterKmipServer), ctx, r, req)
}

// RegisterVM_Task mocks base method
func (m *MockContext) RegisterVM_Task(ctx context.Context, r soap.RoundTripper, req *types.RegisterVM_Task) (*types.RegisterVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RegisterVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RegisterVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVM_Task indicates an expected call of RegisterVM_Task
func (mr *MockContextMockRecorder) RegisterVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVM_Task", reflect.TypeOf((*MockContext)(nil).RegisterVM_Task), ctx, r, req)
}

// ReleaseCredentialsInGuest mocks base method
func (m *MockContext) ReleaseCredentialsInGuest(ctx context.Context, r soap.RoundTripper, req *types.ReleaseCredentialsInGuest) (*types.ReleaseCredentialsInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ReleaseCredentialsInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ReleaseCredentialsInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseCredentialsInGuest indicates an expected call of ReleaseCredentialsInGuest
func (mr *MockContextMockRecorder) ReleaseCredentialsInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseCredentialsInGuest", reflect.TypeOf((*MockContext)(nil).ReleaseCredentialsInGuest), ctx, r, req)
}

// ReleaseIpAllocation mocks base method
func (m *MockContext) ReleaseIpAllocation(ctx context.Context, r soap.RoundTripper, req *types.ReleaseIpAllocation) (*types.ReleaseIpAllocationResponse, error) {
	ret := m.ctrl.Call(m, "ReleaseIpAllocation", ctx, r, req)
	ret0, _ := ret[0].(*types.ReleaseIpAllocationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseIpAllocation indicates an expected call of ReleaseIpAllocation
func (mr *MockContextMockRecorder) ReleaseIpAllocation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseIpAllocation", reflect.TypeOf((*MockContext)(nil).ReleaseIpAllocation), ctx, r, req)
}

// ReleaseManagedSnapshot mocks base method
func (m *MockContext) ReleaseManagedSnapshot(ctx context.Context, r soap.RoundTripper, req *types.ReleaseManagedSnapshot) (*types.ReleaseManagedSnapshotResponse, error) {
	ret := m.ctrl.Call(m, "ReleaseManagedSnapshot", ctx, r, req)
	ret0, _ := ret[0].(*types.ReleaseManagedSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseManagedSnapshot indicates an expected call of ReleaseManagedSnapshot
func (mr *MockContextMockRecorder) ReleaseManagedSnapshot(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseManagedSnapshot", reflect.TypeOf((*MockContext)(nil).ReleaseManagedSnapshot), ctx, r, req)
}

// Reload mocks base method
func (m *MockContext) Reload(ctx context.Context, r soap.RoundTripper, req *types.Reload) (*types.ReloadResponse, error) {
	ret := m.ctrl.Call(m, "Reload", ctx, r, req)
	ret0, _ := ret[0].(*types.ReloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload
func (mr *MockContextMockRecorder) Reload(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockContext)(nil).Reload), ctx, r, req)
}

// RelocateVM_Task mocks base method
func (m *MockContext) RelocateVM_Task(ctx context.Context, r soap.RoundTripper, req *types.RelocateVM_Task) (*types.RelocateVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RelocateVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RelocateVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelocateVM_Task indicates an expected call of RelocateVM_Task
func (mr *MockContextMockRecorder) RelocateVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelocateVM_Task", reflect.TypeOf((*MockContext)(nil).RelocateVM_Task), ctx, r, req)
}

// RelocateVStorageObject_Task mocks base method
func (m *MockContext) RelocateVStorageObject_Task(ctx context.Context, r soap.RoundTripper, req *types.RelocateVStorageObject_Task) (*types.RelocateVStorageObject_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RelocateVStorageObject_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RelocateVStorageObject_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RelocateVStorageObject_Task indicates an expected call of RelocateVStorageObject_Task
func (mr *MockContextMockRecorder) RelocateVStorageObject_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelocateVStorageObject_Task", reflect.TypeOf((*MockContext)(nil).RelocateVStorageObject_Task), ctx, r, req)
}

// RemoveAlarm mocks base method
func (m *MockContext) RemoveAlarm(ctx context.Context, r soap.RoundTripper, req *types.RemoveAlarm) (*types.RemoveAlarmResponse, error) {
	ret := m.ctrl.Call(m, "RemoveAlarm", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveAlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAlarm indicates an expected call of RemoveAlarm
func (mr *MockContextMockRecorder) RemoveAlarm(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAlarm", reflect.TypeOf((*MockContext)(nil).RemoveAlarm), ctx, r, req)
}

// RemoveAllSnapshots_Task mocks base method
func (m *MockContext) RemoveAllSnapshots_Task(ctx context.Context, r soap.RoundTripper, req *types.RemoveAllSnapshots_Task) (*types.RemoveAllSnapshots_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveAllSnapshots_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveAllSnapshots_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAllSnapshots_Task indicates an expected call of RemoveAllSnapshots_Task
func (mr *MockContextMockRecorder) RemoveAllSnapshots_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllSnapshots_Task", reflect.TypeOf((*MockContext)(nil).RemoveAllSnapshots_Task), ctx, r, req)
}

// RemoveAssignedLicense mocks base method
func (m *MockContext) RemoveAssignedLicense(ctx context.Context, r soap.RoundTripper, req *types.RemoveAssignedLicense) (*types.RemoveAssignedLicenseResponse, error) {
	ret := m.ctrl.Call(m, "RemoveAssignedLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveAssignedLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAssignedLicense indicates an expected call of RemoveAssignedLicense
func (mr *MockContextMockRecorder) RemoveAssignedLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAssignedLicense", reflect.TypeOf((*MockContext)(nil).RemoveAssignedLicense), ctx, r, req)
}

// RemoveAuthorizationRole mocks base method
func (m *MockContext) RemoveAuthorizationRole(ctx context.Context, r soap.RoundTripper, req *types.RemoveAuthorizationRole) (*types.RemoveAuthorizationRoleResponse, error) {
	ret := m.ctrl.Call(m, "RemoveAuthorizationRole", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveAuthorizationRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAuthorizationRole indicates an expected call of RemoveAuthorizationRole
func (mr *MockContextMockRecorder) RemoveAuthorizationRole(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAuthorizationRole", reflect.TypeOf((*MockContext)(nil).RemoveAuthorizationRole), ctx, r, req)
}

// RemoveCustomFieldDef mocks base method
func (m *MockContext) RemoveCustomFieldDef(ctx context.Context, r soap.RoundTripper, req *types.RemoveCustomFieldDef) (*types.RemoveCustomFieldDefResponse, error) {
	ret := m.ctrl.Call(m, "RemoveCustomFieldDef", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveCustomFieldDefResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveCustomFieldDef indicates an expected call of RemoveCustomFieldDef
func (mr *MockContextMockRecorder) RemoveCustomFieldDef(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCustomFieldDef", reflect.TypeOf((*MockContext)(nil).RemoveCustomFieldDef), ctx, r, req)
}

// RemoveDatastore mocks base method
func (m *MockContext) RemoveDatastore(ctx context.Context, r soap.RoundTripper, req *types.RemoveDatastore) (*types.RemoveDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "RemoveDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDatastore indicates an expected call of RemoveDatastore
func (mr *MockContextMockRecorder) RemoveDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDatastore", reflect.TypeOf((*MockContext)(nil).RemoveDatastore), ctx, r, req)
}

// RemoveDatastoreEx_Task mocks base method
func (m *MockContext) RemoveDatastoreEx_Task(ctx context.Context, r soap.RoundTripper, req *types.RemoveDatastoreEx_Task) (*types.RemoveDatastoreEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveDatastoreEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveDatastoreEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDatastoreEx_Task indicates an expected call of RemoveDatastoreEx_Task
func (mr *MockContextMockRecorder) RemoveDatastoreEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDatastoreEx_Task", reflect.TypeOf((*MockContext)(nil).RemoveDatastoreEx_Task), ctx, r, req)
}

// RemoveDiskMapping_Task mocks base method
func (m *MockContext) RemoveDiskMapping_Task(ctx context.Context, r soap.RoundTripper, req *types.RemoveDiskMapping_Task) (*types.RemoveDiskMapping_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveDiskMapping_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveDiskMapping_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDiskMapping_Task indicates an expected call of RemoveDiskMapping_Task
func (mr *MockContextMockRecorder) RemoveDiskMapping_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDiskMapping_Task", reflect.TypeOf((*MockContext)(nil).RemoveDiskMapping_Task), ctx, r, req)
}

// RemoveDisk_Task mocks base method
func (m *MockContext) RemoveDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.RemoveDisk_Task) (*types.RemoveDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDisk_Task indicates an expected call of RemoveDisk_Task
func (mr *MockContextMockRecorder) RemoveDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDisk_Task", reflect.TypeOf((*MockContext)(nil).RemoveDisk_Task), ctx, r, req)
}

// RemoveEntityPermission mocks base method
func (m *MockContext) RemoveEntityPermission(ctx context.Context, r soap.RoundTripper, req *types.RemoveEntityPermission) (*types.RemoveEntityPermissionResponse, error) {
	ret := m.ctrl.Call(m, "RemoveEntityPermission", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveEntityPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveEntityPermission indicates an expected call of RemoveEntityPermission
func (mr *MockContextMockRecorder) RemoveEntityPermission(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntityPermission", reflect.TypeOf((*MockContext)(nil).RemoveEntityPermission), ctx, r, req)
}

// RemoveFilter mocks base method
func (m *MockContext) RemoveFilter(ctx context.Context, r soap.RoundTripper, req *types.RemoveFilter) (*types.RemoveFilterResponse, error) {
	ret := m.ctrl.Call(m, "RemoveFilter", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveFilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilter indicates an expected call of RemoveFilter
func (mr *MockContextMockRecorder) RemoveFilter(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilter", reflect.TypeOf((*MockContext)(nil).RemoveFilter), ctx, r, req)
}

// RemoveFilterEntities mocks base method
func (m *MockContext) RemoveFilterEntities(ctx context.Context, r soap.RoundTripper, req *types.RemoveFilterEntities) (*types.RemoveFilterEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "RemoveFilterEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveFilterEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilterEntities indicates an expected call of RemoveFilterEntities
func (mr *MockContextMockRecorder) RemoveFilterEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilterEntities", reflect.TypeOf((*MockContext)(nil).RemoveFilterEntities), ctx, r, req)
}

// RemoveGroup mocks base method
func (m *MockContext) RemoveGroup(ctx context.Context, r soap.RoundTripper, req *types.RemoveGroup) (*types.RemoveGroupResponse, error) {
	ret := m.ctrl.Call(m, "RemoveGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGroup indicates an expected call of RemoveGroup
func (mr *MockContextMockRecorder) RemoveGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockContext)(nil).RemoveGroup), ctx, r, req)
}

// RemoveGuestAlias mocks base method
func (m *MockContext) RemoveGuestAlias(ctx context.Context, r soap.RoundTripper, req *types.RemoveGuestAlias) (*types.RemoveGuestAliasResponse, error) {
	ret := m.ctrl.Call(m, "RemoveGuestAlias", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveGuestAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGuestAlias indicates an expected call of RemoveGuestAlias
func (mr *MockContextMockRecorder) RemoveGuestAlias(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGuestAlias", reflect.TypeOf((*MockContext)(nil).RemoveGuestAlias), ctx, r, req)
}

// RemoveGuestAliasByCert mocks base method
func (m *MockContext) RemoveGuestAliasByCert(ctx context.Context, r soap.RoundTripper, req *types.RemoveGuestAliasByCert) (*types.RemoveGuestAliasByCertResponse, error) {
	ret := m.ctrl.Call(m, "RemoveGuestAliasByCert", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveGuestAliasByCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveGuestAliasByCert indicates an expected call of RemoveGuestAliasByCert
func (mr *MockContextMockRecorder) RemoveGuestAliasByCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGuestAliasByCert", reflect.TypeOf((*MockContext)(nil).RemoveGuestAliasByCert), ctx, r, req)
}

// RemoveInternetScsiSendTargets mocks base method
func (m *MockContext) RemoveInternetScsiSendTargets(ctx context.Context, r soap.RoundTripper, req *types.RemoveInternetScsiSendTargets) (*types.RemoveInternetScsiSendTargetsResponse, error) {
	ret := m.ctrl.Call(m, "RemoveInternetScsiSendTargets", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveInternetScsiSendTargetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInternetScsiSendTargets indicates an expected call of RemoveInternetScsiSendTargets
func (mr *MockContextMockRecorder) RemoveInternetScsiSendTargets(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInternetScsiSendTargets", reflect.TypeOf((*MockContext)(nil).RemoveInternetScsiSendTargets), ctx, r, req)
}

// RemoveInternetScsiStaticTargets mocks base method
func (m *MockContext) RemoveInternetScsiStaticTargets(ctx context.Context, r soap.RoundTripper, req *types.RemoveInternetScsiStaticTargets) (*types.RemoveInternetScsiStaticTargetsResponse, error) {
	ret := m.ctrl.Call(m, "RemoveInternetScsiStaticTargets", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveInternetScsiStaticTargetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInternetScsiStaticTargets indicates an expected call of RemoveInternetScsiStaticTargets
func (mr *MockContextMockRecorder) RemoveInternetScsiStaticTargets(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInternetScsiStaticTargets", reflect.TypeOf((*MockContext)(nil).RemoveInternetScsiStaticTargets), ctx, r, req)
}

// RemoveKey mocks base method
func (m *MockContext) RemoveKey(ctx context.Context, r soap.RoundTripper, req *types.RemoveKey) (*types.RemoveKeyResponse, error) {
	ret := m.ctrl.Call(m, "RemoveKey", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKey indicates an expected call of RemoveKey
func (mr *MockContextMockRecorder) RemoveKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKey", reflect.TypeOf((*MockContext)(nil).RemoveKey), ctx, r, req)
}

// RemoveKeys mocks base method
func (m *MockContext) RemoveKeys(ctx context.Context, r soap.RoundTripper, req *types.RemoveKeys) (*types.RemoveKeysResponse, error) {
	ret := m.ctrl.Call(m, "RemoveKeys", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKeys indicates an expected call of RemoveKeys
func (mr *MockContextMockRecorder) RemoveKeys(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKeys", reflect.TypeOf((*MockContext)(nil).RemoveKeys), ctx, r, req)
}

// RemoveKmipServer mocks base method
func (m *MockContext) RemoveKmipServer(ctx context.Context, r soap.RoundTripper, req *types.RemoveKmipServer) (*types.RemoveKmipServerResponse, error) {
	ret := m.ctrl.Call(m, "RemoveKmipServer", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveKmipServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKmipServer indicates an expected call of RemoveKmipServer
func (mr *MockContextMockRecorder) RemoveKmipServer(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKmipServer", reflect.TypeOf((*MockContext)(nil).RemoveKmipServer), ctx, r, req)
}

// RemoveLicense mocks base method
func (m *MockContext) RemoveLicense(ctx context.Context, r soap.RoundTripper, req *types.RemoveLicense) (*types.RemoveLicenseResponse, error) {
	ret := m.ctrl.Call(m, "RemoveLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLicense indicates an expected call of RemoveLicense
func (mr *MockContextMockRecorder) RemoveLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLicense", reflect.TypeOf((*MockContext)(nil).RemoveLicense), ctx, r, req)
}

// RemoveLicenseLabel mocks base method
func (m *MockContext) RemoveLicenseLabel(ctx context.Context, r soap.RoundTripper, req *types.RemoveLicenseLabel) (*types.RemoveLicenseLabelResponse, error) {
	ret := m.ctrl.Call(m, "RemoveLicenseLabel", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveLicenseLabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLicenseLabel indicates an expected call of RemoveLicenseLabel
func (mr *MockContextMockRecorder) RemoveLicenseLabel(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLicenseLabel", reflect.TypeOf((*MockContext)(nil).RemoveLicenseLabel), ctx, r, req)
}

// RemoveMonitoredEntities mocks base method
func (m *MockContext) RemoveMonitoredEntities(ctx context.Context, r soap.RoundTripper, req *types.RemoveMonitoredEntities) (*types.RemoveMonitoredEntitiesResponse, error) {
	ret := m.ctrl.Call(m, "RemoveMonitoredEntities", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveMonitoredEntitiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMonitoredEntities indicates an expected call of RemoveMonitoredEntities
func (mr *MockContextMockRecorder) RemoveMonitoredEntities(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMonitoredEntities", reflect.TypeOf((*MockContext)(nil).RemoveMonitoredEntities), ctx, r, req)
}

// RemoveNetworkResourcePool mocks base method
func (m *MockContext) RemoveNetworkResourcePool(ctx context.Context, r soap.RoundTripper, req *types.RemoveNetworkResourcePool) (*types.RemoveNetworkResourcePoolResponse, error) {
	ret := m.ctrl.Call(m, "RemoveNetworkResourcePool", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveNetworkResourcePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNetworkResourcePool indicates an expected call of RemoveNetworkResourcePool
func (mr *MockContextMockRecorder) RemoveNetworkResourcePool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetworkResourcePool", reflect.TypeOf((*MockContext)(nil).RemoveNetworkResourcePool), ctx, r, req)
}

// RemovePerfInterval mocks base method
func (m *MockContext) RemovePerfInterval(ctx context.Context, r soap.RoundTripper, req *types.RemovePerfInterval) (*types.RemovePerfIntervalResponse, error) {
	ret := m.ctrl.Call(m, "RemovePerfInterval", ctx, r, req)
	ret0, _ := ret[0].(*types.RemovePerfIntervalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePerfInterval indicates an expected call of RemovePerfInterval
func (mr *MockContextMockRecorder) RemovePerfInterval(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePerfInterval", reflect.TypeOf((*MockContext)(nil).RemovePerfInterval), ctx, r, req)
}

// RemovePortGroup mocks base method
func (m *MockContext) RemovePortGroup(ctx context.Context, r soap.RoundTripper, req *types.RemovePortGroup) (*types.RemovePortGroupResponse, error) {
	ret := m.ctrl.Call(m, "RemovePortGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.RemovePortGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePortGroup indicates an expected call of RemovePortGroup
func (mr *MockContextMockRecorder) RemovePortGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePortGroup", reflect.TypeOf((*MockContext)(nil).RemovePortGroup), ctx, r, req)
}

// RemoveScheduledTask mocks base method
func (m *MockContext) RemoveScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.RemoveScheduledTask) (*types.RemoveScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveScheduledTask indicates an expected call of RemoveScheduledTask
func (mr *MockContextMockRecorder) RemoveScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveScheduledTask", reflect.TypeOf((*MockContext)(nil).RemoveScheduledTask), ctx, r, req)
}

// RemoveServiceConsoleVirtualNic mocks base method
func (m *MockContext) RemoveServiceConsoleVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.RemoveServiceConsoleVirtualNic) (*types.RemoveServiceConsoleVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "RemoveServiceConsoleVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveServiceConsoleVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceConsoleVirtualNic indicates an expected call of RemoveServiceConsoleVirtualNic
func (mr *MockContextMockRecorder) RemoveServiceConsoleVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceConsoleVirtualNic", reflect.TypeOf((*MockContext)(nil).RemoveServiceConsoleVirtualNic), ctx, r, req)
}

// RemoveSmartCardTrustAnchor mocks base method
func (m *MockContext) RemoveSmartCardTrustAnchor(ctx context.Context, r soap.RoundTripper, req *types.RemoveSmartCardTrustAnchor) (*types.RemoveSmartCardTrustAnchorResponse, error) {
	ret := m.ctrl.Call(m, "RemoveSmartCardTrustAnchor", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveSmartCardTrustAnchorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSmartCardTrustAnchor indicates an expected call of RemoveSmartCardTrustAnchor
func (mr *MockContextMockRecorder) RemoveSmartCardTrustAnchor(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSmartCardTrustAnchor", reflect.TypeOf((*MockContext)(nil).RemoveSmartCardTrustAnchor), ctx, r, req)
}

// RemoveSmartCardTrustAnchorByFingerprint mocks base method
func (m *MockContext) RemoveSmartCardTrustAnchorByFingerprint(ctx context.Context, r soap.RoundTripper, req *types.RemoveSmartCardTrustAnchorByFingerprint) (*types.RemoveSmartCardTrustAnchorByFingerprintResponse, error) {
	ret := m.ctrl.Call(m, "RemoveSmartCardTrustAnchorByFingerprint", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveSmartCardTrustAnchorByFingerprintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSmartCardTrustAnchorByFingerprint indicates an expected call of RemoveSmartCardTrustAnchorByFingerprint
func (mr *MockContextMockRecorder) RemoveSmartCardTrustAnchorByFingerprint(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSmartCardTrustAnchorByFingerprint", reflect.TypeOf((*MockContext)(nil).RemoveSmartCardTrustAnchorByFingerprint), ctx, r, req)
}

// RemoveSnapshot_Task mocks base method
func (m *MockContext) RemoveSnapshot_Task(ctx context.Context, r soap.RoundTripper, req *types.RemoveSnapshot_Task) (*types.RemoveSnapshot_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RemoveSnapshot_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveSnapshot_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSnapshot_Task indicates an expected call of RemoveSnapshot_Task
func (mr *MockContextMockRecorder) RemoveSnapshot_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSnapshot_Task", reflect.TypeOf((*MockContext)(nil).RemoveSnapshot_Task), ctx, r, req)
}

// RemoveUser mocks base method
func (m *MockContext) RemoveUser(ctx context.Context, r soap.RoundTripper, req *types.RemoveUser) (*types.RemoveUserResponse, error) {
	ret := m.ctrl.Call(m, "RemoveUser", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockContextMockRecorder) RemoveUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockContext)(nil).RemoveUser), ctx, r, req)
}

// RemoveVirtualNic mocks base method
func (m *MockContext) RemoveVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.RemoveVirtualNic) (*types.RemoveVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "RemoveVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVirtualNic indicates an expected call of RemoveVirtualNic
func (mr *MockContextMockRecorder) RemoveVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVirtualNic", reflect.TypeOf((*MockContext)(nil).RemoveVirtualNic), ctx, r, req)
}

// RemoveVirtualSwitch mocks base method
func (m *MockContext) RemoveVirtualSwitch(ctx context.Context, r soap.RoundTripper, req *types.RemoveVirtualSwitch) (*types.RemoveVirtualSwitchResponse, error) {
	ret := m.ctrl.Call(m, "RemoveVirtualSwitch", ctx, r, req)
	ret0, _ := ret[0].(*types.RemoveVirtualSwitchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVirtualSwitch indicates an expected call of RemoveVirtualSwitch
func (mr *MockContextMockRecorder) RemoveVirtualSwitch(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVirtualSwitch", reflect.TypeOf((*MockContext)(nil).RemoveVirtualSwitch), ctx, r, req)
}

// RenameCustomFieldDef mocks base method
func (m *MockContext) RenameCustomFieldDef(ctx context.Context, r soap.RoundTripper, req *types.RenameCustomFieldDef) (*types.RenameCustomFieldDefResponse, error) {
	ret := m.ctrl.Call(m, "RenameCustomFieldDef", ctx, r, req)
	ret0, _ := ret[0].(*types.RenameCustomFieldDefResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameCustomFieldDef indicates an expected call of RenameCustomFieldDef
func (mr *MockContextMockRecorder) RenameCustomFieldDef(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameCustomFieldDef", reflect.TypeOf((*MockContext)(nil).RenameCustomFieldDef), ctx, r, req)
}

// RenameCustomizationSpec mocks base method
func (m *MockContext) RenameCustomizationSpec(ctx context.Context, r soap.RoundTripper, req *types.RenameCustomizationSpec) (*types.RenameCustomizationSpecResponse, error) {
	ret := m.ctrl.Call(m, "RenameCustomizationSpec", ctx, r, req)
	ret0, _ := ret[0].(*types.RenameCustomizationSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameCustomizationSpec indicates an expected call of RenameCustomizationSpec
func (mr *MockContextMockRecorder) RenameCustomizationSpec(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameCustomizationSpec", reflect.TypeOf((*MockContext)(nil).RenameCustomizationSpec), ctx, r, req)
}

// RenameDatastore mocks base method
func (m *MockContext) RenameDatastore(ctx context.Context, r soap.RoundTripper, req *types.RenameDatastore) (*types.RenameDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "RenameDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.RenameDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameDatastore indicates an expected call of RenameDatastore
func (mr *MockContextMockRecorder) RenameDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameDatastore", reflect.TypeOf((*MockContext)(nil).RenameDatastore), ctx, r, req)
}

// RenameSnapshot mocks base method
func (m *MockContext) RenameSnapshot(ctx context.Context, r soap.RoundTripper, req *types.RenameSnapshot) (*types.RenameSnapshotResponse, error) {
	ret := m.ctrl.Call(m, "RenameSnapshot", ctx, r, req)
	ret0, _ := ret[0].(*types.RenameSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameSnapshot indicates an expected call of RenameSnapshot
func (mr *MockContextMockRecorder) RenameSnapshot(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameSnapshot", reflect.TypeOf((*MockContext)(nil).RenameSnapshot), ctx, r, req)
}

// RenameVStorageObject mocks base method
func (m *MockContext) RenameVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.RenameVStorageObject) (*types.RenameVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "RenameVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.RenameVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameVStorageObject indicates an expected call of RenameVStorageObject
func (mr *MockContextMockRecorder) RenameVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameVStorageObject", reflect.TypeOf((*MockContext)(nil).RenameVStorageObject), ctx, r, req)
}

// Rename_Task mocks base method
func (m *MockContext) Rename_Task(ctx context.Context, r soap.RoundTripper, req *types.Rename_Task) (*types.Rename_TaskResponse, error) {
	ret := m.ctrl.Call(m, "Rename_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.Rename_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rename_Task indicates an expected call of Rename_Task
func (mr *MockContextMockRecorder) Rename_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename_Task", reflect.TypeOf((*MockContext)(nil).Rename_Task), ctx, r, req)
}

// ReplaceCACertificatesAndCRLs mocks base method
func (m *MockContext) ReplaceCACertificatesAndCRLs(ctx context.Context, r soap.RoundTripper, req *types.ReplaceCACertificatesAndCRLs) (*types.ReplaceCACertificatesAndCRLsResponse, error) {
	ret := m.ctrl.Call(m, "ReplaceCACertificatesAndCRLs", ctx, r, req)
	ret0, _ := ret[0].(*types.ReplaceCACertificatesAndCRLsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceCACertificatesAndCRLs indicates an expected call of ReplaceCACertificatesAndCRLs
func (mr *MockContextMockRecorder) ReplaceCACertificatesAndCRLs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceCACertificatesAndCRLs", reflect.TypeOf((*MockContext)(nil).ReplaceCACertificatesAndCRLs), ctx, r, req)
}

// ReplaceSmartCardTrustAnchors mocks base method
func (m *MockContext) ReplaceSmartCardTrustAnchors(ctx context.Context, r soap.RoundTripper, req *types.ReplaceSmartCardTrustAnchors) (*types.ReplaceSmartCardTrustAnchorsResponse, error) {
	ret := m.ctrl.Call(m, "ReplaceSmartCardTrustAnchors", ctx, r, req)
	ret0, _ := ret[0].(*types.ReplaceSmartCardTrustAnchorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceSmartCardTrustAnchors indicates an expected call of ReplaceSmartCardTrustAnchors
func (mr *MockContextMockRecorder) ReplaceSmartCardTrustAnchors(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceSmartCardTrustAnchors", reflect.TypeOf((*MockContext)(nil).ReplaceSmartCardTrustAnchors), ctx, r, req)
}

// RescanAllHba mocks base method
func (m *MockContext) RescanAllHba(ctx context.Context, r soap.RoundTripper, req *types.RescanAllHba) (*types.RescanAllHbaResponse, error) {
	ret := m.ctrl.Call(m, "RescanAllHba", ctx, r, req)
	ret0, _ := ret[0].(*types.RescanAllHbaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescanAllHba indicates an expected call of RescanAllHba
func (mr *MockContextMockRecorder) RescanAllHba(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanAllHba", reflect.TypeOf((*MockContext)(nil).RescanAllHba), ctx, r, req)
}

// RescanHba mocks base method
func (m *MockContext) RescanHba(ctx context.Context, r soap.RoundTripper, req *types.RescanHba) (*types.RescanHbaResponse, error) {
	ret := m.ctrl.Call(m, "RescanHba", ctx, r, req)
	ret0, _ := ret[0].(*types.RescanHbaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescanHba indicates an expected call of RescanHba
func (mr *MockContextMockRecorder) RescanHba(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanHba", reflect.TypeOf((*MockContext)(nil).RescanHba), ctx, r, req)
}

// RescanVffs mocks base method
func (m *MockContext) RescanVffs(ctx context.Context, r soap.RoundTripper, req *types.RescanVffs) (*types.RescanVffsResponse, error) {
	ret := m.ctrl.Call(m, "RescanVffs", ctx, r, req)
	ret0, _ := ret[0].(*types.RescanVffsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescanVffs indicates an expected call of RescanVffs
func (mr *MockContextMockRecorder) RescanVffs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanVffs", reflect.TypeOf((*MockContext)(nil).RescanVffs), ctx, r, req)
}

// RescanVmfs mocks base method
func (m *MockContext) RescanVmfs(ctx context.Context, r soap.RoundTripper, req *types.RescanVmfs) (*types.RescanVmfsResponse, error) {
	ret := m.ctrl.Call(m, "RescanVmfs", ctx, r, req)
	ret0, _ := ret[0].(*types.RescanVmfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescanVmfs indicates an expected call of RescanVmfs
func (mr *MockContextMockRecorder) RescanVmfs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescanVmfs", reflect.TypeOf((*MockContext)(nil).RescanVmfs), ctx, r, req)
}

// ResetCollector mocks base method
func (m *MockContext) ResetCollector(ctx context.Context, r soap.RoundTripper, req *types.ResetCollector) (*types.ResetCollectorResponse, error) {
	ret := m.ctrl.Call(m, "ResetCollector", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetCollectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCollector indicates an expected call of ResetCollector
func (mr *MockContextMockRecorder) ResetCollector(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCollector", reflect.TypeOf((*MockContext)(nil).ResetCollector), ctx, r, req)
}

// ResetCounterLevelMapping mocks base method
func (m *MockContext) ResetCounterLevelMapping(ctx context.Context, r soap.RoundTripper, req *types.ResetCounterLevelMapping) (*types.ResetCounterLevelMappingResponse, error) {
	ret := m.ctrl.Call(m, "ResetCounterLevelMapping", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetCounterLevelMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetCounterLevelMapping indicates an expected call of ResetCounterLevelMapping
func (mr *MockContextMockRecorder) ResetCounterLevelMapping(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCounterLevelMapping", reflect.TypeOf((*MockContext)(nil).ResetCounterLevelMapping), ctx, r, req)
}

// ResetEntityPermissions mocks base method
func (m *MockContext) ResetEntityPermissions(ctx context.Context, r soap.RoundTripper, req *types.ResetEntityPermissions) (*types.ResetEntityPermissionsResponse, error) {
	ret := m.ctrl.Call(m, "ResetEntityPermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetEntityPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetEntityPermissions indicates an expected call of ResetEntityPermissions
func (mr *MockContextMockRecorder) ResetEntityPermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetEntityPermissions", reflect.TypeOf((*MockContext)(nil).ResetEntityPermissions), ctx, r, req)
}

// ResetFirmwareToFactoryDefaults mocks base method
func (m *MockContext) ResetFirmwareToFactoryDefaults(ctx context.Context, r soap.RoundTripper, req *types.ResetFirmwareToFactoryDefaults) (*types.ResetFirmwareToFactoryDefaultsResponse, error) {
	ret := m.ctrl.Call(m, "ResetFirmwareToFactoryDefaults", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetFirmwareToFactoryDefaultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetFirmwareToFactoryDefaults indicates an expected call of ResetFirmwareToFactoryDefaults
func (mr *MockContextMockRecorder) ResetFirmwareToFactoryDefaults(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFirmwareToFactoryDefaults", reflect.TypeOf((*MockContext)(nil).ResetFirmwareToFactoryDefaults), ctx, r, req)
}

// ResetGuestInformation mocks base method
func (m *MockContext) ResetGuestInformation(ctx context.Context, r soap.RoundTripper, req *types.ResetGuestInformation) (*types.ResetGuestInformationResponse, error) {
	ret := m.ctrl.Call(m, "ResetGuestInformation", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetGuestInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetGuestInformation indicates an expected call of ResetGuestInformation
func (mr *MockContextMockRecorder) ResetGuestInformation(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetGuestInformation", reflect.TypeOf((*MockContext)(nil).ResetGuestInformation), ctx, r, req)
}

// ResetListView mocks base method
func (m *MockContext) ResetListView(ctx context.Context, r soap.RoundTripper, req *types.ResetListView) (*types.ResetListViewResponse, error) {
	ret := m.ctrl.Call(m, "ResetListView", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetListViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetListView indicates an expected call of ResetListView
func (mr *MockContextMockRecorder) ResetListView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetListView", reflect.TypeOf((*MockContext)(nil).ResetListView), ctx, r, req)
}

// ResetListViewFromView mocks base method
func (m *MockContext) ResetListViewFromView(ctx context.Context, r soap.RoundTripper, req *types.ResetListViewFromView) (*types.ResetListViewFromViewResponse, error) {
	ret := m.ctrl.Call(m, "ResetListViewFromView", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetListViewFromViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetListViewFromView indicates an expected call of ResetListViewFromView
func (mr *MockContextMockRecorder) ResetListViewFromView(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetListViewFromView", reflect.TypeOf((*MockContext)(nil).ResetListViewFromView), ctx, r, req)
}

// ResetSystemHealthInfo mocks base method
func (m *MockContext) ResetSystemHealthInfo(ctx context.Context, r soap.RoundTripper, req *types.ResetSystemHealthInfo) (*types.ResetSystemHealthInfoResponse, error) {
	ret := m.ctrl.Call(m, "ResetSystemHealthInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetSystemHealthInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSystemHealthInfo indicates an expected call of ResetSystemHealthInfo
func (mr *MockContextMockRecorder) ResetSystemHealthInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSystemHealthInfo", reflect.TypeOf((*MockContext)(nil).ResetSystemHealthInfo), ctx, r, req)
}

// ResetVM_Task mocks base method
func (m *MockContext) ResetVM_Task(ctx context.Context, r soap.RoundTripper, req *types.ResetVM_Task) (*types.ResetVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ResetVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ResetVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetVM_Task indicates an expected call of ResetVM_Task
func (mr *MockContextMockRecorder) ResetVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVM_Task", reflect.TypeOf((*MockContext)(nil).ResetVM_Task), ctx, r, req)
}

// ResignatureUnresolvedVmfsVolume_Task mocks base method
func (m *MockContext) ResignatureUnresolvedVmfsVolume_Task(ctx context.Context, r soap.RoundTripper, req *types.ResignatureUnresolvedVmfsVolume_Task) (*types.ResignatureUnresolvedVmfsVolume_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ResignatureUnresolvedVmfsVolume_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ResignatureUnresolvedVmfsVolume_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResignatureUnresolvedVmfsVolume_Task indicates an expected call of ResignatureUnresolvedVmfsVolume_Task
func (mr *MockContextMockRecorder) ResignatureUnresolvedVmfsVolume_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResignatureUnresolvedVmfsVolume_Task", reflect.TypeOf((*MockContext)(nil).ResignatureUnresolvedVmfsVolume_Task), ctx, r, req)
}

// ResolveInstallationErrorsOnCluster_Task mocks base method
func (m *MockContext) ResolveInstallationErrorsOnCluster_Task(ctx context.Context, r soap.RoundTripper, req *types.ResolveInstallationErrorsOnCluster_Task) (*types.ResolveInstallationErrorsOnCluster_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ResolveInstallationErrorsOnCluster_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ResolveInstallationErrorsOnCluster_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveInstallationErrorsOnCluster_Task indicates an expected call of ResolveInstallationErrorsOnCluster_Task
func (mr *MockContextMockRecorder) ResolveInstallationErrorsOnCluster_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveInstallationErrorsOnCluster_Task", reflect.TypeOf((*MockContext)(nil).ResolveInstallationErrorsOnCluster_Task), ctx, r, req)
}

// ResolveInstallationErrorsOnHost_Task mocks base method
func (m *MockContext) ResolveInstallationErrorsOnHost_Task(ctx context.Context, r soap.RoundTripper, req *types.ResolveInstallationErrorsOnHost_Task) (*types.ResolveInstallationErrorsOnHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ResolveInstallationErrorsOnHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ResolveInstallationErrorsOnHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveInstallationErrorsOnHost_Task indicates an expected call of ResolveInstallationErrorsOnHost_Task
func (mr *MockContextMockRecorder) ResolveInstallationErrorsOnHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveInstallationErrorsOnHost_Task", reflect.TypeOf((*MockContext)(nil).ResolveInstallationErrorsOnHost_Task), ctx, r, req)
}

// ResolveMultipleUnresolvedVmfsVolumes mocks base method
func (m *MockContext) ResolveMultipleUnresolvedVmfsVolumes(ctx context.Context, r soap.RoundTripper, req *types.ResolveMultipleUnresolvedVmfsVolumes) (*types.ResolveMultipleUnresolvedVmfsVolumesResponse, error) {
	ret := m.ctrl.Call(m, "ResolveMultipleUnresolvedVmfsVolumes", ctx, r, req)
	ret0, _ := ret[0].(*types.ResolveMultipleUnresolvedVmfsVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveMultipleUnresolvedVmfsVolumes indicates an expected call of ResolveMultipleUnresolvedVmfsVolumes
func (mr *MockContextMockRecorder) ResolveMultipleUnresolvedVmfsVolumes(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveMultipleUnresolvedVmfsVolumes", reflect.TypeOf((*MockContext)(nil).ResolveMultipleUnresolvedVmfsVolumes), ctx, r, req)
}

// ResolveMultipleUnresolvedVmfsVolumesEx_Task mocks base method
func (m *MockContext) ResolveMultipleUnresolvedVmfsVolumesEx_Task(ctx context.Context, r soap.RoundTripper, req *types.ResolveMultipleUnresolvedVmfsVolumesEx_Task) (*types.ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ResolveMultipleUnresolvedVmfsVolumesEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ResolveMultipleUnresolvedVmfsVolumesEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveMultipleUnresolvedVmfsVolumesEx_Task indicates an expected call of ResolveMultipleUnresolvedVmfsVolumesEx_Task
func (mr *MockContextMockRecorder) ResolveMultipleUnresolvedVmfsVolumesEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveMultipleUnresolvedVmfsVolumesEx_Task", reflect.TypeOf((*MockContext)(nil).ResolveMultipleUnresolvedVmfsVolumesEx_Task), ctx, r, req)
}

// RestartService mocks base method
func (m *MockContext) RestartService(ctx context.Context, r soap.RoundTripper, req *types.RestartService) (*types.RestartServiceResponse, error) {
	ret := m.ctrl.Call(m, "RestartService", ctx, r, req)
	ret0, _ := ret[0].(*types.RestartServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartService indicates an expected call of RestartService
func (mr *MockContextMockRecorder) RestartService(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartService", reflect.TypeOf((*MockContext)(nil).RestartService), ctx, r, req)
}

// RestartServiceConsoleVirtualNic mocks base method
func (m *MockContext) RestartServiceConsoleVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.RestartServiceConsoleVirtualNic) (*types.RestartServiceConsoleVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "RestartServiceConsoleVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.RestartServiceConsoleVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartServiceConsoleVirtualNic indicates an expected call of RestartServiceConsoleVirtualNic
func (mr *MockContextMockRecorder) RestartServiceConsoleVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartServiceConsoleVirtualNic", reflect.TypeOf((*MockContext)(nil).RestartServiceConsoleVirtualNic), ctx, r, req)
}

// RestoreFirmwareConfiguration mocks base method
func (m *MockContext) RestoreFirmwareConfiguration(ctx context.Context, r soap.RoundTripper, req *types.RestoreFirmwareConfiguration) (*types.RestoreFirmwareConfigurationResponse, error) {
	ret := m.ctrl.Call(m, "RestoreFirmwareConfiguration", ctx, r, req)
	ret0, _ := ret[0].(*types.RestoreFirmwareConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreFirmwareConfiguration indicates an expected call of RestoreFirmwareConfiguration
func (mr *MockContextMockRecorder) RestoreFirmwareConfiguration(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreFirmwareConfiguration", reflect.TypeOf((*MockContext)(nil).RestoreFirmwareConfiguration), ctx, r, req)
}

// RetrieveAllPermissions mocks base method
func (m *MockContext) RetrieveAllPermissions(ctx context.Context, r soap.RoundTripper, req *types.RetrieveAllPermissions) (*types.RetrieveAllPermissionsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveAllPermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveAllPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllPermissions indicates an expected call of RetrieveAllPermissions
func (mr *MockContextMockRecorder) RetrieveAllPermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllPermissions", reflect.TypeOf((*MockContext)(nil).RetrieveAllPermissions), ctx, r, req)
}

// RetrieveAnswerFile mocks base method
func (m *MockContext) RetrieveAnswerFile(ctx context.Context, r soap.RoundTripper, req *types.RetrieveAnswerFile) (*types.RetrieveAnswerFileResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveAnswerFile", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveAnswerFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnswerFile indicates an expected call of RetrieveAnswerFile
func (mr *MockContextMockRecorder) RetrieveAnswerFile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnswerFile", reflect.TypeOf((*MockContext)(nil).RetrieveAnswerFile), ctx, r, req)
}

// RetrieveAnswerFileForProfile mocks base method
func (m *MockContext) RetrieveAnswerFileForProfile(ctx context.Context, r soap.RoundTripper, req *types.RetrieveAnswerFileForProfile) (*types.RetrieveAnswerFileForProfileResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveAnswerFileForProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveAnswerFileForProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnswerFileForProfile indicates an expected call of RetrieveAnswerFileForProfile
func (mr *MockContextMockRecorder) RetrieveAnswerFileForProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnswerFileForProfile", reflect.TypeOf((*MockContext)(nil).RetrieveAnswerFileForProfile), ctx, r, req)
}

// RetrieveArgumentDescription mocks base method
func (m *MockContext) RetrieveArgumentDescription(ctx context.Context, r soap.RoundTripper, req *types.RetrieveArgumentDescription) (*types.RetrieveArgumentDescriptionResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveArgumentDescription", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveArgumentDescriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveArgumentDescription indicates an expected call of RetrieveArgumentDescription
func (mr *MockContextMockRecorder) RetrieveArgumentDescription(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveArgumentDescription", reflect.TypeOf((*MockContext)(nil).RetrieveArgumentDescription), ctx, r, req)
}

// RetrieveClientCert mocks base method
func (m *MockContext) RetrieveClientCert(ctx context.Context, r soap.RoundTripper, req *types.RetrieveClientCert) (*types.RetrieveClientCertResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveClientCert indicates an expected call of RetrieveClientCert
func (mr *MockContextMockRecorder) RetrieveClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveClientCert", reflect.TypeOf((*MockContext)(nil).RetrieveClientCert), ctx, r, req)
}

// RetrieveClientCsr mocks base method
func (m *MockContext) RetrieveClientCsr(ctx context.Context, r soap.RoundTripper, req *types.RetrieveClientCsr) (*types.RetrieveClientCsrResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveClientCsr", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveClientCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveClientCsr indicates an expected call of RetrieveClientCsr
func (mr *MockContextMockRecorder) RetrieveClientCsr(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveClientCsr", reflect.TypeOf((*MockContext)(nil).RetrieveClientCsr), ctx, r, req)
}

// RetrieveDasAdvancedRuntimeInfo mocks base method
func (m *MockContext) RetrieveDasAdvancedRuntimeInfo(ctx context.Context, r soap.RoundTripper, req *types.RetrieveDasAdvancedRuntimeInfo) (*types.RetrieveDasAdvancedRuntimeInfoResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveDasAdvancedRuntimeInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveDasAdvancedRuntimeInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDasAdvancedRuntimeInfo indicates an expected call of RetrieveDasAdvancedRuntimeInfo
func (mr *MockContextMockRecorder) RetrieveDasAdvancedRuntimeInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDasAdvancedRuntimeInfo", reflect.TypeOf((*MockContext)(nil).RetrieveDasAdvancedRuntimeInfo), ctx, r, req)
}

// RetrieveDescription mocks base method
func (m *MockContext) RetrieveDescription(ctx context.Context, r soap.RoundTripper, req *types.RetrieveDescription) (*types.RetrieveDescriptionResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveDescription", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveDescriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDescription indicates an expected call of RetrieveDescription
func (mr *MockContextMockRecorder) RetrieveDescription(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDescription", reflect.TypeOf((*MockContext)(nil).RetrieveDescription), ctx, r, req)
}

// RetrieveDiskPartitionInfo mocks base method
func (m *MockContext) RetrieveDiskPartitionInfo(ctx context.Context, r soap.RoundTripper, req *types.RetrieveDiskPartitionInfo) (*types.RetrieveDiskPartitionInfoResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveDiskPartitionInfo", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveDiskPartitionInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDiskPartitionInfo indicates an expected call of RetrieveDiskPartitionInfo
func (mr *MockContextMockRecorder) RetrieveDiskPartitionInfo(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDiskPartitionInfo", reflect.TypeOf((*MockContext)(nil).RetrieveDiskPartitionInfo), ctx, r, req)
}

// RetrieveEntityPermissions mocks base method
func (m *MockContext) RetrieveEntityPermissions(ctx context.Context, r soap.RoundTripper, req *types.RetrieveEntityPermissions) (*types.RetrieveEntityPermissionsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveEntityPermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveEntityPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntityPermissions indicates an expected call of RetrieveEntityPermissions
func (mr *MockContextMockRecorder) RetrieveEntityPermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntityPermissions", reflect.TypeOf((*MockContext)(nil).RetrieveEntityPermissions), ctx, r, req)
}

// RetrieveEntityScheduledTask mocks base method
func (m *MockContext) RetrieveEntityScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.RetrieveEntityScheduledTask) (*types.RetrieveEntityScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveEntityScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveEntityScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveEntityScheduledTask indicates an expected call of RetrieveEntityScheduledTask
func (mr *MockContextMockRecorder) RetrieveEntityScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveEntityScheduledTask", reflect.TypeOf((*MockContext)(nil).RetrieveEntityScheduledTask), ctx, r, req)
}

// RetrieveHardwareUptime mocks base method
func (m *MockContext) RetrieveHardwareUptime(ctx context.Context, r soap.RoundTripper, req *types.RetrieveHardwareUptime) (*types.RetrieveHardwareUptimeResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveHardwareUptime", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveHardwareUptimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHardwareUptime indicates an expected call of RetrieveHardwareUptime
func (mr *MockContextMockRecorder) RetrieveHardwareUptime(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHardwareUptime", reflect.TypeOf((*MockContext)(nil).RetrieveHardwareUptime), ctx, r, req)
}

// RetrieveHostAccessControlEntries mocks base method
func (m *MockContext) RetrieveHostAccessControlEntries(ctx context.Context, r soap.RoundTripper, req *types.RetrieveHostAccessControlEntries) (*types.RetrieveHostAccessControlEntriesResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveHostAccessControlEntries", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveHostAccessControlEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHostAccessControlEntries indicates an expected call of RetrieveHostAccessControlEntries
func (mr *MockContextMockRecorder) RetrieveHostAccessControlEntries(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHostAccessControlEntries", reflect.TypeOf((*MockContext)(nil).RetrieveHostAccessControlEntries), ctx, r, req)
}

// RetrieveHostCustomizations mocks base method
func (m *MockContext) RetrieveHostCustomizations(ctx context.Context, r soap.RoundTripper, req *types.RetrieveHostCustomizations) (*types.RetrieveHostCustomizationsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveHostCustomizations", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveHostCustomizationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHostCustomizations indicates an expected call of RetrieveHostCustomizations
func (mr *MockContextMockRecorder) RetrieveHostCustomizations(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHostCustomizations", reflect.TypeOf((*MockContext)(nil).RetrieveHostCustomizations), ctx, r, req)
}

// RetrieveHostCustomizationsForProfile mocks base method
func (m *MockContext) RetrieveHostCustomizationsForProfile(ctx context.Context, r soap.RoundTripper, req *types.RetrieveHostCustomizationsForProfile) (*types.RetrieveHostCustomizationsForProfileResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveHostCustomizationsForProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveHostCustomizationsForProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHostCustomizationsForProfile indicates an expected call of RetrieveHostCustomizationsForProfile
func (mr *MockContextMockRecorder) RetrieveHostCustomizationsForProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHostCustomizationsForProfile", reflect.TypeOf((*MockContext)(nil).RetrieveHostCustomizationsForProfile), ctx, r, req)
}

// RetrieveHostSpecification mocks base method
func (m *MockContext) RetrieveHostSpecification(ctx context.Context, r soap.RoundTripper, req *types.RetrieveHostSpecification) (*types.RetrieveHostSpecificationResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveHostSpecification", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveHostSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveHostSpecification indicates an expected call of RetrieveHostSpecification
func (mr *MockContextMockRecorder) RetrieveHostSpecification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveHostSpecification", reflect.TypeOf((*MockContext)(nil).RetrieveHostSpecification), ctx, r, req)
}

// RetrieveKmipServerCert mocks base method
func (m *MockContext) RetrieveKmipServerCert(ctx context.Context, r soap.RoundTripper, req *types.RetrieveKmipServerCert) (*types.RetrieveKmipServerCertResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveKmipServerCert", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveKmipServerCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKmipServerCert indicates an expected call of RetrieveKmipServerCert
func (mr *MockContextMockRecorder) RetrieveKmipServerCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKmipServerCert", reflect.TypeOf((*MockContext)(nil).RetrieveKmipServerCert), ctx, r, req)
}

// RetrieveKmipServersStatus_Task mocks base method
func (m *MockContext) RetrieveKmipServersStatus_Task(ctx context.Context, r soap.RoundTripper, req *types.RetrieveKmipServersStatus_Task) (*types.RetrieveKmipServersStatus_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveKmipServersStatus_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveKmipServersStatus_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveKmipServersStatus_Task indicates an expected call of RetrieveKmipServersStatus_Task
func (mr *MockContextMockRecorder) RetrieveKmipServersStatus_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveKmipServersStatus_Task", reflect.TypeOf((*MockContext)(nil).RetrieveKmipServersStatus_Task), ctx, r, req)
}

// RetrieveObjectScheduledTask mocks base method
func (m *MockContext) RetrieveObjectScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.RetrieveObjectScheduledTask) (*types.RetrieveObjectScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveObjectScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveObjectScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveObjectScheduledTask indicates an expected call of RetrieveObjectScheduledTask
func (mr *MockContextMockRecorder) RetrieveObjectScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveObjectScheduledTask", reflect.TypeOf((*MockContext)(nil).RetrieveObjectScheduledTask), ctx, r, req)
}

// RetrieveProductComponents mocks base method
func (m *MockContext) RetrieveProductComponents(ctx context.Context, r soap.RoundTripper, req *types.RetrieveProductComponents) (*types.RetrieveProductComponentsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveProductComponents", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveProductComponentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveProductComponents indicates an expected call of RetrieveProductComponents
func (mr *MockContextMockRecorder) RetrieveProductComponents(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveProductComponents", reflect.TypeOf((*MockContext)(nil).RetrieveProductComponents), ctx, r, req)
}

// RetrieveProperties mocks base method
func (m *MockContext) RetrieveProperties(ctx context.Context, r soap.RoundTripper, req *types.RetrieveProperties) (*types.RetrievePropertiesResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveProperties", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrievePropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveProperties indicates an expected call of RetrieveProperties
func (mr *MockContextMockRecorder) RetrieveProperties(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveProperties", reflect.TypeOf((*MockContext)(nil).RetrieveProperties), ctx, r, req)
}

// RetrievePropertiesEx mocks base method
func (m *MockContext) RetrievePropertiesEx(ctx context.Context, r soap.RoundTripper, req *types.RetrievePropertiesEx) (*types.RetrievePropertiesExResponse, error) {
	ret := m.ctrl.Call(m, "RetrievePropertiesEx", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrievePropertiesExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrievePropertiesEx indicates an expected call of RetrievePropertiesEx
func (mr *MockContextMockRecorder) RetrievePropertiesEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrievePropertiesEx", reflect.TypeOf((*MockContext)(nil).RetrievePropertiesEx), ctx, r, req)
}

// RetrieveRolePermissions mocks base method
func (m *MockContext) RetrieveRolePermissions(ctx context.Context, r soap.RoundTripper, req *types.RetrieveRolePermissions) (*types.RetrieveRolePermissionsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveRolePermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveRolePermissions indicates an expected call of RetrieveRolePermissions
func (mr *MockContextMockRecorder) RetrieveRolePermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveRolePermissions", reflect.TypeOf((*MockContext)(nil).RetrieveRolePermissions), ctx, r, req)
}

// RetrieveSelfSignedClientCert mocks base method
func (m *MockContext) RetrieveSelfSignedClientCert(ctx context.Context, r soap.RoundTripper, req *types.RetrieveSelfSignedClientCert) (*types.RetrieveSelfSignedClientCertResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveSelfSignedClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveSelfSignedClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveSelfSignedClientCert indicates an expected call of RetrieveSelfSignedClientCert
func (mr *MockContextMockRecorder) RetrieveSelfSignedClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveSelfSignedClientCert", reflect.TypeOf((*MockContext)(nil).RetrieveSelfSignedClientCert), ctx, r, req)
}

// RetrieveServiceContent mocks base method
func (m *MockContext) RetrieveServiceContent(ctx context.Context, r soap.RoundTripper, req *types.RetrieveServiceContent) (*types.RetrieveServiceContentResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveServiceContent", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveServiceContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveServiceContent indicates an expected call of RetrieveServiceContent
func (mr *MockContextMockRecorder) RetrieveServiceContent(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveServiceContent", reflect.TypeOf((*MockContext)(nil).RetrieveServiceContent), ctx, r, req)
}

// RetrieveUserGroups mocks base method
func (m *MockContext) RetrieveUserGroups(ctx context.Context, r soap.RoundTripper, req *types.RetrieveUserGroups) (*types.RetrieveUserGroupsResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveUserGroups", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveUserGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserGroups indicates an expected call of RetrieveUserGroups
func (mr *MockContextMockRecorder) RetrieveUserGroups(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserGroups", reflect.TypeOf((*MockContext)(nil).RetrieveUserGroups), ctx, r, req)
}

// RetrieveVStorageObject mocks base method
func (m *MockContext) RetrieveVStorageObject(ctx context.Context, r soap.RoundTripper, req *types.RetrieveVStorageObject) (*types.RetrieveVStorageObjectResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveVStorageObject", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveVStorageObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveVStorageObject indicates an expected call of RetrieveVStorageObject
func (mr *MockContextMockRecorder) RetrieveVStorageObject(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveVStorageObject", reflect.TypeOf((*MockContext)(nil).RetrieveVStorageObject), ctx, r, req)
}

// RetrieveVStorageObjectState mocks base method
func (m *MockContext) RetrieveVStorageObjectState(ctx context.Context, r soap.RoundTripper, req *types.RetrieveVStorageObjectState) (*types.RetrieveVStorageObjectStateResponse, error) {
	ret := m.ctrl.Call(m, "RetrieveVStorageObjectState", ctx, r, req)
	ret0, _ := ret[0].(*types.RetrieveVStorageObjectStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveVStorageObjectState indicates an expected call of RetrieveVStorageObjectState
func (mr *MockContextMockRecorder) RetrieveVStorageObjectState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveVStorageObjectState", reflect.TypeOf((*MockContext)(nil).RetrieveVStorageObjectState), ctx, r, req)
}

// RevertToCurrentSnapshot_Task mocks base method
func (m *MockContext) RevertToCurrentSnapshot_Task(ctx context.Context, r soap.RoundTripper, req *types.RevertToCurrentSnapshot_Task) (*types.RevertToCurrentSnapshot_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RevertToCurrentSnapshot_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RevertToCurrentSnapshot_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevertToCurrentSnapshot_Task indicates an expected call of RevertToCurrentSnapshot_Task
func (mr *MockContextMockRecorder) RevertToCurrentSnapshot_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToCurrentSnapshot_Task", reflect.TypeOf((*MockContext)(nil).RevertToCurrentSnapshot_Task), ctx, r, req)
}

// RevertToSnapshot_Task mocks base method
func (m *MockContext) RevertToSnapshot_Task(ctx context.Context, r soap.RoundTripper, req *types.RevertToSnapshot_Task) (*types.RevertToSnapshot_TaskResponse, error) {
	ret := m.ctrl.Call(m, "RevertToSnapshot_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.RevertToSnapshot_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevertToSnapshot_Task indicates an expected call of RevertToSnapshot_Task
func (mr *MockContextMockRecorder) RevertToSnapshot_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertToSnapshot_Task", reflect.TypeOf((*MockContext)(nil).RevertToSnapshot_Task), ctx, r, req)
}

// RewindCollector mocks base method
func (m *MockContext) RewindCollector(ctx context.Context, r soap.RoundTripper, req *types.RewindCollector) (*types.RewindCollectorResponse, error) {
	ret := m.ctrl.Call(m, "RewindCollector", ctx, r, req)
	ret0, _ := ret[0].(*types.RewindCollectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RewindCollector indicates an expected call of RewindCollector
func (mr *MockContextMockRecorder) RewindCollector(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewindCollector", reflect.TypeOf((*MockContext)(nil).RewindCollector), ctx, r, req)
}

// RunScheduledTask mocks base method
func (m *MockContext) RunScheduledTask(ctx context.Context, r soap.RoundTripper, req *types.RunScheduledTask) (*types.RunScheduledTaskResponse, error) {
	ret := m.ctrl.Call(m, "RunScheduledTask", ctx, r, req)
	ret0, _ := ret[0].(*types.RunScheduledTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScheduledTask indicates an expected call of RunScheduledTask
func (mr *MockContextMockRecorder) RunScheduledTask(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScheduledTask", reflect.TypeOf((*MockContext)(nil).RunScheduledTask), ctx, r, req)
}

// RunVsanPhysicalDiskDiagnostics mocks base method
func (m *MockContext) RunVsanPhysicalDiskDiagnostics(ctx context.Context, r soap.RoundTripper, req *types.RunVsanPhysicalDiskDiagnostics) (*types.RunVsanPhysicalDiskDiagnosticsResponse, error) {
	ret := m.ctrl.Call(m, "RunVsanPhysicalDiskDiagnostics", ctx, r, req)
	ret0, _ := ret[0].(*types.RunVsanPhysicalDiskDiagnosticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunVsanPhysicalDiskDiagnostics indicates an expected call of RunVsanPhysicalDiskDiagnostics
func (mr *MockContextMockRecorder) RunVsanPhysicalDiskDiagnostics(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunVsanPhysicalDiskDiagnostics", reflect.TypeOf((*MockContext)(nil).RunVsanPhysicalDiskDiagnostics), ctx, r, req)
}

// ScanHostPatchV2_Task mocks base method
func (m *MockContext) ScanHostPatchV2_Task(ctx context.Context, r soap.RoundTripper, req *types.ScanHostPatchV2_Task) (*types.ScanHostPatchV2_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ScanHostPatchV2_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ScanHostPatchV2_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanHostPatchV2_Task indicates an expected call of ScanHostPatchV2_Task
func (mr *MockContextMockRecorder) ScanHostPatchV2_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanHostPatchV2_Task", reflect.TypeOf((*MockContext)(nil).ScanHostPatchV2_Task), ctx, r, req)
}

// ScanHostPatch_Task mocks base method
func (m *MockContext) ScanHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.ScanHostPatch_Task) (*types.ScanHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ScanHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ScanHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanHostPatch_Task indicates an expected call of ScanHostPatch_Task
func (mr *MockContextMockRecorder) ScanHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanHostPatch_Task", reflect.TypeOf((*MockContext)(nil).ScanHostPatch_Task), ctx, r, req)
}

// ScheduleReconcileDatastoreInventory mocks base method
func (m *MockContext) ScheduleReconcileDatastoreInventory(ctx context.Context, r soap.RoundTripper, req *types.ScheduleReconcileDatastoreInventory) (*types.ScheduleReconcileDatastoreInventoryResponse, error) {
	ret := m.ctrl.Call(m, "ScheduleReconcileDatastoreInventory", ctx, r, req)
	ret0, _ := ret[0].(*types.ScheduleReconcileDatastoreInventoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleReconcileDatastoreInventory indicates an expected call of ScheduleReconcileDatastoreInventory
func (mr *MockContextMockRecorder) ScheduleReconcileDatastoreInventory(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleReconcileDatastoreInventory", reflect.TypeOf((*MockContext)(nil).ScheduleReconcileDatastoreInventory), ctx, r, req)
}

// SearchDatastoreSubFolders_Task mocks base method
func (m *MockContext) SearchDatastoreSubFolders_Task(ctx context.Context, r soap.RoundTripper, req *types.SearchDatastoreSubFolders_Task) (*types.SearchDatastoreSubFolders_TaskResponse, error) {
	ret := m.ctrl.Call(m, "SearchDatastoreSubFolders_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.SearchDatastoreSubFolders_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDatastoreSubFolders_Task indicates an expected call of SearchDatastoreSubFolders_Task
func (mr *MockContextMockRecorder) SearchDatastoreSubFolders_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatastoreSubFolders_Task", reflect.TypeOf((*MockContext)(nil).SearchDatastoreSubFolders_Task), ctx, r, req)
}

// SearchDatastore_Task mocks base method
func (m *MockContext) SearchDatastore_Task(ctx context.Context, r soap.RoundTripper, req *types.SearchDatastore_Task) (*types.SearchDatastore_TaskResponse, error) {
	ret := m.ctrl.Call(m, "SearchDatastore_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.SearchDatastore_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDatastore_Task indicates an expected call of SearchDatastore_Task
func (mr *MockContextMockRecorder) SearchDatastore_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatastore_Task", reflect.TypeOf((*MockContext)(nil).SearchDatastore_Task), ctx, r, req)
}

// SelectActivePartition mocks base method
func (m *MockContext) SelectActivePartition(ctx context.Context, r soap.RoundTripper, req *types.SelectActivePartition) (*types.SelectActivePartitionResponse, error) {
	ret := m.ctrl.Call(m, "SelectActivePartition", ctx, r, req)
	ret0, _ := ret[0].(*types.SelectActivePartitionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectActivePartition indicates an expected call of SelectActivePartition
func (mr *MockContextMockRecorder) SelectActivePartition(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectActivePartition", reflect.TypeOf((*MockContext)(nil).SelectActivePartition), ctx, r, req)
}

// SelectVnic mocks base method
func (m *MockContext) SelectVnic(ctx context.Context, r soap.RoundTripper, req *types.SelectVnic) (*types.SelectVnicResponse, error) {
	ret := m.ctrl.Call(m, "SelectVnic", ctx, r, req)
	ret0, _ := ret[0].(*types.SelectVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVnic indicates an expected call of SelectVnic
func (mr *MockContextMockRecorder) SelectVnic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVnic", reflect.TypeOf((*MockContext)(nil).SelectVnic), ctx, r, req)
}

// SelectVnicForNicType mocks base method
func (m *MockContext) SelectVnicForNicType(ctx context.Context, r soap.RoundTripper, req *types.SelectVnicForNicType) (*types.SelectVnicForNicTypeResponse, error) {
	ret := m.ctrl.Call(m, "SelectVnicForNicType", ctx, r, req)
	ret0, _ := ret[0].(*types.SelectVnicForNicTypeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVnicForNicType indicates an expected call of SelectVnicForNicType
func (mr *MockContextMockRecorder) SelectVnicForNicType(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVnicForNicType", reflect.TypeOf((*MockContext)(nil).SelectVnicForNicType), ctx, r, req)
}

// SendNMI mocks base method
func (m *MockContext) SendNMI(ctx context.Context, r soap.RoundTripper, req *types.SendNMI) (*types.SendNMIResponse, error) {
	ret := m.ctrl.Call(m, "SendNMI", ctx, r, req)
	ret0, _ := ret[0].(*types.SendNMIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendNMI indicates an expected call of SendNMI
func (mr *MockContextMockRecorder) SendNMI(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNMI", reflect.TypeOf((*MockContext)(nil).SendNMI), ctx, r, req)
}

// SendTestNotification mocks base method
func (m *MockContext) SendTestNotification(ctx context.Context, r soap.RoundTripper, req *types.SendTestNotification) (*types.SendTestNotificationResponse, error) {
	ret := m.ctrl.Call(m, "SendTestNotification", ctx, r, req)
	ret0, _ := ret[0].(*types.SendTestNotificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTestNotification indicates an expected call of SendTestNotification
func (mr *MockContextMockRecorder) SendTestNotification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTestNotification", reflect.TypeOf((*MockContext)(nil).SendTestNotification), ctx, r, req)
}

// SessionIsActive mocks base method
func (m *MockContext) SessionIsActive(ctx context.Context, r soap.RoundTripper, req *types.SessionIsActive) (*types.SessionIsActiveResponse, error) {
	ret := m.ctrl.Call(m, "SessionIsActive", ctx, r, req)
	ret0, _ := ret[0].(*types.SessionIsActiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionIsActive indicates an expected call of SessionIsActive
func (mr *MockContextMockRecorder) SessionIsActive(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionIsActive", reflect.TypeOf((*MockContext)(nil).SessionIsActive), ctx, r, req)
}

// SetCollectorPageSize mocks base method
func (m *MockContext) SetCollectorPageSize(ctx context.Context, r soap.RoundTripper, req *types.SetCollectorPageSize) (*types.SetCollectorPageSizeResponse, error) {
	ret := m.ctrl.Call(m, "SetCollectorPageSize", ctx, r, req)
	ret0, _ := ret[0].(*types.SetCollectorPageSizeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCollectorPageSize indicates an expected call of SetCollectorPageSize
func (mr *MockContextMockRecorder) SetCollectorPageSize(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCollectorPageSize", reflect.TypeOf((*MockContext)(nil).SetCollectorPageSize), ctx, r, req)
}

// SetDisplayTopology mocks base method
func (m *MockContext) SetDisplayTopology(ctx context.Context, r soap.RoundTripper, req *types.SetDisplayTopology) (*types.SetDisplayTopologyResponse, error) {
	ret := m.ctrl.Call(m, "SetDisplayTopology", ctx, r, req)
	ret0, _ := ret[0].(*types.SetDisplayTopologyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDisplayTopology indicates an expected call of SetDisplayTopology
func (mr *MockContextMockRecorder) SetDisplayTopology(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDisplayTopology", reflect.TypeOf((*MockContext)(nil).SetDisplayTopology), ctx, r, req)
}

// SetEntityPermissions mocks base method
func (m *MockContext) SetEntityPermissions(ctx context.Context, r soap.RoundTripper, req *types.SetEntityPermissions) (*types.SetEntityPermissionsResponse, error) {
	ret := m.ctrl.Call(m, "SetEntityPermissions", ctx, r, req)
	ret0, _ := ret[0].(*types.SetEntityPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEntityPermissions indicates an expected call of SetEntityPermissions
func (mr *MockContextMockRecorder) SetEntityPermissions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntityPermissions", reflect.TypeOf((*MockContext)(nil).SetEntityPermissions), ctx, r, req)
}

// SetExtensionCertificate mocks base method
func (m *MockContext) SetExtensionCertificate(ctx context.Context, r soap.RoundTripper, req *types.SetExtensionCertificate) (*types.SetExtensionCertificateResponse, error) {
	ret := m.ctrl.Call(m, "SetExtensionCertificate", ctx, r, req)
	ret0, _ := ret[0].(*types.SetExtensionCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetExtensionCertificate indicates an expected call of SetExtensionCertificate
func (mr *MockContextMockRecorder) SetExtensionCertificate(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtensionCertificate", reflect.TypeOf((*MockContext)(nil).SetExtensionCertificate), ctx, r, req)
}

// SetField mocks base method
func (m *MockContext) SetField(ctx context.Context, r soap.RoundTripper, req *types.SetField) (*types.SetFieldResponse, error) {
	ret := m.ctrl.Call(m, "SetField", ctx, r, req)
	ret0, _ := ret[0].(*types.SetFieldResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetField indicates an expected call of SetField
func (mr *MockContextMockRecorder) SetField(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetField", reflect.TypeOf((*MockContext)(nil).SetField), ctx, r, req)
}

// SetLicenseEdition mocks base method
func (m *MockContext) SetLicenseEdition(ctx context.Context, r soap.RoundTripper, req *types.SetLicenseEdition) (*types.SetLicenseEditionResponse, error) {
	ret := m.ctrl.Call(m, "SetLicenseEdition", ctx, r, req)
	ret0, _ := ret[0].(*types.SetLicenseEditionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLicenseEdition indicates an expected call of SetLicenseEdition
func (mr *MockContextMockRecorder) SetLicenseEdition(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLicenseEdition", reflect.TypeOf((*MockContext)(nil).SetLicenseEdition), ctx, r, req)
}

// SetLocale mocks base method
func (m *MockContext) SetLocale(ctx context.Context, r soap.RoundTripper, req *types.SetLocale) (*types.SetLocaleResponse, error) {
	ret := m.ctrl.Call(m, "SetLocale", ctx, r, req)
	ret0, _ := ret[0].(*types.SetLocaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetLocale indicates an expected call of SetLocale
func (mr *MockContextMockRecorder) SetLocale(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocale", reflect.TypeOf((*MockContext)(nil).SetLocale), ctx, r, req)
}

// SetMultipathLunPolicy mocks base method
func (m *MockContext) SetMultipathLunPolicy(ctx context.Context, r soap.RoundTripper, req *types.SetMultipathLunPolicy) (*types.SetMultipathLunPolicyResponse, error) {
	ret := m.ctrl.Call(m, "SetMultipathLunPolicy", ctx, r, req)
	ret0, _ := ret[0].(*types.SetMultipathLunPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMultipathLunPolicy indicates an expected call of SetMultipathLunPolicy
func (mr *MockContextMockRecorder) SetMultipathLunPolicy(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMultipathLunPolicy", reflect.TypeOf((*MockContext)(nil).SetMultipathLunPolicy), ctx, r, req)
}

// SetNFSUser mocks base method
func (m *MockContext) SetNFSUser(ctx context.Context, r soap.RoundTripper, req *types.SetNFSUser) (*types.SetNFSUserResponse, error) {
	ret := m.ctrl.Call(m, "SetNFSUser", ctx, r, req)
	ret0, _ := ret[0].(*types.SetNFSUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNFSUser indicates an expected call of SetNFSUser
func (mr *MockContextMockRecorder) SetNFSUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNFSUser", reflect.TypeOf((*MockContext)(nil).SetNFSUser), ctx, r, req)
}

// SetPublicKey mocks base method
func (m *MockContext) SetPublicKey(ctx context.Context, r soap.RoundTripper, req *types.SetPublicKey) (*types.SetPublicKeyResponse, error) {
	ret := m.ctrl.Call(m, "SetPublicKey", ctx, r, req)
	ret0, _ := ret[0].(*types.SetPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPublicKey indicates an expected call of SetPublicKey
func (mr *MockContextMockRecorder) SetPublicKey(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicKey", reflect.TypeOf((*MockContext)(nil).SetPublicKey), ctx, r, req)
}

// SetRegistryValueInGuest mocks base method
func (m *MockContext) SetRegistryValueInGuest(ctx context.Context, r soap.RoundTripper, req *types.SetRegistryValueInGuest) (*types.SetRegistryValueInGuestResponse, error) {
	ret := m.ctrl.Call(m, "SetRegistryValueInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.SetRegistryValueInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetRegistryValueInGuest indicates an expected call of SetRegistryValueInGuest
func (mr *MockContextMockRecorder) SetRegistryValueInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistryValueInGuest", reflect.TypeOf((*MockContext)(nil).SetRegistryValueInGuest), ctx, r, req)
}

// SetScreenResolution mocks base method
func (m *MockContext) SetScreenResolution(ctx context.Context, r soap.RoundTripper, req *types.SetScreenResolution) (*types.SetScreenResolutionResponse, error) {
	ret := m.ctrl.Call(m, "SetScreenResolution", ctx, r, req)
	ret0, _ := ret[0].(*types.SetScreenResolutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetScreenResolution indicates an expected call of SetScreenResolution
func (mr *MockContextMockRecorder) SetScreenResolution(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetScreenResolution", reflect.TypeOf((*MockContext)(nil).SetScreenResolution), ctx, r, req)
}

// SetTaskDescription mocks base method
func (m *MockContext) SetTaskDescription(ctx context.Context, r soap.RoundTripper, req *types.SetTaskDescription) (*types.SetTaskDescriptionResponse, error) {
	ret := m.ctrl.Call(m, "SetTaskDescription", ctx, r, req)
	ret0, _ := ret[0].(*types.SetTaskDescriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskDescription indicates an expected call of SetTaskDescription
func (mr *MockContextMockRecorder) SetTaskDescription(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskDescription", reflect.TypeOf((*MockContext)(nil).SetTaskDescription), ctx, r, req)
}

// SetTaskState mocks base method
func (m *MockContext) SetTaskState(ctx context.Context, r soap.RoundTripper, req *types.SetTaskState) (*types.SetTaskStateResponse, error) {
	ret := m.ctrl.Call(m, "SetTaskState", ctx, r, req)
	ret0, _ := ret[0].(*types.SetTaskStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTaskState indicates an expected call of SetTaskState
func (mr *MockContextMockRecorder) SetTaskState(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskState", reflect.TypeOf((*MockContext)(nil).SetTaskState), ctx, r, req)
}

// SetVirtualDiskUuid mocks base method
func (m *MockContext) SetVirtualDiskUuid(ctx context.Context, r soap.RoundTripper, req *types.SetVirtualDiskUuid) (*types.SetVirtualDiskUuidResponse, error) {
	ret := m.ctrl.Call(m, "SetVirtualDiskUuid", ctx, r, req)
	ret0, _ := ret[0].(*types.SetVirtualDiskUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVirtualDiskUuid indicates an expected call of SetVirtualDiskUuid
func (mr *MockContextMockRecorder) SetVirtualDiskUuid(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVirtualDiskUuid", reflect.TypeOf((*MockContext)(nil).SetVirtualDiskUuid), ctx, r, req)
}

// ShrinkVirtualDisk_Task mocks base method
func (m *MockContext) ShrinkVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.ShrinkVirtualDisk_Task) (*types.ShrinkVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ShrinkVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ShrinkVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShrinkVirtualDisk_Task indicates an expected call of ShrinkVirtualDisk_Task
func (mr *MockContextMockRecorder) ShrinkVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShrinkVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).ShrinkVirtualDisk_Task), ctx, r, req)
}

// ShutdownGuest mocks base method
func (m *MockContext) ShutdownGuest(ctx context.Context, r soap.RoundTripper, req *types.ShutdownGuest) (*types.ShutdownGuestResponse, error) {
	ret := m.ctrl.Call(m, "ShutdownGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ShutdownGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShutdownGuest indicates an expected call of ShutdownGuest
func (mr *MockContextMockRecorder) ShutdownGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownGuest", reflect.TypeOf((*MockContext)(nil).ShutdownGuest), ctx, r, req)
}

// ShutdownHost_Task mocks base method
func (m *MockContext) ShutdownHost_Task(ctx context.Context, r soap.RoundTripper, req *types.ShutdownHost_Task) (*types.ShutdownHost_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ShutdownHost_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ShutdownHost_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShutdownHost_Task indicates an expected call of ShutdownHost_Task
func (mr *MockContextMockRecorder) ShutdownHost_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownHost_Task", reflect.TypeOf((*MockContext)(nil).ShutdownHost_Task), ctx, r, req)
}

// StageHostPatch_Task mocks base method
func (m *MockContext) StageHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.StageHostPatch_Task) (*types.StageHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StageHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StageHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageHostPatch_Task indicates an expected call of StageHostPatch_Task
func (mr *MockContextMockRecorder) StageHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageHostPatch_Task", reflect.TypeOf((*MockContext)(nil).StageHostPatch_Task), ctx, r, req)
}

// StampAllRulesWithUuid_Task mocks base method
func (m *MockContext) StampAllRulesWithUuid_Task(ctx context.Context, r soap.RoundTripper, req *types.StampAllRulesWithUuid_Task) (*types.StampAllRulesWithUuid_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StampAllRulesWithUuid_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StampAllRulesWithUuid_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StampAllRulesWithUuid_Task indicates an expected call of StampAllRulesWithUuid_Task
func (mr *MockContextMockRecorder) StampAllRulesWithUuid_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StampAllRulesWithUuid_Task", reflect.TypeOf((*MockContext)(nil).StampAllRulesWithUuid_Task), ctx, r, req)
}

// StandbyGuest mocks base method
func (m *MockContext) StandbyGuest(ctx context.Context, r soap.RoundTripper, req *types.StandbyGuest) (*types.StandbyGuestResponse, error) {
	ret := m.ctrl.Call(m, "StandbyGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.StandbyGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StandbyGuest indicates an expected call of StandbyGuest
func (mr *MockContextMockRecorder) StandbyGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandbyGuest", reflect.TypeOf((*MockContext)(nil).StandbyGuest), ctx, r, req)
}

// StartProgramInGuest mocks base method
func (m *MockContext) StartProgramInGuest(ctx context.Context, r soap.RoundTripper, req *types.StartProgramInGuest) (*types.StartProgramInGuestResponse, error) {
	ret := m.ctrl.Call(m, "StartProgramInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.StartProgramInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProgramInGuest indicates an expected call of StartProgramInGuest
func (mr *MockContextMockRecorder) StartProgramInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProgramInGuest", reflect.TypeOf((*MockContext)(nil).StartProgramInGuest), ctx, r, req)
}

// StartRecording_Task mocks base method
func (m *MockContext) StartRecording_Task(ctx context.Context, r soap.RoundTripper, req *types.StartRecording_Task) (*types.StartRecording_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StartRecording_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StartRecording_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRecording_Task indicates an expected call of StartRecording_Task
func (mr *MockContextMockRecorder) StartRecording_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRecording_Task", reflect.TypeOf((*MockContext)(nil).StartRecording_Task), ctx, r, req)
}

// StartReplaying_Task mocks base method
func (m *MockContext) StartReplaying_Task(ctx context.Context, r soap.RoundTripper, req *types.StartReplaying_Task) (*types.StartReplaying_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StartReplaying_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StartReplaying_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartReplaying_Task indicates an expected call of StartReplaying_Task
func (mr *MockContextMockRecorder) StartReplaying_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReplaying_Task", reflect.TypeOf((*MockContext)(nil).StartReplaying_Task), ctx, r, req)
}

// StartService mocks base method
func (m *MockContext) StartService(ctx context.Context, r soap.RoundTripper, req *types.StartService) (*types.StartServiceResponse, error) {
	ret := m.ctrl.Call(m, "StartService", ctx, r, req)
	ret0, _ := ret[0].(*types.StartServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartService indicates an expected call of StartService
func (mr *MockContextMockRecorder) StartService(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartService", reflect.TypeOf((*MockContext)(nil).StartService), ctx, r, req)
}

// StopRecording_Task mocks base method
func (m *MockContext) StopRecording_Task(ctx context.Context, r soap.RoundTripper, req *types.StopRecording_Task) (*types.StopRecording_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StopRecording_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StopRecording_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopRecording_Task indicates an expected call of StopRecording_Task
func (mr *MockContextMockRecorder) StopRecording_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRecording_Task", reflect.TypeOf((*MockContext)(nil).StopRecording_Task), ctx, r, req)
}

// StopReplaying_Task mocks base method
func (m *MockContext) StopReplaying_Task(ctx context.Context, r soap.RoundTripper, req *types.StopReplaying_Task) (*types.StopReplaying_TaskResponse, error) {
	ret := m.ctrl.Call(m, "StopReplaying_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.StopReplaying_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopReplaying_Task indicates an expected call of StopReplaying_Task
func (mr *MockContextMockRecorder) StopReplaying_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReplaying_Task", reflect.TypeOf((*MockContext)(nil).StopReplaying_Task), ctx, r, req)
}

// StopService mocks base method
func (m *MockContext) StopService(ctx context.Context, r soap.RoundTripper, req *types.StopService) (*types.StopServiceResponse, error) {
	ret := m.ctrl.Call(m, "StopService", ctx, r, req)
	ret0, _ := ret[0].(*types.StopServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopService indicates an expected call of StopService
func (mr *MockContextMockRecorder) StopService(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopService", reflect.TypeOf((*MockContext)(nil).StopService), ctx, r, req)
}

// SuspendVApp_Task mocks base method
func (m *MockContext) SuspendVApp_Task(ctx context.Context, r soap.RoundTripper, req *types.SuspendVApp_Task) (*types.SuspendVApp_TaskResponse, error) {
	ret := m.ctrl.Call(m, "SuspendVApp_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.SuspendVApp_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendVApp_Task indicates an expected call of SuspendVApp_Task
func (mr *MockContextMockRecorder) SuspendVApp_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendVApp_Task", reflect.TypeOf((*MockContext)(nil).SuspendVApp_Task), ctx, r, req)
}

// SuspendVM_Task mocks base method
func (m *MockContext) SuspendVM_Task(ctx context.Context, r soap.RoundTripper, req *types.SuspendVM_Task) (*types.SuspendVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "SuspendVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.SuspendVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuspendVM_Task indicates an expected call of SuspendVM_Task
func (mr *MockContextMockRecorder) SuspendVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendVM_Task", reflect.TypeOf((*MockContext)(nil).SuspendVM_Task), ctx, r, req)
}

// TerminateFaultTolerantVM_Task mocks base method
func (m *MockContext) TerminateFaultTolerantVM_Task(ctx context.Context, r soap.RoundTripper, req *types.TerminateFaultTolerantVM_Task) (*types.TerminateFaultTolerantVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "TerminateFaultTolerantVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.TerminateFaultTolerantVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateFaultTolerantVM_Task indicates an expected call of TerminateFaultTolerantVM_Task
func (mr *MockContextMockRecorder) TerminateFaultTolerantVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateFaultTolerantVM_Task", reflect.TypeOf((*MockContext)(nil).TerminateFaultTolerantVM_Task), ctx, r, req)
}

// TerminateProcessInGuest mocks base method
func (m *MockContext) TerminateProcessInGuest(ctx context.Context, r soap.RoundTripper, req *types.TerminateProcessInGuest) (*types.TerminateProcessInGuestResponse, error) {
	ret := m.ctrl.Call(m, "TerminateProcessInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.TerminateProcessInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateProcessInGuest indicates an expected call of TerminateProcessInGuest
func (mr *MockContextMockRecorder) TerminateProcessInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateProcessInGuest", reflect.TypeOf((*MockContext)(nil).TerminateProcessInGuest), ctx, r, req)
}

// TerminateSession mocks base method
func (m *MockContext) TerminateSession(ctx context.Context, r soap.RoundTripper, req *types.TerminateSession) (*types.TerminateSessionResponse, error) {
	ret := m.ctrl.Call(m, "TerminateSession", ctx, r, req)
	ret0, _ := ret[0].(*types.TerminateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateSession indicates an expected call of TerminateSession
func (mr *MockContextMockRecorder) TerminateSession(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateSession", reflect.TypeOf((*MockContext)(nil).TerminateSession), ctx, r, req)
}

// TerminateVM mocks base method
func (m *MockContext) TerminateVM(ctx context.Context, r soap.RoundTripper, req *types.TerminateVM) (*types.TerminateVMResponse, error) {
	ret := m.ctrl.Call(m, "TerminateVM", ctx, r, req)
	ret0, _ := ret[0].(*types.TerminateVMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateVM indicates an expected call of TerminateVM
func (mr *MockContextMockRecorder) TerminateVM(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateVM", reflect.TypeOf((*MockContext)(nil).TerminateVM), ctx, r, req)
}

// TurnDiskLocatorLedOff_Task mocks base method
func (m *MockContext) TurnDiskLocatorLedOff_Task(ctx context.Context, r soap.RoundTripper, req *types.TurnDiskLocatorLedOff_Task) (*types.TurnDiskLocatorLedOff_TaskResponse, error) {
	ret := m.ctrl.Call(m, "TurnDiskLocatorLedOff_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.TurnDiskLocatorLedOff_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TurnDiskLocatorLedOff_Task indicates an expected call of TurnDiskLocatorLedOff_Task
func (mr *MockContextMockRecorder) TurnDiskLocatorLedOff_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnDiskLocatorLedOff_Task", reflect.TypeOf((*MockContext)(nil).TurnDiskLocatorLedOff_Task), ctx, r, req)
}

// TurnDiskLocatorLedOn_Task mocks base method
func (m *MockContext) TurnDiskLocatorLedOn_Task(ctx context.Context, r soap.RoundTripper, req *types.TurnDiskLocatorLedOn_Task) (*types.TurnDiskLocatorLedOn_TaskResponse, error) {
	ret := m.ctrl.Call(m, "TurnDiskLocatorLedOn_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.TurnDiskLocatorLedOn_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TurnDiskLocatorLedOn_Task indicates an expected call of TurnDiskLocatorLedOn_Task
func (mr *MockContextMockRecorder) TurnDiskLocatorLedOn_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnDiskLocatorLedOn_Task", reflect.TypeOf((*MockContext)(nil).TurnDiskLocatorLedOn_Task), ctx, r, req)
}

// TurnOffFaultToleranceForVM_Task mocks base method
func (m *MockContext) TurnOffFaultToleranceForVM_Task(ctx context.Context, r soap.RoundTripper, req *types.TurnOffFaultToleranceForVM_Task) (*types.TurnOffFaultToleranceForVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "TurnOffFaultToleranceForVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.TurnOffFaultToleranceForVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TurnOffFaultToleranceForVM_Task indicates an expected call of TurnOffFaultToleranceForVM_Task
func (mr *MockContextMockRecorder) TurnOffFaultToleranceForVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnOffFaultToleranceForVM_Task", reflect.TypeOf((*MockContext)(nil).TurnOffFaultToleranceForVM_Task), ctx, r, req)
}

// UnassignUserFromGroup mocks base method
func (m *MockContext) UnassignUserFromGroup(ctx context.Context, r soap.RoundTripper, req *types.UnassignUserFromGroup) (*types.UnassignUserFromGroupResponse, error) {
	ret := m.ctrl.Call(m, "UnassignUserFromGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.UnassignUserFromGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignUserFromGroup indicates an expected call of UnassignUserFromGroup
func (mr *MockContextMockRecorder) UnassignUserFromGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignUserFromGroup", reflect.TypeOf((*MockContext)(nil).UnassignUserFromGroup), ctx, r, req)
}

// UnbindVnic mocks base method
func (m *MockContext) UnbindVnic(ctx context.Context, r soap.RoundTripper, req *types.UnbindVnic) (*types.UnbindVnicResponse, error) {
	ret := m.ctrl.Call(m, "UnbindVnic", ctx, r, req)
	ret0, _ := ret[0].(*types.UnbindVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbindVnic indicates an expected call of UnbindVnic
func (mr *MockContextMockRecorder) UnbindVnic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindVnic", reflect.TypeOf((*MockContext)(nil).UnbindVnic), ctx, r, req)
}

// UninstallHostPatch_Task mocks base method
func (m *MockContext) UninstallHostPatch_Task(ctx context.Context, r soap.RoundTripper, req *types.UninstallHostPatch_Task) (*types.UninstallHostPatch_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UninstallHostPatch_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UninstallHostPatch_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallHostPatch_Task indicates an expected call of UninstallHostPatch_Task
func (mr *MockContextMockRecorder) UninstallHostPatch_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallHostPatch_Task", reflect.TypeOf((*MockContext)(nil).UninstallHostPatch_Task), ctx, r, req)
}

// UninstallIoFilter_Task mocks base method
func (m *MockContext) UninstallIoFilter_Task(ctx context.Context, r soap.RoundTripper, req *types.UninstallIoFilter_Task) (*types.UninstallIoFilter_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UninstallIoFilter_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UninstallIoFilter_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallIoFilter_Task indicates an expected call of UninstallIoFilter_Task
func (mr *MockContextMockRecorder) UninstallIoFilter_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallIoFilter_Task", reflect.TypeOf((*MockContext)(nil).UninstallIoFilter_Task), ctx, r, req)
}

// UninstallService mocks base method
func (m *MockContext) UninstallService(ctx context.Context, r soap.RoundTripper, req *types.UninstallService) (*types.UninstallServiceResponse, error) {
	ret := m.ctrl.Call(m, "UninstallService", ctx, r, req)
	ret0, _ := ret[0].(*types.UninstallServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UninstallService indicates an expected call of UninstallService
func (mr *MockContextMockRecorder) UninstallService(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallService", reflect.TypeOf((*MockContext)(nil).UninstallService), ctx, r, req)
}

// UnmapVmfsVolumeEx_Task mocks base method
func (m *MockContext) UnmapVmfsVolumeEx_Task(ctx context.Context, r soap.RoundTripper, req *types.UnmapVmfsVolumeEx_Task) (*types.UnmapVmfsVolumeEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UnmapVmfsVolumeEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmapVmfsVolumeEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmapVmfsVolumeEx_Task indicates an expected call of UnmapVmfsVolumeEx_Task
func (mr *MockContextMockRecorder) UnmapVmfsVolumeEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmapVmfsVolumeEx_Task", reflect.TypeOf((*MockContext)(nil).UnmapVmfsVolumeEx_Task), ctx, r, req)
}

// UnmountDiskMapping_Task mocks base method
func (m *MockContext) UnmountDiskMapping_Task(ctx context.Context, r soap.RoundTripper, req *types.UnmountDiskMapping_Task) (*types.UnmountDiskMapping_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UnmountDiskMapping_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountDiskMapping_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountDiskMapping_Task indicates an expected call of UnmountDiskMapping_Task
func (mr *MockContextMockRecorder) UnmountDiskMapping_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountDiskMapping_Task", reflect.TypeOf((*MockContext)(nil).UnmountDiskMapping_Task), ctx, r, req)
}

// UnmountForceMountedVmfsVolume mocks base method
func (m *MockContext) UnmountForceMountedVmfsVolume(ctx context.Context, r soap.RoundTripper, req *types.UnmountForceMountedVmfsVolume) (*types.UnmountForceMountedVmfsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "UnmountForceMountedVmfsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountForceMountedVmfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountForceMountedVmfsVolume indicates an expected call of UnmountForceMountedVmfsVolume
func (mr *MockContextMockRecorder) UnmountForceMountedVmfsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountForceMountedVmfsVolume", reflect.TypeOf((*MockContext)(nil).UnmountForceMountedVmfsVolume), ctx, r, req)
}

// UnmountToolsInstaller mocks base method
func (m *MockContext) UnmountToolsInstaller(ctx context.Context, r soap.RoundTripper, req *types.UnmountToolsInstaller) (*types.UnmountToolsInstallerResponse, error) {
	ret := m.ctrl.Call(m, "UnmountToolsInstaller", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountToolsInstallerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountToolsInstaller indicates an expected call of UnmountToolsInstaller
func (mr *MockContextMockRecorder) UnmountToolsInstaller(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountToolsInstaller", reflect.TypeOf((*MockContext)(nil).UnmountToolsInstaller), ctx, r, req)
}

// UnmountVffsVolume mocks base method
func (m *MockContext) UnmountVffsVolume(ctx context.Context, r soap.RoundTripper, req *types.UnmountVffsVolume) (*types.UnmountVffsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "UnmountVffsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountVffsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountVffsVolume indicates an expected call of UnmountVffsVolume
func (mr *MockContextMockRecorder) UnmountVffsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountVffsVolume", reflect.TypeOf((*MockContext)(nil).UnmountVffsVolume), ctx, r, req)
}

// UnmountVmfsVolume mocks base method
func (m *MockContext) UnmountVmfsVolume(ctx context.Context, r soap.RoundTripper, req *types.UnmountVmfsVolume) (*types.UnmountVmfsVolumeResponse, error) {
	ret := m.ctrl.Call(m, "UnmountVmfsVolume", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountVmfsVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountVmfsVolume indicates an expected call of UnmountVmfsVolume
func (mr *MockContextMockRecorder) UnmountVmfsVolume(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountVmfsVolume", reflect.TypeOf((*MockContext)(nil).UnmountVmfsVolume), ctx, r, req)
}

// UnmountVmfsVolumeEx_Task mocks base method
func (m *MockContext) UnmountVmfsVolumeEx_Task(ctx context.Context, r soap.RoundTripper, req *types.UnmountVmfsVolumeEx_Task) (*types.UnmountVmfsVolumeEx_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UnmountVmfsVolumeEx_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UnmountVmfsVolumeEx_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmountVmfsVolumeEx_Task indicates an expected call of UnmountVmfsVolumeEx_Task
func (mr *MockContextMockRecorder) UnmountVmfsVolumeEx_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountVmfsVolumeEx_Task", reflect.TypeOf((*MockContext)(nil).UnmountVmfsVolumeEx_Task), ctx, r, req)
}

// UnregisterAndDestroy_Task mocks base method
func (m *MockContext) UnregisterAndDestroy_Task(ctx context.Context, r soap.RoundTripper, req *types.UnregisterAndDestroy_Task) (*types.UnregisterAndDestroy_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UnregisterAndDestroy_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UnregisterAndDestroy_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterAndDestroy_Task indicates an expected call of UnregisterAndDestroy_Task
func (mr *MockContextMockRecorder) UnregisterAndDestroy_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterAndDestroy_Task", reflect.TypeOf((*MockContext)(nil).UnregisterAndDestroy_Task), ctx, r, req)
}

// UnregisterExtension mocks base method
func (m *MockContext) UnregisterExtension(ctx context.Context, r soap.RoundTripper, req *types.UnregisterExtension) (*types.UnregisterExtensionResponse, error) {
	ret := m.ctrl.Call(m, "UnregisterExtension", ctx, r, req)
	ret0, _ := ret[0].(*types.UnregisterExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterExtension indicates an expected call of UnregisterExtension
func (mr *MockContextMockRecorder) UnregisterExtension(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterExtension", reflect.TypeOf((*MockContext)(nil).UnregisterExtension), ctx, r, req)
}

// UnregisterHealthUpdateProvider mocks base method
func (m *MockContext) UnregisterHealthUpdateProvider(ctx context.Context, r soap.RoundTripper, req *types.UnregisterHealthUpdateProvider) (*types.UnregisterHealthUpdateProviderResponse, error) {
	ret := m.ctrl.Call(m, "UnregisterHealthUpdateProvider", ctx, r, req)
	ret0, _ := ret[0].(*types.UnregisterHealthUpdateProviderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterHealthUpdateProvider indicates an expected call of UnregisterHealthUpdateProvider
func (mr *MockContextMockRecorder) UnregisterHealthUpdateProvider(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterHealthUpdateProvider", reflect.TypeOf((*MockContext)(nil).UnregisterHealthUpdateProvider), ctx, r, req)
}

// UnregisterVM mocks base method
func (m *MockContext) UnregisterVM(ctx context.Context, r soap.RoundTripper, req *types.UnregisterVM) (*types.UnregisterVMResponse, error) {
	ret := m.ctrl.Call(m, "UnregisterVM", ctx, r, req)
	ret0, _ := ret[0].(*types.UnregisterVMResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnregisterVM indicates an expected call of UnregisterVM
func (mr *MockContextMockRecorder) UnregisterVM(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterVM", reflect.TypeOf((*MockContext)(nil).UnregisterVM), ctx, r, req)
}

// UpdateAnswerFile_Task mocks base method
func (m *MockContext) UpdateAnswerFile_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateAnswerFile_Task) (*types.UpdateAnswerFile_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAnswerFile_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateAnswerFile_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnswerFile_Task indicates an expected call of UpdateAnswerFile_Task
func (mr *MockContextMockRecorder) UpdateAnswerFile_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswerFile_Task", reflect.TypeOf((*MockContext)(nil).UpdateAnswerFile_Task), ctx, r, req)
}

// UpdateAssignedLicense mocks base method
func (m *MockContext) UpdateAssignedLicense(ctx context.Context, r soap.RoundTripper, req *types.UpdateAssignedLicense) (*types.UpdateAssignedLicenseResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAssignedLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateAssignedLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssignedLicense indicates an expected call of UpdateAssignedLicense
func (mr *MockContextMockRecorder) UpdateAssignedLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignedLicense", reflect.TypeOf((*MockContext)(nil).UpdateAssignedLicense), ctx, r, req)
}

// UpdateAuthorizationRole mocks base method
func (m *MockContext) UpdateAuthorizationRole(ctx context.Context, r soap.RoundTripper, req *types.UpdateAuthorizationRole) (*types.UpdateAuthorizationRoleResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAuthorizationRole", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateAuthorizationRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorizationRole indicates an expected call of UpdateAuthorizationRole
func (mr *MockContextMockRecorder) UpdateAuthorizationRole(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorizationRole", reflect.TypeOf((*MockContext)(nil).UpdateAuthorizationRole), ctx, r, req)
}

// UpdateBootDevice mocks base method
func (m *MockContext) UpdateBootDevice(ctx context.Context, r soap.RoundTripper, req *types.UpdateBootDevice) (*types.UpdateBootDeviceResponse, error) {
	ret := m.ctrl.Call(m, "UpdateBootDevice", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateBootDeviceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBootDevice indicates an expected call of UpdateBootDevice
func (mr *MockContextMockRecorder) UpdateBootDevice(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBootDevice", reflect.TypeOf((*MockContext)(nil).UpdateBootDevice), ctx, r, req)
}

// UpdateChildResourceConfiguration mocks base method
func (m *MockContext) UpdateChildResourceConfiguration(ctx context.Context, r soap.RoundTripper, req *types.UpdateChildResourceConfiguration) (*types.UpdateChildResourceConfigurationResponse, error) {
	ret := m.ctrl.Call(m, "UpdateChildResourceConfiguration", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateChildResourceConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChildResourceConfiguration indicates an expected call of UpdateChildResourceConfiguration
func (mr *MockContextMockRecorder) UpdateChildResourceConfiguration(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChildResourceConfiguration", reflect.TypeOf((*MockContext)(nil).UpdateChildResourceConfiguration), ctx, r, req)
}

// UpdateClusterProfile mocks base method
func (m *MockContext) UpdateClusterProfile(ctx context.Context, r soap.RoundTripper, req *types.UpdateClusterProfile) (*types.UpdateClusterProfileResponse, error) {
	ret := m.ctrl.Call(m, "UpdateClusterProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateClusterProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterProfile indicates an expected call of UpdateClusterProfile
func (mr *MockContextMockRecorder) UpdateClusterProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterProfile", reflect.TypeOf((*MockContext)(nil).UpdateClusterProfile), ctx, r, req)
}

// UpdateConfig mocks base method
func (m *MockContext) UpdateConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateConfig) (*types.UpdateConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockContextMockRecorder) UpdateConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockContext)(nil).UpdateConfig), ctx, r, req)
}

// UpdateConsoleIpRouteConfig mocks base method
func (m *MockContext) UpdateConsoleIpRouteConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateConsoleIpRouteConfig) (*types.UpdateConsoleIpRouteConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateConsoleIpRouteConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateConsoleIpRouteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConsoleIpRouteConfig indicates an expected call of UpdateConsoleIpRouteConfig
func (mr *MockContextMockRecorder) UpdateConsoleIpRouteConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConsoleIpRouteConfig", reflect.TypeOf((*MockContext)(nil).UpdateConsoleIpRouteConfig), ctx, r, req)
}

// UpdateCounterLevelMapping mocks base method
func (m *MockContext) UpdateCounterLevelMapping(ctx context.Context, r soap.RoundTripper, req *types.UpdateCounterLevelMapping) (*types.UpdateCounterLevelMappingResponse, error) {
	ret := m.ctrl.Call(m, "UpdateCounterLevelMapping", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateCounterLevelMappingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounterLevelMapping indicates an expected call of UpdateCounterLevelMapping
func (mr *MockContextMockRecorder) UpdateCounterLevelMapping(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounterLevelMapping", reflect.TypeOf((*MockContext)(nil).UpdateCounterLevelMapping), ctx, r, req)
}

// UpdateDVSHealthCheckConfig_Task mocks base method
func (m *MockContext) UpdateDVSHealthCheckConfig_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateDVSHealthCheckConfig_Task) (*types.UpdateDVSHealthCheckConfig_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDVSHealthCheckConfig_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDVSHealthCheckConfig_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDVSHealthCheckConfig_Task indicates an expected call of UpdateDVSHealthCheckConfig_Task
func (mr *MockContextMockRecorder) UpdateDVSHealthCheckConfig_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDVSHealthCheckConfig_Task", reflect.TypeOf((*MockContext)(nil).UpdateDVSHealthCheckConfig_Task), ctx, r, req)
}

// UpdateDVSLacpGroupConfig_Task mocks base method
func (m *MockContext) UpdateDVSLacpGroupConfig_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateDVSLacpGroupConfig_Task) (*types.UpdateDVSLacpGroupConfig_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDVSLacpGroupConfig_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDVSLacpGroupConfig_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDVSLacpGroupConfig_Task indicates an expected call of UpdateDVSLacpGroupConfig_Task
func (mr *MockContextMockRecorder) UpdateDVSLacpGroupConfig_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDVSLacpGroupConfig_Task", reflect.TypeOf((*MockContext)(nil).UpdateDVSLacpGroupConfig_Task), ctx, r, req)
}

// UpdateDateTime mocks base method
func (m *MockContext) UpdateDateTime(ctx context.Context, r soap.RoundTripper, req *types.UpdateDateTime) (*types.UpdateDateTimeResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDateTime", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDateTime indicates an expected call of UpdateDateTime
func (mr *MockContextMockRecorder) UpdateDateTime(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDateTime", reflect.TypeOf((*MockContext)(nil).UpdateDateTime), ctx, r, req)
}

// UpdateDateTimeConfig mocks base method
func (m *MockContext) UpdateDateTimeConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateDateTimeConfig) (*types.UpdateDateTimeConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDateTimeConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDateTimeConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDateTimeConfig indicates an expected call of UpdateDateTimeConfig
func (mr *MockContextMockRecorder) UpdateDateTimeConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDateTimeConfig", reflect.TypeOf((*MockContext)(nil).UpdateDateTimeConfig), ctx, r, req)
}

// UpdateDefaultPolicy mocks base method
func (m *MockContext) UpdateDefaultPolicy(ctx context.Context, r soap.RoundTripper, req *types.UpdateDefaultPolicy) (*types.UpdateDefaultPolicyResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDefaultPolicy", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDefaultPolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDefaultPolicy indicates an expected call of UpdateDefaultPolicy
func (mr *MockContextMockRecorder) UpdateDefaultPolicy(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultPolicy", reflect.TypeOf((*MockContext)(nil).UpdateDefaultPolicy), ctx, r, req)
}

// UpdateDiskPartitions mocks base method
func (m *MockContext) UpdateDiskPartitions(ctx context.Context, r soap.RoundTripper, req *types.UpdateDiskPartitions) (*types.UpdateDiskPartitionsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDiskPartitions", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDiskPartitionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiskPartitions indicates an expected call of UpdateDiskPartitions
func (mr *MockContextMockRecorder) UpdateDiskPartitions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiskPartitions", reflect.TypeOf((*MockContext)(nil).UpdateDiskPartitions), ctx, r, req)
}

// UpdateDnsConfig mocks base method
func (m *MockContext) UpdateDnsConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateDnsConfig) (*types.UpdateDnsConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDnsConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDnsConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDnsConfig indicates an expected call of UpdateDnsConfig
func (mr *MockContextMockRecorder) UpdateDnsConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDnsConfig", reflect.TypeOf((*MockContext)(nil).UpdateDnsConfig), ctx, r, req)
}

// UpdateDvsCapability mocks base method
func (m *MockContext) UpdateDvsCapability(ctx context.Context, r soap.RoundTripper, req *types.UpdateDvsCapability) (*types.UpdateDvsCapabilityResponse, error) {
	ret := m.ctrl.Call(m, "UpdateDvsCapability", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateDvsCapabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDvsCapability indicates an expected call of UpdateDvsCapability
func (mr *MockContextMockRecorder) UpdateDvsCapability(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDvsCapability", reflect.TypeOf((*MockContext)(nil).UpdateDvsCapability), ctx, r, req)
}

// UpdateExtension mocks base method
func (m *MockContext) UpdateExtension(ctx context.Context, r soap.RoundTripper, req *types.UpdateExtension) (*types.UpdateExtensionResponse, error) {
	ret := m.ctrl.Call(m, "UpdateExtension", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateExtensionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtension indicates an expected call of UpdateExtension
func (mr *MockContextMockRecorder) UpdateExtension(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtension", reflect.TypeOf((*MockContext)(nil).UpdateExtension), ctx, r, req)
}

// UpdateFlags mocks base method
func (m *MockContext) UpdateFlags(ctx context.Context, r soap.RoundTripper, req *types.UpdateFlags) (*types.UpdateFlagsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateFlags", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateFlagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFlags indicates an expected call of UpdateFlags
func (mr *MockContextMockRecorder) UpdateFlags(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlags", reflect.TypeOf((*MockContext)(nil).UpdateFlags), ctx, r, req)
}

// UpdateGraphicsConfig mocks base method
func (m *MockContext) UpdateGraphicsConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateGraphicsConfig) (*types.UpdateGraphicsConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateGraphicsConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateGraphicsConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGraphicsConfig indicates an expected call of UpdateGraphicsConfig
func (mr *MockContextMockRecorder) UpdateGraphicsConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphicsConfig", reflect.TypeOf((*MockContext)(nil).UpdateGraphicsConfig), ctx, r, req)
}

// UpdateHostCustomizations_Task mocks base method
func (m *MockContext) UpdateHostCustomizations_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateHostCustomizations_Task) (*types.UpdateHostCustomizations_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateHostCustomizations_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateHostCustomizations_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostCustomizations_Task indicates an expected call of UpdateHostCustomizations_Task
func (mr *MockContextMockRecorder) UpdateHostCustomizations_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostCustomizations_Task", reflect.TypeOf((*MockContext)(nil).UpdateHostCustomizations_Task), ctx, r, req)
}

// UpdateHostImageAcceptanceLevel mocks base method
func (m *MockContext) UpdateHostImageAcceptanceLevel(ctx context.Context, r soap.RoundTripper, req *types.UpdateHostImageAcceptanceLevel) (*types.UpdateHostImageAcceptanceLevelResponse, error) {
	ret := m.ctrl.Call(m, "UpdateHostImageAcceptanceLevel", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateHostImageAcceptanceLevelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostImageAcceptanceLevel indicates an expected call of UpdateHostImageAcceptanceLevel
func (mr *MockContextMockRecorder) UpdateHostImageAcceptanceLevel(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostImageAcceptanceLevel", reflect.TypeOf((*MockContext)(nil).UpdateHostImageAcceptanceLevel), ctx, r, req)
}

// UpdateHostProfile mocks base method
func (m *MockContext) UpdateHostProfile(ctx context.Context, r soap.RoundTripper, req *types.UpdateHostProfile) (*types.UpdateHostProfileResponse, error) {
	ret := m.ctrl.Call(m, "UpdateHostProfile", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateHostProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostProfile indicates an expected call of UpdateHostProfile
func (mr *MockContextMockRecorder) UpdateHostProfile(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostProfile", reflect.TypeOf((*MockContext)(nil).UpdateHostProfile), ctx, r, req)
}

// UpdateHostSpecification mocks base method
func (m *MockContext) UpdateHostSpecification(ctx context.Context, r soap.RoundTripper, req *types.UpdateHostSpecification) (*types.UpdateHostSpecificationResponse, error) {
	ret := m.ctrl.Call(m, "UpdateHostSpecification", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateHostSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostSpecification indicates an expected call of UpdateHostSpecification
func (mr *MockContextMockRecorder) UpdateHostSpecification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostSpecification", reflect.TypeOf((*MockContext)(nil).UpdateHostSpecification), ctx, r, req)
}

// UpdateHostSubSpecification mocks base method
func (m *MockContext) UpdateHostSubSpecification(ctx context.Context, r soap.RoundTripper, req *types.UpdateHostSubSpecification) (*types.UpdateHostSubSpecificationResponse, error) {
	ret := m.ctrl.Call(m, "UpdateHostSubSpecification", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateHostSubSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHostSubSpecification indicates an expected call of UpdateHostSubSpecification
func (mr *MockContextMockRecorder) UpdateHostSubSpecification(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHostSubSpecification", reflect.TypeOf((*MockContext)(nil).UpdateHostSubSpecification), ctx, r, req)
}

// UpdateInternetScsiAdvancedOptions mocks base method
func (m *MockContext) UpdateInternetScsiAdvancedOptions(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiAdvancedOptions) (*types.UpdateInternetScsiAdvancedOptionsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiAdvancedOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiAdvancedOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiAdvancedOptions indicates an expected call of UpdateInternetScsiAdvancedOptions
func (mr *MockContextMockRecorder) UpdateInternetScsiAdvancedOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiAdvancedOptions", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiAdvancedOptions), ctx, r, req)
}

// UpdateInternetScsiAlias mocks base method
func (m *MockContext) UpdateInternetScsiAlias(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiAlias) (*types.UpdateInternetScsiAliasResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiAlias", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiAlias indicates an expected call of UpdateInternetScsiAlias
func (mr *MockContextMockRecorder) UpdateInternetScsiAlias(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiAlias", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiAlias), ctx, r, req)
}

// UpdateInternetScsiAuthenticationProperties mocks base method
func (m *MockContext) UpdateInternetScsiAuthenticationProperties(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiAuthenticationProperties) (*types.UpdateInternetScsiAuthenticationPropertiesResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiAuthenticationProperties", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiAuthenticationPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiAuthenticationProperties indicates an expected call of UpdateInternetScsiAuthenticationProperties
func (mr *MockContextMockRecorder) UpdateInternetScsiAuthenticationProperties(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiAuthenticationProperties", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiAuthenticationProperties), ctx, r, req)
}

// UpdateInternetScsiDigestProperties mocks base method
func (m *MockContext) UpdateInternetScsiDigestProperties(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiDigestProperties) (*types.UpdateInternetScsiDigestPropertiesResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiDigestProperties", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiDigestPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiDigestProperties indicates an expected call of UpdateInternetScsiDigestProperties
func (mr *MockContextMockRecorder) UpdateInternetScsiDigestProperties(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiDigestProperties", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiDigestProperties), ctx, r, req)
}

// UpdateInternetScsiDiscoveryProperties mocks base method
func (m *MockContext) UpdateInternetScsiDiscoveryProperties(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiDiscoveryProperties) (*types.UpdateInternetScsiDiscoveryPropertiesResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiDiscoveryProperties", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiDiscoveryPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiDiscoveryProperties indicates an expected call of UpdateInternetScsiDiscoveryProperties
func (mr *MockContextMockRecorder) UpdateInternetScsiDiscoveryProperties(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiDiscoveryProperties", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiDiscoveryProperties), ctx, r, req)
}

// UpdateInternetScsiIPProperties mocks base method
func (m *MockContext) UpdateInternetScsiIPProperties(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiIPProperties) (*types.UpdateInternetScsiIPPropertiesResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiIPProperties", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiIPPropertiesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiIPProperties indicates an expected call of UpdateInternetScsiIPProperties
func (mr *MockContextMockRecorder) UpdateInternetScsiIPProperties(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiIPProperties", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiIPProperties), ctx, r, req)
}

// UpdateInternetScsiName mocks base method
func (m *MockContext) UpdateInternetScsiName(ctx context.Context, r soap.RoundTripper, req *types.UpdateInternetScsiName) (*types.UpdateInternetScsiNameResponse, error) {
	ret := m.ctrl.Call(m, "UpdateInternetScsiName", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateInternetScsiNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInternetScsiName indicates an expected call of UpdateInternetScsiName
func (mr *MockContextMockRecorder) UpdateInternetScsiName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInternetScsiName", reflect.TypeOf((*MockContext)(nil).UpdateInternetScsiName), ctx, r, req)
}

// UpdateIpConfig mocks base method
func (m *MockContext) UpdateIpConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateIpConfig) (*types.UpdateIpConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIpConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateIpConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpConfig indicates an expected call of UpdateIpConfig
func (mr *MockContextMockRecorder) UpdateIpConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpConfig", reflect.TypeOf((*MockContext)(nil).UpdateIpConfig), ctx, r, req)
}

// UpdateIpPool mocks base method
func (m *MockContext) UpdateIpPool(ctx context.Context, r soap.RoundTripper, req *types.UpdateIpPool) (*types.UpdateIpPoolResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIpPool", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateIpPoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpPool indicates an expected call of UpdateIpPool
func (mr *MockContextMockRecorder) UpdateIpPool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpPool", reflect.TypeOf((*MockContext)(nil).UpdateIpPool), ctx, r, req)
}

// UpdateIpRouteConfig mocks base method
func (m *MockContext) UpdateIpRouteConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateIpRouteConfig) (*types.UpdateIpRouteConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIpRouteConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateIpRouteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpRouteConfig indicates an expected call of UpdateIpRouteConfig
func (mr *MockContextMockRecorder) UpdateIpRouteConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpRouteConfig", reflect.TypeOf((*MockContext)(nil).UpdateIpRouteConfig), ctx, r, req)
}

// UpdateIpRouteTableConfig mocks base method
func (m *MockContext) UpdateIpRouteTableConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateIpRouteTableConfig) (*types.UpdateIpRouteTableConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIpRouteTableConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateIpRouteTableConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpRouteTableConfig indicates an expected call of UpdateIpRouteTableConfig
func (mr *MockContextMockRecorder) UpdateIpRouteTableConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpRouteTableConfig", reflect.TypeOf((*MockContext)(nil).UpdateIpRouteTableConfig), ctx, r, req)
}

// UpdateIpmi mocks base method
func (m *MockContext) UpdateIpmi(ctx context.Context, r soap.RoundTripper, req *types.UpdateIpmi) (*types.UpdateIpmiResponse, error) {
	ret := m.ctrl.Call(m, "UpdateIpmi", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateIpmiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIpmi indicates an expected call of UpdateIpmi
func (mr *MockContextMockRecorder) UpdateIpmi(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIpmi", reflect.TypeOf((*MockContext)(nil).UpdateIpmi), ctx, r, req)
}

// UpdateKmipServer mocks base method
func (m *MockContext) UpdateKmipServer(ctx context.Context, r soap.RoundTripper, req *types.UpdateKmipServer) (*types.UpdateKmipServerResponse, error) {
	ret := m.ctrl.Call(m, "UpdateKmipServer", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateKmipServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKmipServer indicates an expected call of UpdateKmipServer
func (mr *MockContextMockRecorder) UpdateKmipServer(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKmipServer", reflect.TypeOf((*MockContext)(nil).UpdateKmipServer), ctx, r, req)
}

// UpdateKmsSignedCsrClientCert mocks base method
func (m *MockContext) UpdateKmsSignedCsrClientCert(ctx context.Context, r soap.RoundTripper, req *types.UpdateKmsSignedCsrClientCert) (*types.UpdateKmsSignedCsrClientCertResponse, error) {
	ret := m.ctrl.Call(m, "UpdateKmsSignedCsrClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateKmsSignedCsrClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKmsSignedCsrClientCert indicates an expected call of UpdateKmsSignedCsrClientCert
func (mr *MockContextMockRecorder) UpdateKmsSignedCsrClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKmsSignedCsrClientCert", reflect.TypeOf((*MockContext)(nil).UpdateKmsSignedCsrClientCert), ctx, r, req)
}

// UpdateLicense mocks base method
func (m *MockContext) UpdateLicense(ctx context.Context, r soap.RoundTripper, req *types.UpdateLicense) (*types.UpdateLicenseResponse, error) {
	ret := m.ctrl.Call(m, "UpdateLicense", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateLicenseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicense indicates an expected call of UpdateLicense
func (mr *MockContextMockRecorder) UpdateLicense(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicense", reflect.TypeOf((*MockContext)(nil).UpdateLicense), ctx, r, req)
}

// UpdateLicenseLabel mocks base method
func (m *MockContext) UpdateLicenseLabel(ctx context.Context, r soap.RoundTripper, req *types.UpdateLicenseLabel) (*types.UpdateLicenseLabelResponse, error) {
	ret := m.ctrl.Call(m, "UpdateLicenseLabel", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateLicenseLabelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLicenseLabel indicates an expected call of UpdateLicenseLabel
func (mr *MockContextMockRecorder) UpdateLicenseLabel(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLicenseLabel", reflect.TypeOf((*MockContext)(nil).UpdateLicenseLabel), ctx, r, req)
}

// UpdateLinkedChildren mocks base method
func (m *MockContext) UpdateLinkedChildren(ctx context.Context, r soap.RoundTripper, req *types.UpdateLinkedChildren) (*types.UpdateLinkedChildrenResponse, error) {
	ret := m.ctrl.Call(m, "UpdateLinkedChildren", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateLinkedChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLinkedChildren indicates an expected call of UpdateLinkedChildren
func (mr *MockContextMockRecorder) UpdateLinkedChildren(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLinkedChildren", reflect.TypeOf((*MockContext)(nil).UpdateLinkedChildren), ctx, r, req)
}

// UpdateLocalSwapDatastore mocks base method
func (m *MockContext) UpdateLocalSwapDatastore(ctx context.Context, r soap.RoundTripper, req *types.UpdateLocalSwapDatastore) (*types.UpdateLocalSwapDatastoreResponse, error) {
	ret := m.ctrl.Call(m, "UpdateLocalSwapDatastore", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateLocalSwapDatastoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocalSwapDatastore indicates an expected call of UpdateLocalSwapDatastore
func (mr *MockContextMockRecorder) UpdateLocalSwapDatastore(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocalSwapDatastore", reflect.TypeOf((*MockContext)(nil).UpdateLocalSwapDatastore), ctx, r, req)
}

// UpdateLockdownExceptions mocks base method
func (m *MockContext) UpdateLockdownExceptions(ctx context.Context, r soap.RoundTripper, req *types.UpdateLockdownExceptions) (*types.UpdateLockdownExceptionsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateLockdownExceptions", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateLockdownExceptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLockdownExceptions indicates an expected call of UpdateLockdownExceptions
func (mr *MockContextMockRecorder) UpdateLockdownExceptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLockdownExceptions", reflect.TypeOf((*MockContext)(nil).UpdateLockdownExceptions), ctx, r, req)
}

// UpdateModuleOptionString mocks base method
func (m *MockContext) UpdateModuleOptionString(ctx context.Context, r soap.RoundTripper, req *types.UpdateModuleOptionString) (*types.UpdateModuleOptionStringResponse, error) {
	ret := m.ctrl.Call(m, "UpdateModuleOptionString", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateModuleOptionStringResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModuleOptionString indicates an expected call of UpdateModuleOptionString
func (mr *MockContextMockRecorder) UpdateModuleOptionString(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleOptionString", reflect.TypeOf((*MockContext)(nil).UpdateModuleOptionString), ctx, r, req)
}

// UpdateNetworkConfig mocks base method
func (m *MockContext) UpdateNetworkConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateNetworkConfig) (*types.UpdateNetworkConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateNetworkConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateNetworkConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkConfig indicates an expected call of UpdateNetworkConfig
func (mr *MockContextMockRecorder) UpdateNetworkConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkConfig", reflect.TypeOf((*MockContext)(nil).UpdateNetworkConfig), ctx, r, req)
}

// UpdateNetworkResourcePool mocks base method
func (m *MockContext) UpdateNetworkResourcePool(ctx context.Context, r soap.RoundTripper, req *types.UpdateNetworkResourcePool) (*types.UpdateNetworkResourcePoolResponse, error) {
	ret := m.ctrl.Call(m, "UpdateNetworkResourcePool", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateNetworkResourcePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkResourcePool indicates an expected call of UpdateNetworkResourcePool
func (mr *MockContextMockRecorder) UpdateNetworkResourcePool(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkResourcePool", reflect.TypeOf((*MockContext)(nil).UpdateNetworkResourcePool), ctx, r, req)
}

// UpdateOptions mocks base method
func (m *MockContext) UpdateOptions(ctx context.Context, r soap.RoundTripper, req *types.UpdateOptions) (*types.UpdateOptionsResponse, error) {
	ret := m.ctrl.Call(m, "UpdateOptions", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOptions indicates an expected call of UpdateOptions
func (mr *MockContextMockRecorder) UpdateOptions(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOptions", reflect.TypeOf((*MockContext)(nil).UpdateOptions), ctx, r, req)
}

// UpdatePassthruConfig mocks base method
func (m *MockContext) UpdatePassthruConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdatePassthruConfig) (*types.UpdatePassthruConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdatePassthruConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdatePassthruConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassthruConfig indicates an expected call of UpdatePassthruConfig
func (mr *MockContextMockRecorder) UpdatePassthruConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassthruConfig", reflect.TypeOf((*MockContext)(nil).UpdatePassthruConfig), ctx, r, req)
}

// UpdatePerfInterval mocks base method
func (m *MockContext) UpdatePerfInterval(ctx context.Context, r soap.RoundTripper, req *types.UpdatePerfInterval) (*types.UpdatePerfIntervalResponse, error) {
	ret := m.ctrl.Call(m, "UpdatePerfInterval", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdatePerfIntervalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerfInterval indicates an expected call of UpdatePerfInterval
func (mr *MockContextMockRecorder) UpdatePerfInterval(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerfInterval", reflect.TypeOf((*MockContext)(nil).UpdatePerfInterval), ctx, r, req)
}

// UpdatePhysicalNicLinkSpeed mocks base method
func (m *MockContext) UpdatePhysicalNicLinkSpeed(ctx context.Context, r soap.RoundTripper, req *types.UpdatePhysicalNicLinkSpeed) (*types.UpdatePhysicalNicLinkSpeedResponse, error) {
	ret := m.ctrl.Call(m, "UpdatePhysicalNicLinkSpeed", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdatePhysicalNicLinkSpeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhysicalNicLinkSpeed indicates an expected call of UpdatePhysicalNicLinkSpeed
func (mr *MockContextMockRecorder) UpdatePhysicalNicLinkSpeed(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhysicalNicLinkSpeed", reflect.TypeOf((*MockContext)(nil).UpdatePhysicalNicLinkSpeed), ctx, r, req)
}

// UpdatePortGroup mocks base method
func (m *MockContext) UpdatePortGroup(ctx context.Context, r soap.RoundTripper, req *types.UpdatePortGroup) (*types.UpdatePortGroupResponse, error) {
	ret := m.ctrl.Call(m, "UpdatePortGroup", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdatePortGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePortGroup indicates an expected call of UpdatePortGroup
func (mr *MockContextMockRecorder) UpdatePortGroup(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePortGroup", reflect.TypeOf((*MockContext)(nil).UpdatePortGroup), ctx, r, req)
}

// UpdateProgress mocks base method
func (m *MockContext) UpdateProgress(ctx context.Context, r soap.RoundTripper, req *types.UpdateProgress) (*types.UpdateProgressResponse, error) {
	ret := m.ctrl.Call(m, "UpdateProgress", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateProgressResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProgress indicates an expected call of UpdateProgress
func (mr *MockContextMockRecorder) UpdateProgress(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockContext)(nil).UpdateProgress), ctx, r, req)
}

// UpdateReferenceHost mocks base method
func (m *MockContext) UpdateReferenceHost(ctx context.Context, r soap.RoundTripper, req *types.UpdateReferenceHost) (*types.UpdateReferenceHostResponse, error) {
	ret := m.ctrl.Call(m, "UpdateReferenceHost", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateReferenceHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReferenceHost indicates an expected call of UpdateReferenceHost
func (mr *MockContextMockRecorder) UpdateReferenceHost(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceHost", reflect.TypeOf((*MockContext)(nil).UpdateReferenceHost), ctx, r, req)
}

// UpdateRuleset mocks base method
func (m *MockContext) UpdateRuleset(ctx context.Context, r soap.RoundTripper, req *types.UpdateRuleset) (*types.UpdateRulesetResponse, error) {
	ret := m.ctrl.Call(m, "UpdateRuleset", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateRulesetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRuleset indicates an expected call of UpdateRuleset
func (mr *MockContextMockRecorder) UpdateRuleset(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRuleset", reflect.TypeOf((*MockContext)(nil).UpdateRuleset), ctx, r, req)
}

// UpdateScsiLunDisplayName mocks base method
func (m *MockContext) UpdateScsiLunDisplayName(ctx context.Context, r soap.RoundTripper, req *types.UpdateScsiLunDisplayName) (*types.UpdateScsiLunDisplayNameResponse, error) {
	ret := m.ctrl.Call(m, "UpdateScsiLunDisplayName", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateScsiLunDisplayNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScsiLunDisplayName indicates an expected call of UpdateScsiLunDisplayName
func (mr *MockContextMockRecorder) UpdateScsiLunDisplayName(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScsiLunDisplayName", reflect.TypeOf((*MockContext)(nil).UpdateScsiLunDisplayName), ctx, r, req)
}

// UpdateSelfSignedClientCert mocks base method
func (m *MockContext) UpdateSelfSignedClientCert(ctx context.Context, r soap.RoundTripper, req *types.UpdateSelfSignedClientCert) (*types.UpdateSelfSignedClientCertResponse, error) {
	ret := m.ctrl.Call(m, "UpdateSelfSignedClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateSelfSignedClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelfSignedClientCert indicates an expected call of UpdateSelfSignedClientCert
func (mr *MockContextMockRecorder) UpdateSelfSignedClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelfSignedClientCert", reflect.TypeOf((*MockContext)(nil).UpdateSelfSignedClientCert), ctx, r, req)
}

// UpdateServiceConsoleVirtualNic mocks base method
func (m *MockContext) UpdateServiceConsoleVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.UpdateServiceConsoleVirtualNic) (*types.UpdateServiceConsoleVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "UpdateServiceConsoleVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateServiceConsoleVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceConsoleVirtualNic indicates an expected call of UpdateServiceConsoleVirtualNic
func (mr *MockContextMockRecorder) UpdateServiceConsoleVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceConsoleVirtualNic", reflect.TypeOf((*MockContext)(nil).UpdateServiceConsoleVirtualNic), ctx, r, req)
}

// UpdateServiceMessage mocks base method
func (m *MockContext) UpdateServiceMessage(ctx context.Context, r soap.RoundTripper, req *types.UpdateServiceMessage) (*types.UpdateServiceMessageResponse, error) {
	ret := m.ctrl.Call(m, "UpdateServiceMessage", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateServiceMessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServiceMessage indicates an expected call of UpdateServiceMessage
func (mr *MockContextMockRecorder) UpdateServiceMessage(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceMessage", reflect.TypeOf((*MockContext)(nil).UpdateServiceMessage), ctx, r, req)
}

// UpdateServicePolicy mocks base method
func (m *MockContext) UpdateServicePolicy(ctx context.Context, r soap.RoundTripper, req *types.UpdateServicePolicy) (*types.UpdateServicePolicyResponse, error) {
	ret := m.ctrl.Call(m, "UpdateServicePolicy", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateServicePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServicePolicy indicates an expected call of UpdateServicePolicy
func (mr *MockContextMockRecorder) UpdateServicePolicy(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServicePolicy", reflect.TypeOf((*MockContext)(nil).UpdateServicePolicy), ctx, r, req)
}

// UpdateSoftwareInternetScsiEnabled mocks base method
func (m *MockContext) UpdateSoftwareInternetScsiEnabled(ctx context.Context, r soap.RoundTripper, req *types.UpdateSoftwareInternetScsiEnabled) (*types.UpdateSoftwareInternetScsiEnabledResponse, error) {
	ret := m.ctrl.Call(m, "UpdateSoftwareInternetScsiEnabled", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateSoftwareInternetScsiEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSoftwareInternetScsiEnabled indicates an expected call of UpdateSoftwareInternetScsiEnabled
func (mr *MockContextMockRecorder) UpdateSoftwareInternetScsiEnabled(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoftwareInternetScsiEnabled", reflect.TypeOf((*MockContext)(nil).UpdateSoftwareInternetScsiEnabled), ctx, r, req)
}

// UpdateSystemResources mocks base method
func (m *MockContext) UpdateSystemResources(ctx context.Context, r soap.RoundTripper, req *types.UpdateSystemResources) (*types.UpdateSystemResourcesResponse, error) {
	ret := m.ctrl.Call(m, "UpdateSystemResources", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateSystemResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemResources indicates an expected call of UpdateSystemResources
func (mr *MockContextMockRecorder) UpdateSystemResources(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemResources", reflect.TypeOf((*MockContext)(nil).UpdateSystemResources), ctx, r, req)
}

// UpdateSystemSwapConfiguration mocks base method
func (m *MockContext) UpdateSystemSwapConfiguration(ctx context.Context, r soap.RoundTripper, req *types.UpdateSystemSwapConfiguration) (*types.UpdateSystemSwapConfigurationResponse, error) {
	ret := m.ctrl.Call(m, "UpdateSystemSwapConfiguration", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateSystemSwapConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemSwapConfiguration indicates an expected call of UpdateSystemSwapConfiguration
func (mr *MockContextMockRecorder) UpdateSystemSwapConfiguration(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSwapConfiguration", reflect.TypeOf((*MockContext)(nil).UpdateSystemSwapConfiguration), ctx, r, req)
}

// UpdateSystemUsers mocks base method
func (m *MockContext) UpdateSystemUsers(ctx context.Context, r soap.RoundTripper, req *types.UpdateSystemUsers) (*types.UpdateSystemUsersResponse, error) {
	ret := m.ctrl.Call(m, "UpdateSystemUsers", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateSystemUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemUsers indicates an expected call of UpdateSystemUsers
func (mr *MockContextMockRecorder) UpdateSystemUsers(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemUsers", reflect.TypeOf((*MockContext)(nil).UpdateSystemUsers), ctx, r, req)
}

// UpdateUser mocks base method
func (m *MockContext) UpdateUser(ctx context.Context, r soap.RoundTripper, req *types.UpdateUser) (*types.UpdateUserResponse, error) {
	ret := m.ctrl.Call(m, "UpdateUser", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockContextMockRecorder) UpdateUser(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockContext)(nil).UpdateUser), ctx, r, req)
}

// UpdateVAppConfig mocks base method
func (m *MockContext) UpdateVAppConfig(ctx context.Context, r soap.RoundTripper, req *types.UpdateVAppConfig) (*types.UpdateVAppConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVAppConfig", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVAppConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVAppConfig indicates an expected call of UpdateVAppConfig
func (mr *MockContextMockRecorder) UpdateVAppConfig(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVAppConfig", reflect.TypeOf((*MockContext)(nil).UpdateVAppConfig), ctx, r, req)
}

// UpdateVVolVirtualMachineFiles_Task mocks base method
func (m *MockContext) UpdateVVolVirtualMachineFiles_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateVVolVirtualMachineFiles_Task) (*types.UpdateVVolVirtualMachineFiles_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVVolVirtualMachineFiles_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVVolVirtualMachineFiles_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVVolVirtualMachineFiles_Task indicates an expected call of UpdateVVolVirtualMachineFiles_Task
func (mr *MockContextMockRecorder) UpdateVVolVirtualMachineFiles_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVVolVirtualMachineFiles_Task", reflect.TypeOf((*MockContext)(nil).UpdateVVolVirtualMachineFiles_Task), ctx, r, req)
}

// UpdateVirtualMachineFiles_Task mocks base method
func (m *MockContext) UpdateVirtualMachineFiles_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateVirtualMachineFiles_Task) (*types.UpdateVirtualMachineFiles_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVirtualMachineFiles_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVirtualMachineFiles_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualMachineFiles_Task indicates an expected call of UpdateVirtualMachineFiles_Task
func (mr *MockContextMockRecorder) UpdateVirtualMachineFiles_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualMachineFiles_Task", reflect.TypeOf((*MockContext)(nil).UpdateVirtualMachineFiles_Task), ctx, r, req)
}

// UpdateVirtualNic mocks base method
func (m *MockContext) UpdateVirtualNic(ctx context.Context, r soap.RoundTripper, req *types.UpdateVirtualNic) (*types.UpdateVirtualNicResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVirtualNic", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVirtualNicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualNic indicates an expected call of UpdateVirtualNic
func (mr *MockContextMockRecorder) UpdateVirtualNic(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNic", reflect.TypeOf((*MockContext)(nil).UpdateVirtualNic), ctx, r, req)
}

// UpdateVirtualSwitch mocks base method
func (m *MockContext) UpdateVirtualSwitch(ctx context.Context, r soap.RoundTripper, req *types.UpdateVirtualSwitch) (*types.UpdateVirtualSwitchResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVirtualSwitch", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVirtualSwitchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualSwitch indicates an expected call of UpdateVirtualSwitch
func (mr *MockContextMockRecorder) UpdateVirtualSwitch(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualSwitch", reflect.TypeOf((*MockContext)(nil).UpdateVirtualSwitch), ctx, r, req)
}

// UpdateVmfsUnmapPriority mocks base method
func (m *MockContext) UpdateVmfsUnmapPriority(ctx context.Context, r soap.RoundTripper, req *types.UpdateVmfsUnmapPriority) (*types.UpdateVmfsUnmapPriorityResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVmfsUnmapPriority", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVmfsUnmapPriorityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVmfsUnmapPriority indicates an expected call of UpdateVmfsUnmapPriority
func (mr *MockContextMockRecorder) UpdateVmfsUnmapPriority(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVmfsUnmapPriority", reflect.TypeOf((*MockContext)(nil).UpdateVmfsUnmapPriority), ctx, r, req)
}

// UpdateVsan_Task mocks base method
func (m *MockContext) UpdateVsan_Task(ctx context.Context, r soap.RoundTripper, req *types.UpdateVsan_Task) (*types.UpdateVsan_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpdateVsan_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpdateVsan_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVsan_Task indicates an expected call of UpdateVsan_Task
func (mr *MockContextMockRecorder) UpdateVsan_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVsan_Task", reflect.TypeOf((*MockContext)(nil).UpdateVsan_Task), ctx, r, req)
}

// UpgradeIoFilter_Task mocks base method
func (m *MockContext) UpgradeIoFilter_Task(ctx context.Context, r soap.RoundTripper, req *types.UpgradeIoFilter_Task) (*types.UpgradeIoFilter_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeIoFilter_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeIoFilter_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeIoFilter_Task indicates an expected call of UpgradeIoFilter_Task
func (mr *MockContextMockRecorder) UpgradeIoFilter_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeIoFilter_Task", reflect.TypeOf((*MockContext)(nil).UpgradeIoFilter_Task), ctx, r, req)
}

// UpgradeTools_Task mocks base method
func (m *MockContext) UpgradeTools_Task(ctx context.Context, r soap.RoundTripper, req *types.UpgradeTools_Task) (*types.UpgradeTools_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeTools_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeTools_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeTools_Task indicates an expected call of UpgradeTools_Task
func (mr *MockContextMockRecorder) UpgradeTools_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeTools_Task", reflect.TypeOf((*MockContext)(nil).UpgradeTools_Task), ctx, r, req)
}

// UpgradeVM_Task mocks base method
func (m *MockContext) UpgradeVM_Task(ctx context.Context, r soap.RoundTripper, req *types.UpgradeVM_Task) (*types.UpgradeVM_TaskResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeVM_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeVM_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeVM_Task indicates an expected call of UpgradeVM_Task
func (mr *MockContextMockRecorder) UpgradeVM_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeVM_Task", reflect.TypeOf((*MockContext)(nil).UpgradeVM_Task), ctx, r, req)
}

// UpgradeVmLayout mocks base method
func (m *MockContext) UpgradeVmLayout(ctx context.Context, r soap.RoundTripper, req *types.UpgradeVmLayout) (*types.UpgradeVmLayoutResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeVmLayout", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeVmLayoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeVmLayout indicates an expected call of UpgradeVmLayout
func (mr *MockContextMockRecorder) UpgradeVmLayout(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeVmLayout", reflect.TypeOf((*MockContext)(nil).UpgradeVmLayout), ctx, r, req)
}

// UpgradeVmfs mocks base method
func (m *MockContext) UpgradeVmfs(ctx context.Context, r soap.RoundTripper, req *types.UpgradeVmfs) (*types.UpgradeVmfsResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeVmfs", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeVmfsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeVmfs indicates an expected call of UpgradeVmfs
func (mr *MockContextMockRecorder) UpgradeVmfs(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeVmfs", reflect.TypeOf((*MockContext)(nil).UpgradeVmfs), ctx, r, req)
}

// UpgradeVsanObjects mocks base method
func (m *MockContext) UpgradeVsanObjects(ctx context.Context, r soap.RoundTripper, req *types.UpgradeVsanObjects) (*types.UpgradeVsanObjectsResponse, error) {
	ret := m.ctrl.Call(m, "UpgradeVsanObjects", ctx, r, req)
	ret0, _ := ret[0].(*types.UpgradeVsanObjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeVsanObjects indicates an expected call of UpgradeVsanObjects
func (mr *MockContextMockRecorder) UpgradeVsanObjects(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeVsanObjects", reflect.TypeOf((*MockContext)(nil).UpgradeVsanObjects), ctx, r, req)
}

// UploadClientCert mocks base method
func (m *MockContext) UploadClientCert(ctx context.Context, r soap.RoundTripper, req *types.UploadClientCert) (*types.UploadClientCertResponse, error) {
	ret := m.ctrl.Call(m, "UploadClientCert", ctx, r, req)
	ret0, _ := ret[0].(*types.UploadClientCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadClientCert indicates an expected call of UploadClientCert
func (mr *MockContextMockRecorder) UploadClientCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadClientCert", reflect.TypeOf((*MockContext)(nil).UploadClientCert), ctx, r, req)
}

// UploadKmipServerCert mocks base method
func (m *MockContext) UploadKmipServerCert(ctx context.Context, r soap.RoundTripper, req *types.UploadKmipServerCert) (*types.UploadKmipServerCertResponse, error) {
	ret := m.ctrl.Call(m, "UploadKmipServerCert", ctx, r, req)
	ret0, _ := ret[0].(*types.UploadKmipServerCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadKmipServerCert indicates an expected call of UploadKmipServerCert
func (mr *MockContextMockRecorder) UploadKmipServerCert(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadKmipServerCert", reflect.TypeOf((*MockContext)(nil).UploadKmipServerCert), ctx, r, req)
}

// ValidateCredentialsInGuest mocks base method
func (m *MockContext) ValidateCredentialsInGuest(ctx context.Context, r soap.RoundTripper, req *types.ValidateCredentialsInGuest) (*types.ValidateCredentialsInGuestResponse, error) {
	ret := m.ctrl.Call(m, "ValidateCredentialsInGuest", ctx, r, req)
	ret0, _ := ret[0].(*types.ValidateCredentialsInGuestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCredentialsInGuest indicates an expected call of ValidateCredentialsInGuest
func (mr *MockContextMockRecorder) ValidateCredentialsInGuest(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentialsInGuest", reflect.TypeOf((*MockContext)(nil).ValidateCredentialsInGuest), ctx, r, req)
}

// ValidateHost mocks base method
func (m *MockContext) ValidateHost(ctx context.Context, r soap.RoundTripper, req *types.ValidateHost) (*types.ValidateHostResponse, error) {
	ret := m.ctrl.Call(m, "ValidateHost", ctx, r, req)
	ret0, _ := ret[0].(*types.ValidateHostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateHost indicates an expected call of ValidateHost
func (mr *MockContextMockRecorder) ValidateHost(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateHost", reflect.TypeOf((*MockContext)(nil).ValidateHost), ctx, r, req)
}

// ValidateMigration mocks base method
func (m *MockContext) ValidateMigration(ctx context.Context, r soap.RoundTripper, req *types.ValidateMigration) (*types.ValidateMigrationResponse, error) {
	ret := m.ctrl.Call(m, "ValidateMigration", ctx, r, req)
	ret0, _ := ret[0].(*types.ValidateMigrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMigration indicates an expected call of ValidateMigration
func (mr *MockContextMockRecorder) ValidateMigration(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMigration", reflect.TypeOf((*MockContext)(nil).ValidateMigration), ctx, r, req)
}

// WaitForUpdates mocks base method
func (m *MockContext) WaitForUpdates(ctx context.Context, r soap.RoundTripper, req *types.WaitForUpdates) (*types.WaitForUpdatesResponse, error) {
	ret := m.ctrl.Call(m, "WaitForUpdates", ctx, r, req)
	ret0, _ := ret[0].(*types.WaitForUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForUpdates indicates an expected call of WaitForUpdates
func (mr *MockContextMockRecorder) WaitForUpdates(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForUpdates", reflect.TypeOf((*MockContext)(nil).WaitForUpdates), ctx, r, req)
}

// WaitForUpdatesEx mocks base method
func (m *MockContext) WaitForUpdatesEx(ctx context.Context, r soap.RoundTripper, req *types.WaitForUpdatesEx) (*types.WaitForUpdatesExResponse, error) {
	ret := m.ctrl.Call(m, "WaitForUpdatesEx", ctx, r, req)
	ret0, _ := ret[0].(*types.WaitForUpdatesExResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForUpdatesEx indicates an expected call of WaitForUpdatesEx
func (mr *MockContextMockRecorder) WaitForUpdatesEx(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForUpdatesEx", reflect.TypeOf((*MockContext)(nil).WaitForUpdatesEx), ctx, r, req)
}

// XmlToCustomizationSpecItem mocks base method
func (m *MockContext) XmlToCustomizationSpecItem(ctx context.Context, r soap.RoundTripper, req *types.XmlToCustomizationSpecItem) (*types.XmlToCustomizationSpecItemResponse, error) {
	ret := m.ctrl.Call(m, "XmlToCustomizationSpecItem", ctx, r, req)
	ret0, _ := ret[0].(*types.XmlToCustomizationSpecItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XmlToCustomizationSpecItem indicates an expected call of XmlToCustomizationSpecItem
func (mr *MockContextMockRecorder) XmlToCustomizationSpecItem(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XmlToCustomizationSpecItem", reflect.TypeOf((*MockContext)(nil).XmlToCustomizationSpecItem), ctx, r, req)
}

// ZeroFillVirtualDisk_Task mocks base method
func (m *MockContext) ZeroFillVirtualDisk_Task(ctx context.Context, r soap.RoundTripper, req *types.ZeroFillVirtualDisk_Task) (*types.ZeroFillVirtualDisk_TaskResponse, error) {
	ret := m.ctrl.Call(m, "ZeroFillVirtualDisk_Task", ctx, r, req)
	ret0, _ := ret[0].(*types.ZeroFillVirtualDisk_TaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZeroFillVirtualDisk_Task indicates an expected call of ZeroFillVirtualDisk_Task
func (mr *MockContextMockRecorder) ZeroFillVirtualDisk_Task(ctx, r, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZeroFillVirtualDisk_Task", reflect.TypeOf((*MockContext)(nil).ZeroFillVirtualDisk_Task), ctx, r, req)
}

// GetServiceContent mocks base method
func (m *MockContext) GetServiceContent(ctx context.Context, r soap.RoundTripper) (types.ServiceContent, error) {
	ret := m.ctrl.Call(m, "GetServiceContent", ctx, r)
	ret0, _ := ret[0].(types.ServiceContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceContent indicates an expected call of GetServiceContent
func (mr *MockContextMockRecorder) GetServiceContent(ctx, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceContent", reflect.TypeOf((*MockContext)(nil).GetServiceContent), ctx, r)
}

// GetCurrentTime mocks base method
func (m *MockContext) GetCurrentTime(ctx context.Context, r soap.RoundTripper) (*time.Time, error) {
	ret := m.ctrl.Call(m, "GetCurrentTime", ctx, r)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentTime indicates an expected call of GetCurrentTime
func (mr *MockContextMockRecorder) GetCurrentTime(ctx, r interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockContext)(nil).GetCurrentTime), ctx, r)
}
